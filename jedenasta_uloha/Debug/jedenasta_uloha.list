
jedenasta_uloha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d08  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08008eb8  08008eb8  00018eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f8  080090f8  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009100  08009100  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009104  08009104  00019104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08009108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000a6c  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b88  20000b88  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010850  00000000  00000000  0002018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c17  00000000  00000000  000309df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d20  00000000  00000000  000335f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009f0  00000000  00000000  00034318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000252b3  00000000  00000000  00034d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011664  00000000  00000000  00059fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5add  00000000  00000000  0006b61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000397c  00000000  00000000  001410fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00144a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008ea0 	.word	0x08008ea0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08008ea0 	.word	0x08008ea0

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	; 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__gedf2>:
 80007bc:	f04f 3cff 	mov.w	ip, #4294967295
 80007c0:	e006      	b.n	80007d0 <__cmpdf2+0x4>
 80007c2:	bf00      	nop

080007c4 <__ledf2>:
 80007c4:	f04f 0c01 	mov.w	ip, #1
 80007c8:	e002      	b.n	80007d0 <__cmpdf2+0x4>
 80007ca:	bf00      	nop

080007cc <__cmpdf2>:
 80007cc:	f04f 0c01 	mov.w	ip, #1
 80007d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e6:	d01b      	beq.n	8000820 <__cmpdf2+0x54>
 80007e8:	b001      	add	sp, #4
 80007ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ee:	bf0c      	ite	eq
 80007f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f4:	ea91 0f03 	teqne	r1, r3
 80007f8:	bf02      	ittt	eq
 80007fa:	ea90 0f02 	teqeq	r0, r2
 80007fe:	2000      	moveq	r0, #0
 8000800:	4770      	bxeq	lr
 8000802:	f110 0f00 	cmn.w	r0, #0
 8000806:	ea91 0f03 	teq	r1, r3
 800080a:	bf58      	it	pl
 800080c:	4299      	cmppl	r1, r3
 800080e:	bf08      	it	eq
 8000810:	4290      	cmpeq	r0, r2
 8000812:	bf2c      	ite	cs
 8000814:	17d8      	asrcs	r0, r3, #31
 8000816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800081a:	f040 0001 	orr.w	r0, r0, #1
 800081e:	4770      	bx	lr
 8000820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000828:	d102      	bne.n	8000830 <__cmpdf2+0x64>
 800082a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082e:	d107      	bne.n	8000840 <__cmpdf2+0x74>
 8000830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000838:	d1d6      	bne.n	80007e8 <__cmpdf2+0x1c>
 800083a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083e:	d0d3      	beq.n	80007e8 <__cmpdf2+0x1c>
 8000840:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop

08000848 <__aeabi_cdrcmple>:
 8000848:	4684      	mov	ip, r0
 800084a:	4610      	mov	r0, r2
 800084c:	4662      	mov	r2, ip
 800084e:	468c      	mov	ip, r1
 8000850:	4619      	mov	r1, r3
 8000852:	4663      	mov	r3, ip
 8000854:	e000      	b.n	8000858 <__aeabi_cdcmpeq>
 8000856:	bf00      	nop

08000858 <__aeabi_cdcmpeq>:
 8000858:	b501      	push	{r0, lr}
 800085a:	f7ff ffb7 	bl	80007cc <__cmpdf2>
 800085e:	2800      	cmp	r0, #0
 8000860:	bf48      	it	mi
 8000862:	f110 0f00 	cmnmi.w	r0, #0
 8000866:	bd01      	pop	{r0, pc}

08000868 <__aeabi_dcmpeq>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff fff4 	bl	8000858 <__aeabi_cdcmpeq>
 8000870:	bf0c      	ite	eq
 8000872:	2001      	moveq	r0, #1
 8000874:	2000      	movne	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmplt>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffea 	bl	8000858 <__aeabi_cdcmpeq>
 8000884:	bf34      	ite	cc
 8000886:	2001      	movcc	r0, #1
 8000888:	2000      	movcs	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmple>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffe0 	bl	8000858 <__aeabi_cdcmpeq>
 8000898:	bf94      	ite	ls
 800089a:	2001      	movls	r0, #1
 800089c:	2000      	movhi	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmpge>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffce 	bl	8000848 <__aeabi_cdrcmple>
 80008ac:	bf94      	ite	ls
 80008ae:	2001      	movls	r0, #1
 80008b0:	2000      	movhi	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmpgt>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffc4 	bl	8000848 <__aeabi_cdrcmple>
 80008c0:	bf34      	ite	cc
 80008c2:	2001      	movcc	r0, #1
 80008c4:	2000      	movcs	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_d2iz>:
 80008cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008d4:	d215      	bcs.n	8000902 <__aeabi_d2iz+0x36>
 80008d6:	d511      	bpl.n	80008fc <__aeabi_d2iz+0x30>
 80008d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008e0:	d912      	bls.n	8000908 <__aeabi_d2iz+0x3c>
 80008e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008f2:	fa23 f002 	lsr.w	r0, r3, r2
 80008f6:	bf18      	it	ne
 80008f8:	4240      	negne	r0, r0
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000906:	d105      	bne.n	8000914 <__aeabi_d2iz+0x48>
 8000908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800090c:	bf08      	it	eq
 800090e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b970 	b.w	8000cb4 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9e08      	ldr	r6, [sp, #32]
 80009f2:	460d      	mov	r5, r1
 80009f4:	4604      	mov	r4, r0
 80009f6:	460f      	mov	r7, r1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d14a      	bne.n	8000a92 <__udivmoddi4+0xa6>
 80009fc:	428a      	cmp	r2, r1
 80009fe:	4694      	mov	ip, r2
 8000a00:	d965      	bls.n	8000ace <__udivmoddi4+0xe2>
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	b143      	cbz	r3, 8000a1a <__udivmoddi4+0x2e>
 8000a08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a0c:	f1c3 0220 	rsb	r2, r3, #32
 8000a10:	409f      	lsls	r7, r3
 8000a12:	fa20 f202 	lsr.w	r2, r0, r2
 8000a16:	4317      	orrs	r7, r2
 8000a18:	409c      	lsls	r4, r3
 8000a1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a1e:	fa1f f58c 	uxth.w	r5, ip
 8000a22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a26:	0c22      	lsrs	r2, r4, #16
 8000a28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a30:	fb01 f005 	mul.w	r0, r1, r5
 8000a34:	4290      	cmp	r0, r2
 8000a36:	d90a      	bls.n	8000a4e <__udivmoddi4+0x62>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a40:	f080 811c 	bcs.w	8000c7c <__udivmoddi4+0x290>
 8000a44:	4290      	cmp	r0, r2
 8000a46:	f240 8119 	bls.w	8000c7c <__udivmoddi4+0x290>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4462      	add	r2, ip
 8000a4e:	1a12      	subs	r2, r2, r0
 8000a50:	b2a4      	uxth	r4, r4
 8000a52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a5e:	fb00 f505 	mul.w	r5, r0, r5
 8000a62:	42a5      	cmp	r5, r4
 8000a64:	d90a      	bls.n	8000a7c <__udivmoddi4+0x90>
 8000a66:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a6e:	f080 8107 	bcs.w	8000c80 <__udivmoddi4+0x294>
 8000a72:	42a5      	cmp	r5, r4
 8000a74:	f240 8104 	bls.w	8000c80 <__udivmoddi4+0x294>
 8000a78:	4464      	add	r4, ip
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	2100      	movs	r1, #0
 8000a84:	b11e      	cbz	r6, 8000a8e <__udivmoddi4+0xa2>
 8000a86:	40dc      	lsrs	r4, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0xbc>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	f000 80ed 	beq.w	8000c76 <__udivmoddi4+0x28a>
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	fab3 f183 	clz	r1, r3
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d149      	bne.n	8000b44 <__udivmoddi4+0x158>
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	d302      	bcc.n	8000aba <__udivmoddi4+0xce>
 8000ab4:	4282      	cmp	r2, r0
 8000ab6:	f200 80f8 	bhi.w	8000caa <__udivmoddi4+0x2be>
 8000aba:	1a84      	subs	r4, r0, r2
 8000abc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d0e2      	beq.n	8000a8e <__udivmoddi4+0xa2>
 8000ac8:	e9c6 4700 	strd	r4, r7, [r6]
 8000acc:	e7df      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000ace:	b902      	cbnz	r2, 8000ad2 <__udivmoddi4+0xe6>
 8000ad0:	deff      	udf	#255	; 0xff
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8090 	bne.w	8000bfc <__udivmoddi4+0x210>
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000aec:	fb07 2015 	mls	r0, r7, r5, r2
 8000af0:	0c22      	lsrs	r2, r4, #16
 8000af2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000af6:	fb0e f005 	mul.w	r0, lr, r5
 8000afa:	4290      	cmp	r0, r2
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x124>
 8000afe:	eb1c 0202 	adds.w	r2, ip, r2
 8000b02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x122>
 8000b08:	4290      	cmp	r0, r2
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2b8>
 8000b0e:	4645      	mov	r5, r8
 8000b10:	1a12      	subs	r2, r2, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b18:	fb07 2210 	mls	r2, r7, r0, r2
 8000b1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x14e>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x14c>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2c2>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b42:	e79f      	b.n	8000a84 <__udivmoddi4+0x98>
 8000b44:	f1c1 0720 	rsb	r7, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa05 f401 	lsl.w	r4, r5, r1
 8000b56:	fa20 f307 	lsr.w	r3, r0, r7
 8000b5a:	40fd      	lsrs	r5, r7
 8000b5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b60:	4323      	orrs	r3, r4
 8000b62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b66:	fa1f fe8c 	uxth.w	lr, ip
 8000b6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b6e:	0c1c      	lsrs	r4, r3, #16
 8000b70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b74:	fb08 f50e 	mul.w	r5, r8, lr
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b0>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b90:	42a5      	cmp	r5, r4
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4464      	add	r4, ip
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	b29d      	uxth	r5, r3
 8000ba0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1da>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2ac>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2ac>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	4464      	add	r4, ip
 8000bc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bca:	fba3 9502 	umull	r9, r5, r3, r2
 8000bce:	eba4 040e 	sub.w	r4, r4, lr
 8000bd2:	42ac      	cmp	r4, r5
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46ae      	mov	lr, r5
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x29c>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x298>
 8000bdc:	b156      	cbz	r6, 8000bf4 <__udivmoddi4+0x208>
 8000bde:	ebb0 0208 	subs.w	r2, r0, r8
 8000be2:	eb64 040e 	sbc.w	r4, r4, lr
 8000be6:	fa04 f707 	lsl.w	r7, r4, r7
 8000bea:	40ca      	lsrs	r2, r1
 8000bec:	40cc      	lsrs	r4, r1
 8000bee:	4317      	orrs	r7, r2
 8000bf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	f1c3 0120 	rsb	r1, r3, #32
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	fa20 f201 	lsr.w	r2, r0, r1
 8000c08:	fa25 f101 	lsr.w	r1, r5, r1
 8000c0c:	409d      	lsls	r5, r3
 8000c0e:	432a      	orrs	r2, r5
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c20:	0c11      	lsrs	r1, r2, #16
 8000c22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c26:	fb00 f50e 	mul.w	r5, r0, lr
 8000c2a:	428d      	cmp	r5, r1
 8000c2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x258>
 8000c32:	eb1c 0101 	adds.w	r1, ip, r1
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c3c:	428d      	cmp	r5, r1
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1b49      	subs	r1, r1, r5
 8000c46:	b292      	uxth	r2, r2
 8000c48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	fb05 f10e 	mul.w	r1, r5, lr
 8000c58:	4291      	cmp	r1, r2
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x282>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2a8>
 8000c66:	4291      	cmp	r1, r2
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2a8>
 8000c6a:	3d02      	subs	r5, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a52      	subs	r2, r2, r1
 8000c70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0xfc>
 8000c76:	4631      	mov	r1, r6
 8000c78:	4630      	mov	r0, r6
 8000c7a:	e708      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e6e6      	b.n	8000a4e <__udivmoddi4+0x62>
 8000c80:	4610      	mov	r0, r2
 8000c82:	e6fb      	b.n	8000a7c <__udivmoddi4+0x90>
 8000c84:	4548      	cmp	r0, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f0>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c90:	3b01      	subs	r3, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f0>
 8000c94:	4645      	mov	r5, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x282>
 8000c98:	462b      	mov	r3, r5
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1da>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x258>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b0>
 8000ca4:	3d02      	subs	r5, #2
 8000ca6:	4462      	add	r2, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x124>
 8000caa:	4608      	mov	r0, r1
 8000cac:	e70a      	b.n	8000ac4 <__udivmoddi4+0xd8>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x14e>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <step>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void step(int8_t x, int8_t y, uint8_t btn)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	71bb      	strb	r3, [r7, #6]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	717b      	strb	r3, [r7, #5]
	uint8_t buff[4];
	buff[0] = btn; // leve tlacitko (0x01 alebo 0x00)
 8000cca:	797b      	ldrb	r3, [r7, #5]
 8000ccc:	733b      	strb	r3, [r7, #12]
	buff[1] = (int8_t) (x); // posun X
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	737b      	strb	r3, [r7, #13]
	buff[2] = (int8_t) (y); // posun Y
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	73bb      	strb	r3, [r7, #14]
	buff[3] = 0; // bez scrollu
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2204      	movs	r2, #4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <step+0x48>)
 8000ce4:	f005 f848 	bl	8005d78 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <step+0x48>)
 8000cea:	f005 f875 	bl	8005dd8 <USBD_HID_GetPollingInterval>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fd4f 	bl	8001794 <HAL_Delay>
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000018c 	.word	0x2000018c

08000d04 <circle>:

void circle(uint16_t radius)
{
 8000d04:	b5b0      	push	{r4, r5, r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
    const static float full_circle = 2 * M_PI;
    const static uint8_t no_of_segments = 100;
    float delta_angle = full_circle / no_of_segments;
 8000d0e:	4b50      	ldr	r3, [pc, #320]	; (8000e50 <circle+0x14c>)
 8000d10:	edd3 6a00 	vldr	s13, [r3]
 8000d14:	4b4f      	ldr	r3, [pc, #316]	; (8000e54 <circle+0x150>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	ee07 3a90 	vmov	s15, r3
 8000d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d24:	edc7 7a04 	vstr	s15, [r7, #16]
    int8_t prev_x = radius * cos(0);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcdc 	bl	80006e8 <__aeabi_i2d>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4610      	mov	r0, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	f7ff fdc8 	bl	80008cc <__aeabi_d2iz>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	75fb      	strb	r3, [r7, #23]
    int8_t prev_y = radius * sin(0);
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcd0 	bl	80006e8 <__aeabi_i2d>
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	f7ff fa4e 	bl	80001f0 <__aeabi_dmul>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f7ff fdb6 	bl	80008cc <__aeabi_d2iz>
 8000d60:	4603      	mov	r3, r0
 8000d62:	75bb      	strb	r3, [r7, #22]
    // press the button
    step(0,0,1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2100      	movs	r1, #0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff ffa5 	bl	8000cb8 <step>
    for (uint8_t i = 1; i <= no_of_segments+1; i++)
 8000d6e:	2301      	movs	r3, #1
 8000d70:	757b      	strb	r3, [r7, #21]
 8000d72:	e05d      	b.n	8000e30 <circle+0x12c>
    {
    	float angle = delta_angle * i;
 8000d74:	7d7b      	ldrb	r3, [r7, #21]
 8000d76:	ee07 3a90 	vmov	s15, r3
 8000d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d86:	edc7 7a03 	vstr	s15, [r7, #12]
    	int8_t x = radius * cos(angle);
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fcab 	bl	80006e8 <__aeabi_i2d>
 8000d92:	4604      	mov	r4, r0
 8000d94:	460d      	mov	r5, r1
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f7ff fcb8 	bl	800070c <__aeabi_f2d>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	ec43 2b10 	vmov	d0, r2, r3
 8000da4:	f006 ffe8 	bl	8007d78 <cos>
 8000da8:	ec53 2b10 	vmov	r2, r3, d0
 8000dac:	4620      	mov	r0, r4
 8000dae:	4629      	mov	r1, r5
 8000db0:	f7ff fa1e 	bl	80001f0 <__aeabi_dmul>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff fd86 	bl	80008cc <__aeabi_d2iz>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	72fb      	strb	r3, [r7, #11]
    	int8_t y = radius * sin(angle);
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fc8e 	bl	80006e8 <__aeabi_i2d>
 8000dcc:	4604      	mov	r4, r0
 8000dce:	460d      	mov	r5, r1
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff fc9b 	bl	800070c <__aeabi_f2d>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	ec43 2b10 	vmov	d0, r2, r3
 8000dde:	f007 f81f 	bl	8007e20 <sin>
 8000de2:	ec53 2b10 	vmov	r2, r3, d0
 8000de6:	4620      	mov	r0, r4
 8000de8:	4629      	mov	r1, r5
 8000dea:	f7ff fa01 	bl	80001f0 <__aeabi_dmul>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f7ff fd69 	bl	80008cc <__aeabi_d2iz>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	72bb      	strb	r3, [r7, #10]
    	int8_t delta_x = x - prev_x;
 8000dfe:	7afa      	ldrb	r2, [r7, #11]
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	727b      	strb	r3, [r7, #9]
    	int8_t delta_y = y - prev_y;
 8000e08:	7aba      	ldrb	r2, [r7, #10]
 8000e0a:	7dbb      	ldrb	r3, [r7, #22]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	723b      	strb	r3, [r7, #8]
    	step(delta_x, delta_y, 1);
 8000e12:	f997 1008 	ldrsb.w	r1, [r7, #8]
 8000e16:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff4b 	bl	8000cb8 <step>
    	//HAL_Delay(1);
    	prev_x = x;
 8000e22:	7afb      	ldrb	r3, [r7, #11]
 8000e24:	75fb      	strb	r3, [r7, #23]
    	prev_y = y;
 8000e26:	7abb      	ldrb	r3, [r7, #10]
 8000e28:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 1; i <= no_of_segments+1; i++)
 8000e2a:	7d7b      	ldrb	r3, [r7, #21]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	757b      	strb	r3, [r7, #21]
 8000e30:	7d7a      	ldrb	r2, [r7, #21]
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <circle+0x150>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dd9b      	ble.n	8000d74 <circle+0x70>
    }
    // depress the button
    step(0,0,0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff ff39 	bl	8000cb8 <step>

}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08008f00 	.word	0x08008f00
 8000e54:	08008f04 	.word	0x08008f04

08000e58 <draw_part_circle>:

// parameter part shall be from 0 to 1
void draw_part_circle(uint16_t radius, float part)
{
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	ed87 0a00 	vstr	s0, [r7]
 8000e64:	80fb      	strh	r3, [r7, #6]
    const float full_circle = 2 * M_PI * part;
 8000e66:	6838      	ldr	r0, [r7, #0]
 8000e68:	f7ff fc50 	bl	800070c <__aeabi_f2d>
 8000e6c:	a358      	add	r3, pc, #352	; (adr r3, 8000fd0 <draw_part_circle+0x178>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff f9bd 	bl	80001f0 <__aeabi_dmul>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f7ff fd4d 	bl	800091c <__aeabi_d2f>
 8000e82:	4603      	mov	r3, r0
 8000e84:	61bb      	str	r3, [r7, #24]
    const uint8_t no_of_segments = 100;
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	75fb      	strb	r3, [r7, #23]
    float delta_angle = full_circle / no_of_segments;
 8000e8a:	7dfb      	ldrb	r3, [r7, #23]
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e94:	edd7 6a06 	vldr	s13, [r7, #24]
 8000e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9c:	edc7 7a04 	vstr	s15, [r7, #16]
    int8_t prev_x = radius * cos(0);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fc20 	bl	80006e8 <__aeabi_i2d>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f7ff fd0c 	bl	80008cc <__aeabi_d2iz>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	77fb      	strb	r3, [r7, #31]
    int8_t prev_y = radius * sin(0);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fc14 	bl	80006e8 <__aeabi_i2d>
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	f7ff f992 	bl	80001f0 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fcfa 	bl	80008cc <__aeabi_d2iz>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	77bb      	strb	r3, [r7, #30]
    // press the mouse button
    step(0,0,1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff fee9 	bl	8000cb8 <step>
    for (uint8_t i = 1; i <= no_of_segments+1; i++)
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	777b      	strb	r3, [r7, #29]
 8000eea:	e060      	b.n	8000fae <draw_part_circle+0x156>
    {
    	float angle = delta_angle * i;
 8000eec:	7f7b      	ldrb	r3, [r7, #29]
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efe:	edc7 7a03 	vstr	s15, [r7, #12]
    	int8_t x = radius * cos(angle);
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fbef 	bl	80006e8 <__aeabi_i2d>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	460d      	mov	r5, r1
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff fbfc 	bl	800070c <__aeabi_f2d>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	ec43 2b10 	vmov	d0, r2, r3
 8000f1c:	f006 ff2c 	bl	8007d78 <cos>
 8000f20:	ec53 2b10 	vmov	r2, r3, d0
 8000f24:	4620      	mov	r0, r4
 8000f26:	4629      	mov	r1, r5
 8000f28:	f7ff f962 	bl	80001f0 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff fcca 	bl	80008cc <__aeabi_d2iz>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	72fb      	strb	r3, [r7, #11]
    	int8_t y = radius * sin(angle);
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fbd2 	bl	80006e8 <__aeabi_i2d>
 8000f44:	4604      	mov	r4, r0
 8000f46:	460d      	mov	r5, r1
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f7ff fbdf 	bl	800070c <__aeabi_f2d>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	ec43 2b10 	vmov	d0, r2, r3
 8000f56:	f006 ff63 	bl	8007e20 <sin>
 8000f5a:	ec53 2b10 	vmov	r2, r3, d0
 8000f5e:	4620      	mov	r0, r4
 8000f60:	4629      	mov	r1, r5
 8000f62:	f7ff f945 	bl	80001f0 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fcad 	bl	80008cc <__aeabi_d2iz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	72bb      	strb	r3, [r7, #10]
    	int8_t delta_x = x - prev_x;
 8000f76:	7afa      	ldrb	r2, [r7, #11]
 8000f78:	7ffb      	ldrb	r3, [r7, #31]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	727b      	strb	r3, [r7, #9]
    	int8_t delta_y = y - prev_y;
 8000f80:	7aba      	ldrb	r2, [r7, #10]
 8000f82:	7fbb      	ldrb	r3, [r7, #30]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	723b      	strb	r3, [r7, #8]
    	step(delta_x, delta_y, 1);
 8000f8a:	f997 1008 	ldrsb.w	r1, [r7, #8]
 8000f8e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fe8f 	bl	8000cb8 <step>
    	HAL_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f000 fbfa 	bl	8001794 <HAL_Delay>
    	prev_x = x;
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	77fb      	strb	r3, [r7, #31]
    	prev_y = y;
 8000fa4:	7abb      	ldrb	r3, [r7, #10]
 8000fa6:	77bb      	strb	r3, [r7, #30]
    for (uint8_t i = 1; i <= no_of_segments+1; i++)
 8000fa8:	7f7b      	ldrb	r3, [r7, #29]
 8000faa:	3301      	adds	r3, #1
 8000fac:	777b      	strb	r3, [r7, #29]
 8000fae:	7f7a      	ldrb	r2, [r7, #29]
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dd99      	ble.n	8000eec <draw_part_circle+0x94>
    }
    // release the mouse button
    step(0,0,0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff fe7b 	bl	8000cb8 <step>
}
 8000fc2:	bf00      	nop
 8000fc4:	3720      	adds	r7, #32
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	54442d18 	.word	0x54442d18
 8000fd4:	401921fb 	.word	0x401921fb

08000fd8 <happy_face>:

void happy_face()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
	uint16_t diameter = 100;
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	81fb      	strh	r3, [r7, #14]
	circle(diameter);
 8000fe2:	89fb      	ldrh	r3, [r7, #14]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe8d 	bl	8000d04 <circle>
	// now 2 eyes in 1/4 and 3/4 of the face and in 1/4 height from center
	// draw left eye
	step(0, -diameter/8, 0);
 8000fea:	89fb      	ldrh	r3, [r7, #14]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da00      	bge.n	8000ff2 <happy_face+0x1a>
 8000ff0:	3307      	adds	r3, #7
 8000ff2:	10db      	asrs	r3, r3, #3
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fe5b 	bl	8000cb8 <step>
	HAL_Delay(10);
 8001002:	200a      	movs	r0, #10
 8001004:	f000 fbc6 	bl	8001794 <HAL_Delay>
	step(0, -diameter/8, 0);
 8001008:	89fb      	ldrh	r3, [r7, #14]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da00      	bge.n	8001010 <happy_face+0x38>
 800100e:	3307      	adds	r3, #7
 8001010:	10db      	asrs	r3, r3, #3
 8001012:	425b      	negs	r3, r3
 8001014:	b25b      	sxtb	r3, r3
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff fe4c 	bl	8000cb8 <step>
	step(-diameter/4 * 3, 0, 0);
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	2b00      	cmp	r3, #0
 8001024:	da00      	bge.n	8001028 <happy_face+0x50>
 8001026:	3303      	adds	r3, #3
 8001028:	109b      	asrs	r3, r3, #2
 800102a:	425b      	negs	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	0052      	lsls	r2, r2, #1
 8001032:	4413      	add	r3, r2
 8001034:	b2db      	uxtb	r3, r3
 8001036:	b25b      	sxtb	r3, r3
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fe3b 	bl	8000cb8 <step>
	circle(diameter/10);
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	4a38      	ldr	r2, [pc, #224]	; (8001128 <happy_face+0x150>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	b29b      	uxth	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe58 	bl	8000d04 <circle>
	step(diameter/4 * 2.5f, 0, 0);
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	b29b      	uxth	r3, r3
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001062:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800106e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001072:	793b      	ldrb	r3, [r7, #4]
 8001074:	b25b      	sxtb	r3, r3
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe1c 	bl	8000cb8 <step>
	circle(diameter/10);
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	4a29      	ldr	r2, [pc, #164]	; (8001128 <happy_face+0x150>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fe39 	bl	8000d04 <circle>

	 // draw smile
	step(-diameter/8, diameter/3, 0);
 8001092:	89fb      	ldrh	r3, [r7, #14]
 8001094:	2b00      	cmp	r3, #0
 8001096:	da00      	bge.n	800109a <happy_face+0xc2>
 8001098:	3307      	adds	r3, #7
 800109a:	10db      	asrs	r3, r3, #3
 800109c:	425b      	negs	r3, r3
 800109e:	b258      	sxtb	r0, r3
 80010a0:	89fb      	ldrh	r3, [r7, #14]
 80010a2:	4a22      	ldr	r2, [pc, #136]	; (800112c <happy_face+0x154>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	085b      	lsrs	r3, r3, #1
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	f7ff fe01 	bl	8000cb8 <step>
	draw_part_circle(diameter/2, 0.5f);
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fec9 	bl	8000e58 <draw_part_circle>

	// draw nose
    step(diameter/5, -diameter/7, 0);
 80010c6:	89fb      	ldrh	r3, [r7, #14]
 80010c8:	4a17      	ldr	r2, [pc, #92]	; (8001128 <happy_face+0x150>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b258      	sxtb	r0, r3
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	4a16      	ldr	r2, [pc, #88]	; (8001130 <happy_face+0x158>)
 80010d8:	fb82 1203 	smull	r1, r2, r2, r3
 80010dc:	441a      	add	r2, r3
 80010de:	1092      	asrs	r2, r2, #2
 80010e0:	17db      	asrs	r3, r3, #31
 80010e2:	1a9b      	subs	r3, r3, r2
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fde5 	bl	8000cb8 <step>
    //circle(diameter/10);
    step(0,0,1);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2100      	movs	r1, #0
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fde0 	bl	8000cb8 <step>
    step(0, -diameter/7, 1);
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <happy_face+0x158>)
 80010fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001100:	441a      	add	r2, r3
 8001102:	1092      	asrs	r2, r2, #2
 8001104:	17db      	asrs	r3, r3, #31
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	b25b      	sxtb	r3, r3
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fdd2 	bl	8000cb8 <step>
    step(0,0,0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fdcd 	bl	8000cb8 <step>

}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	cccccccd 	.word	0xcccccccd
 800112c:	aaaaaaab 	.word	0xaaaaaaab
 8001130:	92492493 	.word	0x92492493

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 faba 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f814 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 f8a6 	bl	8001290 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001144:	f000 f87a 	bl	800123c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001148:	f006 f9a4 	bl	8007494 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // wait till this flag is set by Interrupt from User Button
	  if (draw_circle_requested)
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <main+0x30>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0fa      	beq.n	800114c <main+0x18>
	  {
		  draw_circle_requested = 0;
 8001156:	4b03      	ldr	r3, [pc, #12]	; (8001164 <main+0x30>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
		  happy_face();
 800115c:	f7ff ff3c 	bl	8000fd8 <happy_face>
	  if (draw_circle_requested)
 8001160:	e7f4      	b.n	800114c <main+0x18>
 8001162:	bf00      	nop
 8001164:	2000017c 	.word	0x2000017c

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	2230      	movs	r2, #48	; 0x30
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f006 fdd2 	bl	8007d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <SystemClock_Config+0xcc>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <SystemClock_Config+0xcc>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <SystemClock_Config+0xd0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <SystemClock_Config+0xd0>)
 80011b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d8:	2304      	movs	r3, #4
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011dc:	23a8      	movs	r3, #168	; 0xa8
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e4:	2307      	movs	r3, #7
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 f865 	bl	80032bc <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f8:	f000 f96c 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001208:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2105      	movs	r1, #5
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fac6 	bl	80037ac <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001226:	f000 f955 	bl	80014d4 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3750      	adds	r7, #80	; 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_USART3_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001274:	f002 fcba 	bl	8003bec <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f929 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000138 	.word	0x20000138
 800128c:	40004800 	.word	0x40004800

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	4b71      	ldr	r3, [pc, #452]	; (8001470 <MX_GPIO_Init+0x1e0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a70      	ldr	r2, [pc, #448]	; (8001470 <MX_GPIO_Init+0x1e0>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <MX_GPIO_Init+0x1e0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	4b6a      	ldr	r3, [pc, #424]	; (8001470 <MX_GPIO_Init+0x1e0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a69      	ldr	r2, [pc, #420]	; (8001470 <MX_GPIO_Init+0x1e0>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b67      	ldr	r3, [pc, #412]	; (8001470 <MX_GPIO_Init+0x1e0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b63      	ldr	r3, [pc, #396]	; (8001470 <MX_GPIO_Init+0x1e0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a62      	ldr	r2, [pc, #392]	; (8001470 <MX_GPIO_Init+0x1e0>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b60      	ldr	r3, [pc, #384]	; (8001470 <MX_GPIO_Init+0x1e0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <MX_GPIO_Init+0x1e0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a5b      	ldr	r2, [pc, #364]	; (8001470 <MX_GPIO_Init+0x1e0>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b59      	ldr	r3, [pc, #356]	; (8001470 <MX_GPIO_Init+0x1e0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <MX_GPIO_Init+0x1e0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a54      	ldr	r2, [pc, #336]	; (8001470 <MX_GPIO_Init+0x1e0>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b52      	ldr	r3, [pc, #328]	; (8001470 <MX_GPIO_Init+0x1e0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b4e      	ldr	r3, [pc, #312]	; (8001470 <MX_GPIO_Init+0x1e0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a4d      	ldr	r2, [pc, #308]	; (8001470 <MX_GPIO_Init+0x1e0>)
 800133c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b4b      	ldr	r3, [pc, #300]	; (8001470 <MX_GPIO_Init+0x1e0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	f244 0181 	movw	r1, #16513	; 0x4081
 8001354:	4847      	ldr	r0, [pc, #284]	; (8001474 <MX_GPIO_Init+0x1e4>)
 8001356:	f000 fcff 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2140      	movs	r1, #64	; 0x40
 800135e:	4846      	ldr	r0, [pc, #280]	; (8001478 <MX_GPIO_Init+0x1e8>)
 8001360:	f000 fcfa 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800136a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4840      	ldr	r0, [pc, #256]	; (800147c <MX_GPIO_Init+0x1ec>)
 800137c:	f000 fb40 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001380:	2332      	movs	r3, #50	; 0x32
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001390:	230b      	movs	r3, #11
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4838      	ldr	r0, [pc, #224]	; (800147c <MX_GPIO_Init+0x1ec>)
 800139c:	f000 fb30 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013a0:	2386      	movs	r3, #134	; 0x86
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b0:	230b      	movs	r3, #11
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4831      	ldr	r0, [pc, #196]	; (8001480 <MX_GPIO_Init+0x1f0>)
 80013bc:	f000 fb20 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4826      	ldr	r0, [pc, #152]	; (8001474 <MX_GPIO_Init+0x1e4>)
 80013da:	f000 fb11 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f0:	230b      	movs	r3, #11
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	481e      	ldr	r0, [pc, #120]	; (8001474 <MX_GPIO_Init+0x1e4>)
 80013fc:	f000 fb00 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001400:	2340      	movs	r3, #64	; 0x40
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4818      	ldr	r0, [pc, #96]	; (8001478 <MX_GPIO_Init+0x1e8>)
 8001418:	f000 faf2 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4812      	ldr	r0, [pc, #72]	; (8001478 <MX_GPIO_Init+0x1e8>)
 8001430:	f000 fae6 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001434:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001446:	230b      	movs	r3, #11
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <MX_GPIO_Init+0x1e8>)
 8001452:	f000 fad5 	bl	8001a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2028      	movs	r0, #40	; 0x28
 800145c:	f000 fa99 	bl	8001992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001460:	2028      	movs	r0, #40	; 0x28
 8001462:	f000 fab2 	bl	80019ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001466:	bf00      	nop
 8001468:	3730      	adds	r7, #48	; 0x30
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40020400 	.word	0x40020400
 8001478:	40021800 	.word	0x40021800
 800147c:	40020800 	.word	0x40020800
 8001480:	40020000 	.word	0x40020000

08001484 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// Button Callback
#define BUTTON_COOLDOWN 200

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_button_tick = 0;
    if(GPIO_Pin == GPIO_PIN_13) // If The INT Source Is EXTI Line9 (A9 Pin)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001494:	d115      	bne.n	80014c2 <HAL_GPIO_EXTI_Callback+0x3e>
    {
    	if (HAL_GetTick() < last_button_tick + BUTTON_COOLDOWN){
 8001496:	f000 f971 	bl	800177c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x44>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	33c8      	adds	r3, #200	; 0xc8
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d30c      	bcc.n	80014c0 <HAL_GPIO_EXTI_Callback+0x3c>
    		return;
    	}
    	last_button_tick = HAL_GetTick();
 80014a6:	f000 f969 	bl	800177c <HAL_GetTick>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x44>)
 80014ae:	6013      	str	r3, [r2, #0]
    	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); // Toggle The Output (LED) Pin
 80014b0:	2101      	movs	r1, #1
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <HAL_GPIO_EXTI_Callback+0x48>)
 80014b4:	f000 fc69 	bl	8001d8a <HAL_GPIO_TogglePin>
    	draw_circle_requested = 1;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e000      	b.n	80014c2 <HAL_GPIO_EXTI_Callback+0x3e>
    		return;
 80014c0:	bf00      	nop
    }
}
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000180 	.word	0x20000180
 80014cc:	40020400 	.word	0x40020400
 80014d0:	2000017c 	.word	0x2000017c

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <HAL_MspInit+0x4c>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_MspInit+0x4c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_UART_MspInit+0x84>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12c      	bne.n	80015ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_UART_MspInit+0x88>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800158a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800159c:	2307      	movs	r3, #7
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_UART_MspInit+0x8c>)
 80015a8:	f000 fa2a 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40004800 	.word	0x40004800
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020c00 	.word	0x40020c00

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 f8a2 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001618:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800161c:	f000 fbd0 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <OTG_FS_IRQHandler+0x10>)
 800162a:	f000 fd31 	bl	8002090 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000668 	.word	0x20000668

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001686:	f7ff ffd7 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f006 fb51 	bl	8007d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff fd51 	bl	8001134 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001694:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80016a0:	08009108 	.word	0x08009108
  ldr r2, =_sbss
 80016a4:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80016a8:	20000b88 	.word	0x20000b88

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f94f 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fefc 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f967 	bl	80019e6 <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f92f 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000008 	.word	0x20000008
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	20000184 	.word	0x20000184

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000184 	.word	0x20000184

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff29 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff3e 	bl	8001824 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff8e 	bl	80018d0 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff31 	bl	8001840 <__NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa2 	bl	8001938 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e177      	b.n	8001d0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 8166 	bne.w	8001d06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d005      	beq.n	8001a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d130      	bne.n	8001ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d017      	beq.n	8001af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80c0 	beq.w	8001d06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a65      	ldr	r2, [pc, #404]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba2:	4a61      	ldr	r2, [pc, #388]	; (8001d28 <HAL_GPIO_Init+0x328>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_GPIO_Init+0x32c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d037      	beq.n	8001c3e <HAL_GPIO_Init+0x23e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a57      	ldr	r2, [pc, #348]	; (8001d30 <HAL_GPIO_Init+0x330>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d031      	beq.n	8001c3a <HAL_GPIO_Init+0x23a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a56      	ldr	r2, [pc, #344]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d02b      	beq.n	8001c36 <HAL_GPIO_Init+0x236>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <HAL_GPIO_Init+0x338>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d025      	beq.n	8001c32 <HAL_GPIO_Init+0x232>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a54      	ldr	r2, [pc, #336]	; (8001d3c <HAL_GPIO_Init+0x33c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01f      	beq.n	8001c2e <HAL_GPIO_Init+0x22e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a53      	ldr	r2, [pc, #332]	; (8001d40 <HAL_GPIO_Init+0x340>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_Init+0x22a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_GPIO_Init+0x344>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x226>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a51      	ldr	r2, [pc, #324]	; (8001d48 <HAL_GPIO_Init+0x348>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x222>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a50      	ldr	r2, [pc, #320]	; (8001d4c <HAL_GPIO_Init+0x34c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x21e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4f      	ldr	r2, [pc, #316]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x21a>
 8001c16:	2309      	movs	r3, #9
 8001c18:	e012      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c1a:	230a      	movs	r3, #10
 8001c1c:	e010      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c1e:	2308      	movs	r3, #8
 8001c20:	e00e      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c22:	2307      	movs	r3, #7
 8001c24:	e00c      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c26:	2306      	movs	r3, #6
 8001c28:	e00a      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	e008      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c2e:	2304      	movs	r3, #4
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f002 0203 	and.w	r2, r2, #3
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c50:	4935      	ldr	r1, [pc, #212]	; (8001d28 <HAL_GPIO_Init+0x328>)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_GPIO_Init+0x354>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c82:	4a34      	ldr	r2, [pc, #208]	; (8001d54 <HAL_GPIO_Init+0x354>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c88:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_GPIO_Init+0x354>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cac:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <HAL_GPIO_Init+0x354>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_GPIO_Init+0x354>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <HAL_GPIO_Init+0x354>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_GPIO_Init+0x354>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <HAL_GPIO_Init+0x354>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	f67f ae84 	bls.w	8001a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40021400 	.word	0x40021400
 8001d44:	40021800 	.word	0x40021800
 8001d48:	40021c00 	.word	0x40021c00
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40022400 	.word	0x40022400
 8001d54:	40013c00 	.word	0x40013c00

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d74:	e003      	b.n	8001d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	041a      	lsls	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	619a      	str	r2, [r3, #24]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d9c:	887a      	ldrh	r2, [r7, #2]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	041a      	lsls	r2, r3, #16
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	400b      	ands	r3, r1
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	619a      	str	r2, [r3, #24]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fb50 	bl	8001484 <HAL_GPIO_EXTI_Callback>
  }
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40013c00 	.word	0x40013c00

08001df0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	b08f      	sub	sp, #60	; 0x3c
 8001df4:	af0a      	add	r7, sp, #40	; 0x28
 8001df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e10f      	b.n	8002022 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d106      	bne.n	8001e22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f005 fc6f 	bl	8007700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2203      	movs	r2, #3
 8001e26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 faaa 	bl	800439a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	687e      	ldr	r6, [r7, #4]
 8001e4e:	466d      	mov	r5, sp
 8001e50:	f106 0410 	add.w	r4, r6, #16
 8001e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e60:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e64:	1d33      	adds	r3, r6, #4
 8001e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e68:	6838      	ldr	r0, [r7, #0]
 8001e6a:	f002 f981 	bl	8004170 <USB_CoreInit>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0d0      	b.n	8002022 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fa98 	bl	80043bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	e04a      	b.n	8001f28 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	333d      	adds	r3, #61	; 0x3d
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	333c      	adds	r3, #60	; 0x3c
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	b298      	uxth	r0, r3
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3344      	adds	r3, #68	; 0x44
 8001ece:	4602      	mov	r2, r0
 8001ed0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	3340      	adds	r3, #64	; 0x40
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3348      	adds	r3, #72	; 0x48
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	334c      	adds	r3, #76	; 0x4c
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3354      	adds	r3, #84	; 0x54
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	3301      	adds	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3af      	bcc.n	8001e92 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e044      	b.n	8001fc2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d3b5      	bcc.n	8001f38 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	687e      	ldr	r6, [r7, #4]
 8001fd4:	466d      	mov	r5, sp
 8001fd6:	f106 0410 	add.w	r4, r6, #16
 8001fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fea:	1d33      	adds	r3, r6, #4
 8001fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fee:	6838      	ldr	r0, [r7, #0]
 8001ff0:	f002 fa30 	bl	8004454 <USB_DevInit>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00d      	b.n	8002022 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fb7f 	bl	800571e <USB_DevDisconnect>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800202a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_PCD_Start+0x1c>
 8002042:	2302      	movs	r3, #2
 8002044:	e020      	b.n	8002088 <HAL_PCD_Start+0x5e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	2b01      	cmp	r3, #1
 8002054:	d109      	bne.n	800206a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800205a:	2b01      	cmp	r3, #1
 800205c:	d005      	beq.n	800206a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f002 f982 	bl	8004378 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f003 fb2f 	bl	80056dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b08d      	sub	sp, #52	; 0x34
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fbed 	bl	8005886 <USB_GetMode>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 848a 	bne.w	80029c8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fb51 	bl	8005760 <USB_ReadInterrupts>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8480 	beq.w	80029c6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fb3e 	bl	8005760 <USB_ReadInterrupts>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d107      	bne.n	80020fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f002 0202 	and.w	r2, r2, #2
 80020fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fb2c 	bl	8005760 <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b10      	cmp	r3, #16
 8002110:	d161      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0210 	bic.w	r2, r2, #16
 8002120:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	f003 020f 	and.w	r2, r3, #15
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	0c5b      	lsrs	r3, r3, #17
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	2b02      	cmp	r3, #2
 800214c:	d124      	bne.n	8002198 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d035      	beq.n	80021c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002168:	b29b      	uxth	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	6a38      	ldr	r0, [r7, #32]
 800216e:	f003 f963 	bl	8005438 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800217e:	441a      	add	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	6a1a      	ldr	r2, [r3, #32]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002190:	441a      	add	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	621a      	str	r2, [r3, #32]
 8002196:	e016      	b.n	80021c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	0c5b      	lsrs	r3, r3, #17
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	2b06      	cmp	r3, #6
 80021a2:	d110      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021aa:	2208      	movs	r2, #8
 80021ac:	4619      	mov	r1, r3
 80021ae:	6a38      	ldr	r0, [r7, #32]
 80021b0:	f003 f942 	bl	8005438 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	6a1a      	ldr	r2, [r3, #32]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c0:	441a      	add	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0210 	orr.w	r2, r2, #16
 80021d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 fac0 	bl	8005760 <USB_ReadInterrupts>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021ea:	f040 80a7 	bne.w	800233c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 fac5 	bl	8005786 <USB_ReadDevAllOutEpInterrupt>
 80021fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021fe:	e099      	b.n	8002334 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 808e 	beq.w	8002328 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f003 fae9 	bl	80057ee <USB_ReadDevOutEPInterrupt>
 800221c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00c      	beq.n	8002242 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002234:	461a      	mov	r2, r3
 8002236:	2301      	movs	r3, #1
 8002238:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800223a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 feab 	bl	8002f98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00c      	beq.n	8002266 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002258:	461a      	mov	r2, r3
 800225a:	2308      	movs	r3, #8
 800225c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800225e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 ff81 	bl	8003168 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227c:	461a      	mov	r2, r3
 800227e:	2310      	movs	r3, #16
 8002280:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d030      	beq.n	80022ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d109      	bne.n	80022ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	3304      	adds	r3, #4
 80022c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	78db      	ldrb	r3, [r3, #3]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d108      	bne.n	80022dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2200      	movs	r2, #0
 80022ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f005 fb26 	bl	8007928 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e8:	461a      	mov	r2, r3
 80022ea:	2302      	movs	r3, #2
 80022ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002304:	461a      	mov	r2, r3
 8002306:	2320      	movs	r3, #32
 8002308:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002326:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	3301      	adds	r3, #1
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	2b00      	cmp	r3, #0
 8002338:	f47f af62 	bne.w	8002200 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f003 fa0d 	bl	8005760 <USB_ReadInterrupts>
 8002346:	4603      	mov	r3, r0
 8002348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002350:	f040 80db 	bne.w	800250a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f003 fa2e 	bl	80057ba <USB_ReadDevAllInEpInterrupt>
 800235e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002364:	e0cd      	b.n	8002502 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80c2 	beq.w	80024f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f003 fa54 	bl	800582a <USB_ReadDevInEPInterrupt>
 8002382:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d057      	beq.n	800243e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	2201      	movs	r2, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69f9      	ldr	r1, [r7, #28]
 80023aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023ae:	4013      	ands	r3, r2
 80023b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023be:	461a      	mov	r2, r3
 80023c0:	2301      	movs	r3, #1
 80023c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d132      	bne.n	8002432 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	334c      	adds	r3, #76	; 0x4c
 80023dc:	6819      	ldr	r1, [r3, #0]
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4403      	add	r3, r0
 80023ec:	3348      	adds	r3, #72	; 0x48
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4419      	add	r1, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4403      	add	r3, r0
 8002400:	334c      	adds	r3, #76	; 0x4c
 8002402:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	2b00      	cmp	r3, #0
 8002408:	d113      	bne.n	8002432 <HAL_PCD_IRQHandler+0x3a2>
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3354      	adds	r3, #84	; 0x54
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d108      	bne.n	8002432 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800242a:	461a      	mov	r2, r3
 800242c:	2101      	movs	r1, #1
 800242e:	f003 fa5b 	bl	80058e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	b2db      	uxtb	r3, r3
 8002436:	4619      	mov	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f005 f9f0 	bl	800781e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002454:	461a      	mov	r2, r3
 8002456:	2308      	movs	r3, #8
 8002458:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002470:	461a      	mov	r2, r3
 8002472:	2310      	movs	r3, #16
 8002474:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800248c:	461a      	mov	r2, r3
 800248e:	2340      	movs	r3, #64	; 0x40
 8002490:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d023      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800249c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800249e:	6a38      	ldr	r0, [r7, #32]
 80024a0:	f002 f93c 	bl	800471c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	3338      	adds	r3, #56	; 0x38
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	3304      	adds	r3, #4
 80024b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	78db      	ldrb	r3, [r3, #3]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2200      	movs	r2, #0
 80024c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f005 fa3d 	bl	800794c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024de:	461a      	mov	r2, r3
 80024e0:	2302      	movs	r3, #2
 80024e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fcc3 	bl	8002e7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	3301      	adds	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	f47f af2e 	bne.w	8002366 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f003 f926 	bl	8005760 <USB_ReadInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800251a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800251e:	d122      	bne.n	8002566 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002546:	2100      	movs	r1, #0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 feab 	bl	80032a4 <HAL_PCDEx_LPM_Callback>
 800254e:	e002      	b.n	8002556 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f005 f9db 	bl	800790c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f003 f8f8 	bl	8005760 <USB_ReadInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800257a:	d112      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f005 f997 	bl	80078c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025a0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 f8da 	bl	8005760 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b6:	f040 80b7 	bne.w	8002728 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2110      	movs	r1, #16
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 f8a1 	bl	800471c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025de:	e046      	b.n	800266e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ec:	461a      	mov	r2, r3
 80025ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002604:	0151      	lsls	r1, r2, #5
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	440a      	add	r2, r1
 800260a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800260e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002612:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002620:	461a      	mov	r2, r3
 8002622:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002626:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002638:	0151      	lsls	r1, r2, #5
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	440a      	add	r2, r1
 800263e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002646:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	0151      	lsls	r1, r2, #5
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	440a      	add	r2, r1
 800265e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002662:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002666:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	3301      	adds	r3, #1
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002674:	429a      	cmp	r2, r3
 8002676:	d3b3      	bcc.n	80025e0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002686:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800268a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	2b00      	cmp	r3, #0
 8002692:	d016      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a4:	f043 030b 	orr.w	r3, r3, #11
 80026a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ba:	f043 030b 	orr.w	r3, r3, #11
 80026be:	6453      	str	r3, [r2, #68]	; 0x44
 80026c0:	e015      	b.n	80026ee <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e8:	f043 030b 	orr.w	r3, r3, #11
 80026ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002700:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002712:	461a      	mov	r2, r3
 8002714:	f003 f8e8 	bl	80058e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002726:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 f817 	bl	8005760 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273c:	d124      	bne.n	8002788 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 f8ad 	bl	80058a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f002 f862 	bl	8004816 <USB_GetDevSpeed>
 8002752:	4603      	mov	r3, r0
 8002754:	461a      	mov	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681c      	ldr	r4, [r3, #0]
 800275e:	f001 fa11 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8002762:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	4620      	mov	r0, r4
 800276e:	f001 fd61 	bl	8004234 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f005 f87b 	bl	800786e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002786:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f002 ffe7 	bl	8005760 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b08      	cmp	r3, #8
 800279a:	d10a      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f005 f858 	bl	8007852 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f002 0208 	and.w	r2, r2, #8
 80027b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 ffd2 	bl	8005760 <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b80      	cmp	r3, #128	; 0x80
 80027c4:	d122      	bne.n	800280c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027d2:	2301      	movs	r3, #1
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	e014      	b.n	8002802 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fb0f 	bl	8002e1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	3301      	adds	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	429a      	cmp	r2, r3
 800280a:	d3e5      	bcc.n	80027d8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f002 ffa5 	bl	8005760 <USB_ReadInterrupts>
 8002816:	4603      	mov	r3, r0
 8002818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002820:	d13b      	bne.n	800289a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002822:	2301      	movs	r3, #1
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	e02b      	b.n	8002880 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3340      	adds	r3, #64	; 0x40
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d115      	bne.n	800287a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800284e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002850:	2b00      	cmp	r3, #0
 8002852:	da12      	bge.n	800287a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	333f      	adds	r3, #63	; 0x3f
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fad0 	bl	8002e1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	3301      	adds	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	429a      	cmp	r2, r3
 8002888:	d3ce      	bcc.n	8002828 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 ff5e 	bl	8005760 <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ae:	d155      	bne.n	800295c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028b0:	2301      	movs	r3, #1
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
 80028b4:	e045      	b.n	8002942 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d12e      	bne.n	800293c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	da2b      	bge.n	800293c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028f0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d121      	bne.n	800293c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002938:	6053      	str	r3, [r2, #4]
            break;
 800293a:	e007      	b.n	800294c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	3301      	adds	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002948:	429a      	cmp	r2, r3
 800294a:	d3b4      	bcc.n	80028b6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800295a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fefd 	bl	8005760 <USB_ReadInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d10a      	bne.n	8002988 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f004 fffc 	bl	8007970 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fee7 	bl	8005760 <USB_ReadInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b04      	cmp	r3, #4
 800299a:	d115      	bne.n	80029c8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f004 ffec 	bl	800798c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	e000      	b.n	80029c8 <HAL_PCD_IRQHandler+0x938>
      return;
 80029c6:	bf00      	nop
    }
  }
}
 80029c8:	3734      	adds	r7, #52	; 0x34
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd90      	pop	{r4, r7, pc}

080029ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_PCD_SetAddress+0x1a>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e013      	b.n	8002a10 <HAL_PCD_SetAddress+0x42>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fe45 	bl	8005690 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	4608      	mov	r0, r1
 8002a22:	4611      	mov	r1, r2
 8002a24:	461a      	mov	r2, r3
 8002a26:	4603      	mov	r3, r0
 8002a28:	70fb      	strb	r3, [r7, #3]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	803b      	strh	r3, [r7, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	da0f      	bge.n	8002a5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	f003 020f 	and.w	r2, r3, #15
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	3338      	adds	r3, #56	; 0x38
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	3304      	adds	r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	705a      	strb	r2, [r3, #1]
 8002a5c:	e00f      	b.n	8002a7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 020f 	and.w	r2, r3, #15
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	3304      	adds	r3, #4
 8002a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a8a:	883a      	ldrh	r2, [r7, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	78ba      	ldrb	r2, [r7, #2]
 8002a94:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d004      	beq.n	8002aa8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002aa8:	78bb      	ldrb	r3, [r7, #2]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d102      	bne.n	8002ab4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_PCD_EP_Open+0xaa>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e00e      	b.n	8002ae0 <HAL_PCD_EP_Open+0xc8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68f9      	ldr	r1, [r7, #12]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 fec5 	bl	8004860 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ade:	7afb      	ldrb	r3, [r7, #11]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	da0f      	bge.n	8002b1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	f003 020f 	and.w	r2, r3, #15
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	3338      	adds	r3, #56	; 0x38
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	3304      	adds	r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	705a      	strb	r2, [r3, #1]
 8002b1a:	e00f      	b.n	8002b3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 020f 	and.w	r2, r3, #15
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	3304      	adds	r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_PCD_EP_Close+0x6e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e00e      	b.n	8002b74 <HAL_PCD_EP_Close+0x8c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68f9      	ldr	r1, [r7, #12]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 ff03 	bl	8004970 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bbe:	7afb      	ldrb	r3, [r7, #11]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	6979      	ldr	r1, [r7, #20]
 8002bf0:	f002 f9e2 	bl	8004fb8 <USB_EP0StartXfer>
 8002bf4:	e008      	b.n	8002c08 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	6979      	ldr	r1, [r7, #20]
 8002c04:	f001 ff90 	bl	8004b28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c22:	7afb      	ldrb	r3, [r7, #11]
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	3338      	adds	r3, #56	; 0x38
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c52:	7afb      	ldrb	r3, [r7, #11]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	6979      	ldr	r1, [r7, #20]
 8002c84:	f002 f998 	bl	8004fb8 <USB_EP0StartXfer>
 8002c88:	e008      	b.n	8002c9c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	6979      	ldr	r1, [r7, #20]
 8002c98:	f001 ff46 	bl	8004b28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d901      	bls.n	8002cc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e050      	b.n	8002d66 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	da0f      	bge.n	8002cec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	f003 020f 	and.w	r2, r3, #15
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	3338      	adds	r3, #56	; 0x38
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	705a      	strb	r2, [r3, #1]
 8002cea:	e00d      	b.n	8002d08 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3304      	adds	r3, #4
 8002d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_PCD_EP_SetStall+0x82>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e01e      	b.n	8002d66 <HAL_PCD_EP_SetStall+0xc0>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68f9      	ldr	r1, [r7, #12]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f002 fbd6 	bl	80054e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	b2d9      	uxtb	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d56:	461a      	mov	r2, r3
 8002d58:	f002 fdc6 	bl	80058e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	f003 020f 	and.w	r2, r3, #15
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d901      	bls.n	8002d8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e042      	b.n	8002e12 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	da0f      	bge.n	8002db4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	f003 020f 	and.w	r2, r3, #15
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	3338      	adds	r3, #56	; 0x38
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	705a      	strb	r2, [r3, #1]
 8002db2:	e00f      	b.n	8002dd4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	f003 020f 	and.w	r2, r3, #15
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	3304      	adds	r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_PCD_EP_ClrStall+0x86>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e00e      	b.n	8002e12 <HAL_PCD_EP_ClrStall+0xa4>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fbde 	bl	80055c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	da0c      	bge.n	8002e48 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	3338      	adds	r3, #56	; 0x38
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	3304      	adds	r3, #4
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	e00c      	b.n	8002e62 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	f003 020f 	and.w	r2, r3, #15
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3304      	adds	r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68f9      	ldr	r1, [r7, #12]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 f9fd 	bl	8005268 <USB_EPStopXfer>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e72:	7afb      	ldrb	r3, [r7, #11]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	3338      	adds	r3, #56	; 0x38
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1a      	ldr	r2, [r3, #32]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d901      	bls.n	8002eb4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e06c      	b.n	8002f8e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d902      	bls.n	8002ed0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	3303      	adds	r3, #3
 8002ed4:	089b      	lsrs	r3, r3, #2
 8002ed6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ed8:	e02b      	b.n	8002f32 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d902      	bls.n	8002ef6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3303      	adds	r3, #3
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6919      	ldr	r1, [r3, #16]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	4603      	mov	r3, r0
 8002f14:	6978      	ldr	r0, [r7, #20]
 8002f16:	f002 fa51 	bl	80053bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	441a      	add	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	441a      	add	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d809      	bhi.n	8002f5c <PCD_WriteEmptyTxFifo+0xe0>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d203      	bcs.n	8002f5c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1be      	bne.n	8002eda <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d811      	bhi.n	8002f8c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	2201      	movs	r2, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	6939      	ldr	r1, [r7, #16]
 8002f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f88:	4013      	ands	r3, r2
 8002f8a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3720      	adds	r7, #32
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	333c      	adds	r3, #60	; 0x3c
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d17b      	bne.n	80030c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	4a61      	ldr	r2, [pc, #388]	; (8003160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	f240 80b9 	bls.w	8003154 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80b3 	beq.w	8003154 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003000:	6093      	str	r3, [r2, #8]
 8003002:	e0a7      	b.n	8003154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	2320      	movs	r3, #32
 800301e:	6093      	str	r3, [r2, #8]
 8003020:	e098      	b.n	8003154 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	f040 8093 	bne.w	8003154 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	4a4b      	ldr	r2, [pc, #300]	; (8003160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d90f      	bls.n	8003056 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304c:	461a      	mov	r2, r3
 800304e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003052:	6093      	str	r3, [r2, #8]
 8003054:	e07e      	b.n	8003154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4413      	add	r3, r2
 8003068:	3304      	adds	r3, #4
 800306a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	0159      	lsls	r1, r3, #5
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	440b      	add	r3, r1
 8003078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003082:	1ad2      	subs	r2, r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d114      	bne.n	80030b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030a0:	461a      	mov	r2, r3
 80030a2:	2101      	movs	r1, #1
 80030a4:	f002 fc20 	bl	80058e8 <USB_EP0_OutStart>
 80030a8:	e006      	b.n	80030b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	441a      	add	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f004 fb92 	bl	80077e8 <HAL_PCD_DataOutStageCallback>
 80030c4:	e046      	b.n	8003154 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	4a26      	ldr	r2, [pc, #152]	; (8003164 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d124      	bne.n	8003118 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e4:	461a      	mov	r2, r3
 80030e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ea:	6093      	str	r3, [r2, #8]
 80030ec:	e032      	b.n	8003154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003104:	461a      	mov	r2, r3
 8003106:	2320      	movs	r3, #32
 8003108:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4619      	mov	r1, r3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f004 fb69 	bl	80077e8 <HAL_PCD_DataOutStageCallback>
 8003116:	e01d      	b.n	8003154 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d114      	bne.n	8003148 <PCD_EP_OutXfrComplete_int+0x1b0>
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d108      	bne.n	8003148 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003140:	461a      	mov	r2, r3
 8003142:	2100      	movs	r1, #0
 8003144:	f002 fbd0 	bl	80058e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	4619      	mov	r1, r3
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f004 fb4a 	bl	80077e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	4f54300a 	.word	0x4f54300a
 8003164:	4f54310a 	.word	0x4f54310a

08003168 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	333c      	adds	r3, #60	; 0x3c
 8003180:	3304      	adds	r3, #4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a15      	ldr	r2, [pc, #84]	; (80031f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d90e      	bls.n	80031bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b4:	461a      	mov	r2, r3
 80031b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f004 fb01 	bl	80077c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d90c      	bls.n	80031e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d108      	bne.n	80031e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031dc:	461a      	mov	r2, r3
 80031de:	2101      	movs	r1, #1
 80031e0:	f002 fb82 	bl	80058e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	4f54300a 	.word	0x4f54300a

080031f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
 8003200:	4613      	mov	r3, r2
 8003202:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003212:	883b      	ldrh	r3, [r7, #0]
 8003214:	0419      	lsls	r1, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	430a      	orrs	r2, r1
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
 8003220:	e028      	b.n	8003274 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4413      	add	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	e00d      	b.n	8003252 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	3340      	adds	r3, #64	; 0x40
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4413      	add	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	3301      	adds	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	3b01      	subs	r3, #1
 8003258:	429a      	cmp	r2, r3
 800325a:	d3ec      	bcc.n	8003236 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800325c:	883b      	ldrh	r3, [r7, #0]
 800325e:	0418      	lsls	r0, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6819      	ldr	r1, [r3, #0]
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	3b01      	subs	r3, #1
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	4302      	orrs	r2, r0
 800326c:	3340      	adds	r3, #64	; 0x40
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e267      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d075      	beq.n	80033c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032da:	4b88      	ldr	r3, [pc, #544]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d00c      	beq.n	8003300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e6:	4b85      	ldr	r3, [pc, #532]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d112      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f2:	4b82      	ldr	r3, [pc, #520]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b7e      	ldr	r3, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d157      	bne.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e242      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x74>
 8003322:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a75      	ldr	r2, [pc, #468]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x98>
 800333a:	4b70      	ldr	r3, [pc, #448]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6f      	ldr	r2, [pc, #444]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6c      	ldr	r2, [pc, #432]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003354:	4b69      	ldr	r3, [pc, #420]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a68      	ldr	r2, [pc, #416]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fa02 	bl	800177c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe f9fe 	bl	800177c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e207      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b5b      	ldr	r3, [pc, #364]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xc0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe f9ee 	bl	800177c <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe f9ea 	bl	800177c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e1f3      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	4b51      	ldr	r3, [pc, #324]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d063      	beq.n	800349a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d11c      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ea:	4b44      	ldr	r3, [pc, #272]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d116      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e1c7      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4937      	ldr	r1, [pc, #220]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	e03a      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d020      	beq.n	800346e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800342c:	4b34      	ldr	r3, [pc, #208]	; (8003500 <HAL_RCC_OscConfig+0x244>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fe f9a3 	bl	800177c <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7fe f99f 	bl	800177c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e1a8      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4925      	ldr	r1, [pc, #148]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
 800346c:	e015      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_RCC_OscConfig+0x244>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe f982 	bl	800177c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347c:	f7fe f97e 	bl	800177c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e187      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d036      	beq.n	8003514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_RCC_OscConfig+0x248>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe f962 	bl	800177c <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fe f95e 	bl	800177c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e167      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x200>
 80034da:	e01b      	b.n	8003514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_OscConfig+0x248>)
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7fe f94b 	bl	800177c <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	e00e      	b.n	8003508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ea:	f7fe f947 	bl	800177c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d907      	bls.n	8003508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e150      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
 80034fc:	40023800 	.word	0x40023800
 8003500:	42470000 	.word	0x42470000
 8003504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	4b88      	ldr	r3, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ea      	bne.n	80034ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8097 	beq.w	8003650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003526:	4b81      	ldr	r3, [pc, #516]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	4b7d      	ldr	r3, [pc, #500]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a7c      	ldr	r2, [pc, #496]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b7a      	ldr	r3, [pc, #488]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b77      	ldr	r3, [pc, #476]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d118      	bne.n	8003590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355e:	4b74      	ldr	r3, [pc, #464]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a73      	ldr	r2, [pc, #460]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356a:	f7fe f907 	bl	800177c <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003572:	f7fe f903 	bl	800177c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e10c      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x2ea>
 8003598:	4b64      	ldr	r3, [pc, #400]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a63      	ldr	r2, [pc, #396]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0x324>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x30c>
 80035ae:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	4a5e      	ldr	r2, [pc, #376]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a5b      	ldr	r2, [pc, #364]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0x324>
 80035c8:	4b58      	ldr	r3, [pc, #352]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4a57      	ldr	r2, [pc, #348]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70
 80035d4:	4b55      	ldr	r3, [pc, #340]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a54      	ldr	r2, [pc, #336]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035da:	f023 0304 	bic.w	r3, r3, #4
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d015      	beq.n	8003614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe f8c8 	bl	800177c <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f0:	f7fe f8c4 	bl	800177c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e0cb      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003606:	4b49      	ldr	r3, [pc, #292]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ee      	beq.n	80035f0 <HAL_RCC_OscConfig+0x334>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003614:	f7fe f8b2 	bl	800177c <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361a:	e00a      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fe f8ae 	bl	800177c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0b5      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ee      	bne.n	800361c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003644:	4b39      	ldr	r3, [pc, #228]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a38      	ldr	r2, [pc, #224]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a1 	beq.w	800379c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365a:	4b34      	ldr	r3, [pc, #208]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b08      	cmp	r3, #8
 8003664:	d05c      	beq.n	8003720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d141      	bne.n	80036f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe f882 	bl	800177c <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367c:	f7fe f87e 	bl	800177c <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e087      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	3b01      	subs	r3, #1
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	491b      	ldr	r1, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe f857 	bl	800177c <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe f853 	bl	800177c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e05c      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x416>
 80036f0:	e054      	b.n	800379c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fe f840 	bl	800177c <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe f83c 	bl	800177c <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e045      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x444>
 800371e:	e03d      	b.n	800379c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e038      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	40007000 	.word	0x40007000
 8003734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4ec>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d028      	beq.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d121      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d11a      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800376e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003770:	4293      	cmp	r3, r2
 8003772:	d111      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	3b01      	subs	r3, #1
 8003782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800

080037ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cc      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b68      	ldr	r3, [pc, #416]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d90c      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b65      	ldr	r3, [pc, #404]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b63      	ldr	r3, [pc, #396]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0b8      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003800:	4b59      	ldr	r3, [pc, #356]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a58      	ldr	r2, [pc, #352]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800380a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003818:	4b53      	ldr	r3, [pc, #332]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a52      	ldr	r2, [pc, #328]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b50      	ldr	r3, [pc, #320]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	494d      	ldr	r1, [pc, #308]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d044      	beq.n	80038cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d119      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e07f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d003      	beq.n	800386a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003866:	2b03      	cmp	r3, #3
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e06f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e067      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388a:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4934      	ldr	r1, [pc, #208]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800389c:	f7fd ff6e 	bl	800177c <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7fd ff6a 	bl	800177c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e04f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 020c 	and.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1eb      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d20c      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e032      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4916      	ldr	r1, [pc, #88]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	490e      	ldr	r1, [pc, #56]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003932:	f000 f821 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8003936:	4602      	mov	r2, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	490a      	ldr	r1, [pc, #40]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	4a09      	ldr	r2, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd fece 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023c00 	.word	0x40023c00
 8003968:	40023800 	.word	0x40023800
 800396c:	08008f08 	.word	0x08008f08
 8003970:	20000000 	.word	0x20000000
 8003974:	20000004 	.word	0x20000004

08003978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b094      	sub	sp, #80	; 0x50
 800397e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	647b      	str	r3, [r7, #68]	; 0x44
 8003984:	2300      	movs	r3, #0
 8003986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003988:	2300      	movs	r3, #0
 800398a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003990:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d00d      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x40>
 800399c:	2b08      	cmp	r3, #8
 800399e:	f200 80e1 	bhi.w	8003b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x34>
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039aa:	e0db      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ac:	4b73      	ldr	r3, [pc, #460]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039b0:	e0db      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b2:	4b73      	ldr	r3, [pc, #460]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80039b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039b6:	e0d8      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b8:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c2:	4b6d      	ldr	r3, [pc, #436]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d063      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	2200      	movs	r2, #0
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e0:	633b      	str	r3, [r7, #48]	; 0x30
 80039e2:	2300      	movs	r3, #0
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
 80039e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039ea:	4622      	mov	r2, r4
 80039ec:	462b      	mov	r3, r5
 80039ee:	f04f 0000 	mov.w	r0, #0
 80039f2:	f04f 0100 	mov.w	r1, #0
 80039f6:	0159      	lsls	r1, r3, #5
 80039f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039fc:	0150      	lsls	r0, r2, #5
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4621      	mov	r1, r4
 8003a04:	1a51      	subs	r1, r2, r1
 8003a06:	6139      	str	r1, [r7, #16]
 8003a08:	4629      	mov	r1, r5
 8003a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	018b      	lsls	r3, r1, #6
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a26:	4651      	mov	r1, sl
 8003a28:	018a      	lsls	r2, r1, #6
 8003a2a:	4651      	mov	r1, sl
 8003a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a30:	4659      	mov	r1, fp
 8003a32:	eb63 0901 	sbc.w	r9, r3, r1
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a4a:	4690      	mov	r8, r2
 8003a4c:	4699      	mov	r9, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	eb18 0303 	adds.w	r3, r8, r3
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	462b      	mov	r3, r5
 8003a58:	eb49 0303 	adc.w	r3, r9, r3
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	024b      	lsls	r3, r1, #9
 8003a6e:	4621      	mov	r1, r4
 8003a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a74:	4621      	mov	r1, r4
 8003a76:	024a      	lsls	r2, r1, #9
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7e:	2200      	movs	r2, #0
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a88:	f7fc ff98 	bl	80009bc <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a94:	e058      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aa6:	623b      	str	r3, [r7, #32]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	f04f 0000 	mov.w	r0, #0
 8003ab8:	f04f 0100 	mov.w	r1, #0
 8003abc:	0159      	lsls	r1, r3, #5
 8003abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac2:	0150      	lsls	r0, r2, #5
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4641      	mov	r1, r8
 8003aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ace:	4649      	mov	r1, r9
 8003ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8003aec:	eb63 050b 	sbc.w	r5, r3, fp
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	00eb      	lsls	r3, r5, #3
 8003afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003afe:	00e2      	lsls	r2, r4, #3
 8003b00:	4614      	mov	r4, r2
 8003b02:	461d      	mov	r5, r3
 8003b04:	4643      	mov	r3, r8
 8003b06:	18e3      	adds	r3, r4, r3
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	eb45 0303 	adc.w	r3, r5, r3
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b1e:	4629      	mov	r1, r5
 8003b20:	028b      	lsls	r3, r1, #10
 8003b22:	4621      	mov	r1, r4
 8003b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b28:	4621      	mov	r1, r4
 8003b2a:	028a      	lsls	r2, r1, #10
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b32:	2200      	movs	r2, #0
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	61fa      	str	r2, [r7, #28]
 8003b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b3c:	f7fc ff3e 	bl	80009bc <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4613      	mov	r3, r2
 8003b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	0c1b      	lsrs	r3, r3, #16
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	3301      	adds	r3, #1
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b62:	e002      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3750      	adds	r7, #80	; 0x50
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	00f42400 	.word	0x00f42400
 8003b80:	007a1200 	.word	0x007a1200

08003b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000000 	.word	0x20000000

08003b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ba0:	f7ff fff0 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	0a9b      	lsrs	r3, r3, #10
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4903      	ldr	r1, [pc, #12]	; (8003bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	08008f18 	.word	0x08008f18

08003bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bc8:	f7ff ffdc 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0b5b      	lsrs	r3, r3, #13
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	; (8003be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	08008f18 	.word	0x08008f18

08003bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e03f      	b.n	8003c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fc8c 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f829 	bl	8003c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8c:	b0c0      	sub	sp, #256	; 0x100
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	68d9      	ldr	r1, [r3, #12]
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	ea40 0301 	orr.w	r3, r0, r1
 8003cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ce0:	f021 010c 	bic.w	r1, r1, #12
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d02:	6999      	ldr	r1, [r3, #24]
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	ea40 0301 	orr.w	r3, r0, r1
 8003d0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4b8f      	ldr	r3, [pc, #572]	; (8003f54 <UART_SetConfig+0x2cc>)
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d005      	beq.n	8003d28 <UART_SetConfig+0xa0>
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b8d      	ldr	r3, [pc, #564]	; (8003f58 <UART_SetConfig+0x2d0>)
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d104      	bne.n	8003d32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7ff ff4c 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 8003d2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d30:	e003      	b.n	8003d3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d32:	f7ff ff33 	bl	8003b9c <HAL_RCC_GetPCLK1Freq>
 8003d36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d44:	f040 810c 	bne.w	8003f60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	1891      	adds	r1, r2, r2
 8003d60:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d62:	415b      	adcs	r3, r3
 8003d64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	eb12 0801 	adds.w	r8, r2, r1
 8003d70:	4629      	mov	r1, r5
 8003d72:	eb43 0901 	adc.w	r9, r3, r1
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d8a:	4690      	mov	r8, r2
 8003d8c:	4699      	mov	r9, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	eb18 0303 	adds.w	r3, r8, r3
 8003d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d98:	462b      	mov	r3, r5
 8003d9a:	eb49 0303 	adc.w	r3, r9, r3
 8003d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003db6:	460b      	mov	r3, r1
 8003db8:	18db      	adds	r3, r3, r3
 8003dba:	653b      	str	r3, [r7, #80]	; 0x50
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	eb42 0303 	adc.w	r3, r2, r3
 8003dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003dcc:	f7fc fdf6 	bl	80009bc <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	011c      	lsls	r4, r3, #4
 8003dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003de8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e00:	4641      	mov	r1, r8
 8003e02:	eb12 0a01 	adds.w	sl, r2, r1
 8003e06:	4649      	mov	r1, r9
 8003e08:	eb43 0b01 	adc.w	fp, r3, r1
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e20:	4692      	mov	sl, r2
 8003e22:	469b      	mov	fp, r3
 8003e24:	4643      	mov	r3, r8
 8003e26:	eb1a 0303 	adds.w	r3, sl, r3
 8003e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	eb4b 0303 	adc.w	r3, fp, r3
 8003e34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	18db      	adds	r3, r3, r3
 8003e50:	643b      	str	r3, [r7, #64]	; 0x40
 8003e52:	4613      	mov	r3, r2
 8003e54:	eb42 0303 	adc.w	r3, r2, r3
 8003e58:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e62:	f7fc fdab 	bl	80009bc <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	2264      	movs	r2, #100	; 0x64
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	1acb      	subs	r3, r1, r3
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e82:	4b36      	ldr	r3, [pc, #216]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003e84:	fba3 2302 	umull	r2, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e90:	441c      	add	r4, r3
 8003e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003eac:	415b      	adcs	r3, r3
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	1851      	adds	r1, r2, r1
 8003eb8:	6339      	str	r1, [r7, #48]	; 0x30
 8003eba:	4649      	mov	r1, r9
 8003ebc:	414b      	adcs	r3, r1
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ecc:	4659      	mov	r1, fp
 8003ece:	00cb      	lsls	r3, r1, #3
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	00ca      	lsls	r2, r1, #3
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ee8:	464b      	mov	r3, r9
 8003eea:	460a      	mov	r2, r1
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f08:	460b      	mov	r3, r1
 8003f0a:	18db      	adds	r3, r3, r3
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0e:	4613      	mov	r3, r2
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f1e:	f7fc fd4d 	bl	80009bc <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003f28:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	2164      	movs	r1, #100	; 0x64
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	3332      	adds	r3, #50	; 0x32
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	f003 0207 	and.w	r2, r3, #7
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4422      	add	r2, r4
 8003f4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f50:	e106      	b.n	8004160 <UART_SetConfig+0x4d8>
 8003f52:	bf00      	nop
 8003f54:	40011000 	.word	0x40011000
 8003f58:	40011400 	.word	0x40011400
 8003f5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f72:	4642      	mov	r2, r8
 8003f74:	464b      	mov	r3, r9
 8003f76:	1891      	adds	r1, r2, r2
 8003f78:	6239      	str	r1, [r7, #32]
 8003f7a:	415b      	adcs	r3, r3
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f82:	4641      	mov	r1, r8
 8003f84:	1854      	adds	r4, r2, r1
 8003f86:	4649      	mov	r1, r9
 8003f88:	eb43 0501 	adc.w	r5, r3, r1
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	00eb      	lsls	r3, r5, #3
 8003f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f9a:	00e2      	lsls	r2, r4, #3
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	461d      	mov	r5, r3
 8003fa0:	4643      	mov	r3, r8
 8003fa2:	18e3      	adds	r3, r4, r3
 8003fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fa8:	464b      	mov	r3, r9
 8003faa:	eb45 0303 	adc.w	r3, r5, r3
 8003fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fce:	4629      	mov	r1, r5
 8003fd0:	008b      	lsls	r3, r1, #2
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd8:	4621      	mov	r1, r4
 8003fda:	008a      	lsls	r2, r1, #2
 8003fdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fe0:	f7fc fcec 	bl	80009bc <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b60      	ldr	r3, [pc, #384]	; (800416c <UART_SetConfig+0x4e4>)
 8003fea:	fba3 2302 	umull	r2, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	011c      	lsls	r4, r3, #4
 8003ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ffc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	1891      	adds	r1, r2, r2
 800400a:	61b9      	str	r1, [r7, #24]
 800400c:	415b      	adcs	r3, r3
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004014:	4641      	mov	r1, r8
 8004016:	1851      	adds	r1, r2, r1
 8004018:	6139      	str	r1, [r7, #16]
 800401a:	4649      	mov	r1, r9
 800401c:	414b      	adcs	r3, r1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800402c:	4659      	mov	r1, fp
 800402e:	00cb      	lsls	r3, r1, #3
 8004030:	4651      	mov	r1, sl
 8004032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004036:	4651      	mov	r1, sl
 8004038:	00ca      	lsls	r2, r1, #3
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	4603      	mov	r3, r0
 8004040:	4642      	mov	r2, r8
 8004042:	189b      	adds	r3, r3, r2
 8004044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004048:	464b      	mov	r3, r9
 800404a:	460a      	mov	r2, r1
 800404c:	eb42 0303 	adc.w	r3, r2, r3
 8004050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	67bb      	str	r3, [r7, #120]	; 0x78
 800405e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800406c:	4649      	mov	r1, r9
 800406e:	008b      	lsls	r3, r1, #2
 8004070:	4641      	mov	r1, r8
 8004072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004076:	4641      	mov	r1, r8
 8004078:	008a      	lsls	r2, r1, #2
 800407a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800407e:	f7fc fc9d 	bl	80009bc <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4611      	mov	r1, r2
 8004088:	4b38      	ldr	r3, [pc, #224]	; (800416c <UART_SetConfig+0x4e4>)
 800408a:	fba3 2301 	umull	r2, r3, r3, r1
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2264      	movs	r2, #100	; 0x64
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	1acb      	subs	r3, r1, r3
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	3332      	adds	r3, #50	; 0x32
 800409c:	4a33      	ldr	r2, [pc, #204]	; (800416c <UART_SetConfig+0x4e4>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040a8:	441c      	add	r4, r3
 80040aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ae:	2200      	movs	r2, #0
 80040b0:	673b      	str	r3, [r7, #112]	; 0x70
 80040b2:	677a      	str	r2, [r7, #116]	; 0x74
 80040b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	415b      	adcs	r3, r3
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c8:	4641      	mov	r1, r8
 80040ca:	1851      	adds	r1, r2, r1
 80040cc:	6039      	str	r1, [r7, #0]
 80040ce:	4649      	mov	r1, r9
 80040d0:	414b      	adcs	r3, r1
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040e0:	4659      	mov	r1, fp
 80040e2:	00cb      	lsls	r3, r1, #3
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ea:	4651      	mov	r1, sl
 80040ec:	00ca      	lsls	r2, r1, #3
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	4642      	mov	r2, r8
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040fa:	464b      	mov	r3, r9
 80040fc:	460a      	mov	r2, r1
 80040fe:	eb42 0303 	adc.w	r3, r2, r3
 8004102:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	663b      	str	r3, [r7, #96]	; 0x60
 800410e:	667a      	str	r2, [r7, #100]	; 0x64
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800411c:	4649      	mov	r1, r9
 800411e:	008b      	lsls	r3, r1, #2
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004126:	4641      	mov	r1, r8
 8004128:	008a      	lsls	r2, r1, #2
 800412a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800412e:	f7fc fc45 	bl	80009bc <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <UART_SetConfig+0x4e4>)
 8004138:	fba3 1302 	umull	r1, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2164      	movs	r1, #100	; 0x64
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	3332      	adds	r3, #50	; 0x32
 800414a:	4a08      	ldr	r2, [pc, #32]	; (800416c <UART_SetConfig+0x4e4>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f003 020f 	and.w	r2, r3, #15
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4422      	add	r2, r4
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004166:	46bd      	mov	sp, r7
 8004168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416c:	51eb851f 	.word	0x51eb851f

08004170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004170:	b084      	sub	sp, #16
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	f107 001c 	add.w	r0, r7, #28
 800417e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	2b01      	cmp	r3, #1
 8004186:	d122      	bne.n	80041ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800419c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d105      	bne.n	80041c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f001 fbee 	bl	80059a4 <USB_CoreReset>
 80041c8:	4603      	mov	r3, r0
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	e01a      	b.n	8004204 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f001 fbe2 	bl	80059a4 <USB_CoreReset>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
 80041f6:	e005      	b.n	8004204 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	2b01      	cmp	r3, #1
 8004208:	d10b      	bne.n	8004222 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f043 0206 	orr.w	r2, r3, #6
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004222:	7bfb      	ldrb	r3, [r7, #15]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800422e:	b004      	add	sp, #16
 8004230:	4770      	bx	lr
	...

08004234 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d165      	bne.n	8004314 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4a41      	ldr	r2, [pc, #260]	; (8004350 <USB_SetTurnaroundTime+0x11c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d906      	bls.n	800425e <USB_SetTurnaroundTime+0x2a>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4a40      	ldr	r2, [pc, #256]	; (8004354 <USB_SetTurnaroundTime+0x120>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d202      	bcs.n	800425e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004258:	230f      	movs	r3, #15
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	e062      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4a3c      	ldr	r2, [pc, #240]	; (8004354 <USB_SetTurnaroundTime+0x120>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d306      	bcc.n	8004274 <USB_SetTurnaroundTime+0x40>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4a3b      	ldr	r2, [pc, #236]	; (8004358 <USB_SetTurnaroundTime+0x124>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d202      	bcs.n	8004274 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800426e:	230e      	movs	r3, #14
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	e057      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a38      	ldr	r2, [pc, #224]	; (8004358 <USB_SetTurnaroundTime+0x124>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d306      	bcc.n	800428a <USB_SetTurnaroundTime+0x56>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4a37      	ldr	r2, [pc, #220]	; (800435c <USB_SetTurnaroundTime+0x128>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d202      	bcs.n	800428a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004284:	230d      	movs	r3, #13
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e04c      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a33      	ldr	r2, [pc, #204]	; (800435c <USB_SetTurnaroundTime+0x128>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d306      	bcc.n	80042a0 <USB_SetTurnaroundTime+0x6c>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4a32      	ldr	r2, [pc, #200]	; (8004360 <USB_SetTurnaroundTime+0x12c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d802      	bhi.n	80042a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800429a:	230c      	movs	r3, #12
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e041      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a2f      	ldr	r2, [pc, #188]	; (8004360 <USB_SetTurnaroundTime+0x12c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d906      	bls.n	80042b6 <USB_SetTurnaroundTime+0x82>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4a2e      	ldr	r2, [pc, #184]	; (8004364 <USB_SetTurnaroundTime+0x130>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d802      	bhi.n	80042b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042b0:	230b      	movs	r3, #11
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e036      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a2a      	ldr	r2, [pc, #168]	; (8004364 <USB_SetTurnaroundTime+0x130>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d906      	bls.n	80042cc <USB_SetTurnaroundTime+0x98>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4a29      	ldr	r2, [pc, #164]	; (8004368 <USB_SetTurnaroundTime+0x134>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d802      	bhi.n	80042cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042c6:	230a      	movs	r3, #10
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e02b      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a26      	ldr	r2, [pc, #152]	; (8004368 <USB_SetTurnaroundTime+0x134>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d906      	bls.n	80042e2 <USB_SetTurnaroundTime+0xae>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a25      	ldr	r2, [pc, #148]	; (800436c <USB_SetTurnaroundTime+0x138>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d202      	bcs.n	80042e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80042dc:	2309      	movs	r3, #9
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e020      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a21      	ldr	r2, [pc, #132]	; (800436c <USB_SetTurnaroundTime+0x138>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d306      	bcc.n	80042f8 <USB_SetTurnaroundTime+0xc4>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4a20      	ldr	r2, [pc, #128]	; (8004370 <USB_SetTurnaroundTime+0x13c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d802      	bhi.n	80042f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80042f2:	2308      	movs	r3, #8
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e015      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a1d      	ldr	r2, [pc, #116]	; (8004370 <USB_SetTurnaroundTime+0x13c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d906      	bls.n	800430e <USB_SetTurnaroundTime+0xda>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <USB_SetTurnaroundTime+0x140>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d202      	bcs.n	800430e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004308:	2307      	movs	r3, #7
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e00a      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800430e:	2306      	movs	r3, #6
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e007      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d102      	bne.n	8004320 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800431a:	2309      	movs	r3, #9
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	e001      	b.n	8004324 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004320:	2309      	movs	r3, #9
 8004322:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	029b      	lsls	r3, r3, #10
 8004338:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	00d8acbf 	.word	0x00d8acbf
 8004354:	00e4e1c0 	.word	0x00e4e1c0
 8004358:	00f42400 	.word	0x00f42400
 800435c:	01067380 	.word	0x01067380
 8004360:	011a499f 	.word	0x011a499f
 8004364:	01312cff 	.word	0x01312cff
 8004368:	014ca43f 	.word	0x014ca43f
 800436c:	016e3600 	.word	0x016e3600
 8004370:	01a6ab1f 	.word	0x01a6ab1f
 8004374:	01e84800 	.word	0x01e84800

08004378 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f043 0201 	orr.w	r2, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f023 0201 	bic.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d115      	bne.n	800440a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043ea:	2001      	movs	r0, #1
 80043ec:	f7fd f9d2 	bl	8001794 <HAL_Delay>
      ms++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3301      	adds	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f001 fa45 	bl	8005886 <USB_GetMode>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d01e      	beq.n	8004440 <USB_SetCurrentMode+0x84>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b31      	cmp	r3, #49	; 0x31
 8004406:	d9f0      	bls.n	80043ea <USB_SetCurrentMode+0x2e>
 8004408:	e01a      	b.n	8004440 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d115      	bne.n	800443c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800441c:	2001      	movs	r0, #1
 800441e:	f7fd f9b9 	bl	8001794 <HAL_Delay>
      ms++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3301      	adds	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f001 fa2c 	bl	8005886 <USB_GetMode>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <USB_SetCurrentMode+0x84>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b31      	cmp	r3, #49	; 0x31
 8004438:	d9f0      	bls.n	800441c <USB_SetCurrentMode+0x60>
 800443a:	e001      	b.n	8004440 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e005      	b.n	800444c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b32      	cmp	r3, #50	; 0x32
 8004444:	d101      	bne.n	800444a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004454:	b084      	sub	sp, #16
 8004456:	b580      	push	{r7, lr}
 8004458:	b086      	sub	sp, #24
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	e009      	b.n	8004488 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	3340      	adds	r3, #64	; 0x40
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	2200      	movs	r2, #0
 8004480:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	3301      	adds	r3, #1
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b0e      	cmp	r3, #14
 800448c:	d9f2      	bls.n	8004474 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800448e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d11c      	bne.n	80044ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a2:	f043 0302 	orr.w	r3, r3, #2
 80044a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38
 80044cc:	e00b      	b.n	80044e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044ec:	461a      	mov	r2, r3
 80044ee:	2300      	movs	r3, #0
 80044f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f8:	4619      	mov	r1, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004500:	461a      	mov	r2, r3
 8004502:	680b      	ldr	r3, [r1, #0]
 8004504:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	2b01      	cmp	r3, #1
 800450a:	d10c      	bne.n	8004526 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d104      	bne.n	800451c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004512:	2100      	movs	r1, #0
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f965 	bl	80047e4 <USB_SetDevSpeed>
 800451a:	e008      	b.n	800452e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800451c:	2101      	movs	r1, #1
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f960 	bl	80047e4 <USB_SetDevSpeed>
 8004524:	e003      	b.n	800452e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004526:	2103      	movs	r1, #3
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f95b 	bl	80047e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800452e:	2110      	movs	r1, #16
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8f3 	bl	800471c <USB_FlushTxFifo>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f91f 	bl	8004784 <USB_FlushRxFifo>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004556:	461a      	mov	r2, r3
 8004558:	2300      	movs	r3, #0
 800455a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	461a      	mov	r2, r3
 8004564:	2300      	movs	r3, #0
 8004566:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	461a      	mov	r2, r3
 8004570:	2300      	movs	r3, #0
 8004572:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	e043      	b.n	8004602 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800458c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004590:	d118      	bne.n	80045c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	461a      	mov	r2, r3
 80045a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	e013      	b.n	80045d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ba:	461a      	mov	r2, r3
 80045bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e008      	b.n	80045d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	461a      	mov	r2, r3
 80045d2:	2300      	movs	r3, #0
 80045d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e2:	461a      	mov	r2, r3
 80045e4:	2300      	movs	r3, #0
 80045e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f4:	461a      	mov	r2, r3
 80045f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	3301      	adds	r3, #1
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	429a      	cmp	r2, r3
 8004608:	d3b7      	bcc.n	800457a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e043      	b.n	8004698 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004626:	d118      	bne.n	800465a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463a:	461a      	mov	r2, r3
 800463c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e013      	b.n	800466c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	461a      	mov	r2, r3
 8004652:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	e008      	b.n	800466c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004666:	461a      	mov	r2, r3
 8004668:	2300      	movs	r3, #0
 800466a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004678:	461a      	mov	r2, r3
 800467a:	2300      	movs	r3, #0
 800467c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	461a      	mov	r2, r3
 800468c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004690:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	3301      	adds	r3, #1
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	429a      	cmp	r2, r3
 800469e:	d3b7      	bcc.n	8004610 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f043 0210 	orr.w	r2, r3, #16
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <USB_DevInit+0x2c4>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f043 0208 	orr.w	r2, r3, #8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d107      	bne.n	8004708 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004700:	f043 0304 	orr.w	r3, r3, #4
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004708:	7dfb      	ldrb	r3, [r7, #23]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004714:	b004      	add	sp, #16
 8004716:	4770      	bx	lr
 8004718:	803c3800 	.word	0x803c3800

0800471c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3301      	adds	r3, #1
 800472e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a13      	ldr	r2, [pc, #76]	; (8004780 <USB_FlushTxFifo+0x64>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d901      	bls.n	800473c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e01b      	b.n	8004774 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	daf2      	bge.n	800472a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	019b      	lsls	r3, r3, #6
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a08      	ldr	r2, [pc, #32]	; (8004780 <USB_FlushTxFifo+0x64>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e006      	b.n	8004774 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b20      	cmp	r3, #32
 8004770:	d0f0      	beq.n	8004754 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	00030d40 	.word	0x00030d40

08004784 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <USB_FlushRxFifo+0x5c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e018      	b.n	80047d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	daf2      	bge.n	8004790 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2210      	movs	r2, #16
 80047b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <USB_FlushRxFifo+0x5c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e006      	b.n	80047d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d0f0      	beq.n	80047b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	00030d40 	.word	0x00030d40

080047e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	68f9      	ldr	r1, [r7, #12]
 8004800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004816:	b480      	push	{r7}
 8004818:	b087      	sub	sp, #28
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 0306 	and.w	r3, r3, #6
 800482e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004836:	2300      	movs	r3, #0
 8004838:	75fb      	strb	r3, [r7, #23]
 800483a:	e00a      	b.n	8004852 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d002      	beq.n	8004848 <USB_GetDevSpeed+0x32>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b06      	cmp	r3, #6
 8004846:	d102      	bne.n	800484e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004848:	2302      	movs	r3, #2
 800484a:	75fb      	strb	r3, [r7, #23]
 800484c:	e001      	b.n	8004852 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800484e:	230f      	movs	r3, #15
 8004850:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004852:	7dfb      	ldrb	r3, [r7, #23]
}
 8004854:	4618      	mov	r0, r3
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d13a      	bne.n	80048f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	2101      	movs	r1, #1
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	b29b      	uxth	r3, r3
 8004894:	68f9      	ldr	r1, [r7, #12]
 8004896:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800489a:	4313      	orrs	r3, r2
 800489c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d155      	bne.n	8004960 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	791b      	ldrb	r3, [r3, #4]
 80048ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	059b      	lsls	r3, r3, #22
 80048d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048d8:	4313      	orrs	r3, r2
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	0151      	lsls	r1, r2, #5
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	440a      	add	r2, r1
 80048e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	e036      	b.n	8004960 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	2101      	movs	r1, #1
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	041b      	lsls	r3, r3, #16
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004910:	4313      	orrs	r3, r2
 8004912:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d11a      	bne.n	8004960 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	791b      	ldrb	r3, [r3, #4]
 8004944:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004946:	430b      	orrs	r3, r1
 8004948:	4313      	orrs	r3, r2
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d161      	bne.n	8004a50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800499e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049a2:	d11f      	bne.n	80049e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	0151      	lsls	r1, r2, #5
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	440a      	add	r2, r1
 80049ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	68f9      	ldr	r1, [r7, #12]
 8004a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a04:	4013      	ands	r3, r2
 8004a06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	2101      	movs	r1, #1
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	0159      	lsls	r1, r3, #5
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	440b      	add	r3, r1
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	4619      	mov	r1, r3
 8004a48:	4b35      	ldr	r3, [pc, #212]	; (8004b20 <USB_DeactivateEndpoint+0x1b0>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]
 8004a4e:	e060      	b.n	8004b12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a66:	d11f      	bne.n	8004aa8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	2101      	movs	r1, #1
 8004aba:	fa01 f303 	lsl.w	r3, r1, r3
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac8:	4013      	ands	r3, r2
 8004aca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	2101      	movs	r1, #1
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aec:	4013      	ands	r3, r2
 8004aee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	0159      	lsls	r1, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	440b      	add	r3, r1
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <USB_DeactivateEndpoint+0x1b4>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	ec337800 	.word	0xec337800
 8004b24:	eff37800 	.word	0xeff37800

08004b28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	f040 815c 	bne.w	8004e02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d132      	bne.n	8004bb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	0cdb      	lsrs	r3, r3, #19
 8004bb2:	04db      	lsls	r3, r3, #19
 8004bb4:	6113      	str	r3, [r2, #16]
 8004bb6:	e074      	b.n	8004ca2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd2:	0cdb      	lsrs	r3, r3, #19
 8004bd4:	04db      	lsls	r3, r3, #19
 8004bd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	0151      	lsls	r1, r2, #5
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	440a      	add	r2, r1
 8004bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6999      	ldr	r1, [r3, #24]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	440b      	add	r3, r1
 8004c14:	1e59      	subs	r1, r3, #1
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c1e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c20:	4b9d      	ldr	r3, [pc, #628]	; (8004e98 <USB_EPStartXfer+0x370>)
 8004c22:	400b      	ands	r3, r1
 8004c24:	69b9      	ldr	r1, [r7, #24]
 8004c26:	0148      	lsls	r0, r1, #5
 8004c28:	69f9      	ldr	r1, [r7, #28]
 8004c2a:	4401      	add	r1, r0
 8004c2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c30:	4313      	orrs	r3, r2
 8004c32:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4a:	69b9      	ldr	r1, [r7, #24]
 8004c4c:	0148      	lsls	r0, r1, #5
 8004c4e:	69f9      	ldr	r1, [r7, #28]
 8004c50:	4401      	add	r1, r0
 8004c52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c56:	4313      	orrs	r3, r2
 8004c58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	791b      	ldrb	r3, [r3, #4]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d11f      	bne.n	8004ca2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ca0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d14b      	bne.n	8004d40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	791b      	ldrb	r3, [r3, #4]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d128      	bne.n	8004d1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d110      	bne.n	8004cfe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e00f      	b.n	8004d1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	0151      	lsls	r1, r2, #5
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	440a      	add	r2, r1
 8004d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e133      	b.n	8004fa8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	791b      	ldrb	r3, [r3, #4]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d015      	beq.n	8004d94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 811b 	beq.w	8004fa8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	2101      	movs	r1, #1
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	634b      	str	r3, [r1, #52]	; 0x34
 8004d92:	e109      	b.n	8004fa8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d110      	bne.n	8004dc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	e00f      	b.n	8004de6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	0151      	lsls	r1, r2, #5
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	440a      	add	r2, r1
 8004ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6919      	ldr	r1, [r3, #16]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	b298      	uxth	r0, r3
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4603      	mov	r3, r0
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fade 	bl	80053bc <USB_WritePacket>
 8004e00:	e0d2      	b.n	8004fa8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1c:	0cdb      	lsrs	r3, r3, #19
 8004e1e:	04db      	lsls	r3, r3, #19
 8004e20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d126      	bne.n	8004e9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e64:	69b9      	ldr	r1, [r7, #24]
 8004e66:	0148      	lsls	r0, r1, #5
 8004e68:	69f9      	ldr	r1, [r7, #28]
 8004e6a:	4401      	add	r1, r0
 8004e6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e70:	4313      	orrs	r3, r2
 8004e72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e92:	6113      	str	r3, [r2, #16]
 8004e94:	e03a      	b.n	8004f0c <USB_EPStartXfer+0x3e4>
 8004e96:	bf00      	nop
 8004e98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	1e5a      	subs	r2, r3, #1
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	8afa      	ldrh	r2, [r7, #22]
 8004eb8:	fb03 f202 	mul.w	r2, r3, r2
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	8afb      	ldrh	r3, [r7, #22]
 8004ed0:	04d9      	lsls	r1, r3, #19
 8004ed2:	4b38      	ldr	r3, [pc, #224]	; (8004fb4 <USB_EPStartXfer+0x48c>)
 8004ed4:	400b      	ands	r3, r1
 8004ed6:	69b9      	ldr	r1, [r7, #24]
 8004ed8:	0148      	lsls	r0, r1, #5
 8004eda:	69f9      	ldr	r1, [r7, #28]
 8004edc:	4401      	add	r1, r0
 8004ede:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004efc:	69b9      	ldr	r1, [r7, #24]
 8004efe:	0148      	lsls	r0, r1, #5
 8004f00:	69f9      	ldr	r1, [r7, #28]
 8004f02:	4401      	add	r1, r0
 8004f04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10d      	bne.n	8004f2e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	6919      	ldr	r1, [r3, #16]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2a:	460a      	mov	r2, r1
 8004f2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	791b      	ldrb	r3, [r3, #4]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d128      	bne.n	8004f88 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d110      	bne.n	8004f68 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e00f      	b.n	8004f88 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	1ff80000 	.word	0x1ff80000

08004fb8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	f040 80ce 	bne.w	8005176 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d132      	bne.n	8005048 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005000:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005024:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005040:	0cdb      	lsrs	r3, r3, #19
 8005042:	04db      	lsls	r3, r3, #19
 8005044:	6113      	str	r3, [r2, #16]
 8005046:	e04e      	b.n	80050e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005062:	0cdb      	lsrs	r3, r3, #19
 8005064:	04db      	lsls	r3, r3, #19
 8005066:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005082:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005086:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800508a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	699a      	ldr	r2, [r3, #24]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	429a      	cmp	r2, r3
 8005096:	d903      	bls.n	80050a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d6:	6939      	ldr	r1, [r7, #16]
 80050d8:	0148      	lsls	r0, r1, #5
 80050da:	6979      	ldr	r1, [r7, #20]
 80050dc:	4401      	add	r1, r0
 80050de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050e2:	4313      	orrs	r3, r2
 80050e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d11e      	bne.n	800512a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d009      	beq.n	8005108 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	461a      	mov	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005122:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	e097      	b.n	800525a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	440a      	add	r2, r1
 8005140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005144:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005148:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8083 	beq.w	800525a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	2101      	movs	r1, #1
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005170:	4313      	orrs	r3, r2
 8005172:	634b      	str	r3, [r1, #52]	; 0x34
 8005174:	e071      	b.n	800525a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005190:	0cdb      	lsrs	r3, r3, #19
 8005192:	04db      	lsls	r3, r3, #19
 8005194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005208:	6939      	ldr	r1, [r7, #16]
 800520a:	0148      	lsls	r0, r1, #5
 800520c:	6979      	ldr	r1, [r7, #20]
 800520e:	4401      	add	r1, r0
 8005210:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005214:	4313      	orrs	r3, r2
 8005216:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10d      	bne.n	800523a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6919      	ldr	r1, [r3, #16]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	460a      	mov	r2, r1
 8005238:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005254:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005258:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d14a      	bne.n	800531c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800529a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529e:	f040 8086 	bne.w	80053ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	7812      	ldrb	r2, [r2, #0]
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	7812      	ldrb	r2, [r2, #0]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3301      	adds	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d902      	bls.n	8005300 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
          break;
 80052fe:	e056      	b.n	80053ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005318:	d0e7      	beq.n	80052ea <USB_EPStopXfer+0x82>
 800531a:	e048      	b.n	80053ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005334:	d13b      	bne.n	80053ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	440a      	add	r2, r1
 8005350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005354:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005358:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	7812      	ldrb	r2, [r2, #0]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	440a      	add	r2, r1
 8005374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800537c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3301      	adds	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f242 7210 	movw	r2, #10000	; 0x2710
 800538a:	4293      	cmp	r3, r2
 800538c:	d902      	bls.n	8005394 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	75fb      	strb	r3, [r7, #23]
          break;
 8005392:	e00c      	b.n	80053ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ac:	d0e7      	beq.n	800537e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053bc:	b480      	push	{r7}
 80053be:	b089      	sub	sp, #36	; 0x24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	4611      	mov	r1, r2
 80053c8:	461a      	mov	r2, r3
 80053ca:	460b      	mov	r3, r1
 80053cc:	71fb      	strb	r3, [r7, #7]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d123      	bne.n	800542a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053e2:	88bb      	ldrh	r3, [r7, #4]
 80053e4:	3303      	adds	r3, #3
 80053e6:	089b      	lsrs	r3, r3, #2
 80053e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053ea:	2300      	movs	r3, #0
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	e018      	b.n	8005422 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	031a      	lsls	r2, r3, #12
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053fc:	461a      	mov	r2, r3
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	3301      	adds	r3, #1
 8005408:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3301      	adds	r3, #1
 800540e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	3301      	adds	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3301      	adds	r3, #1
 800541a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	3301      	adds	r3, #1
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	429a      	cmp	r2, r3
 8005428:	d3e2      	bcc.n	80053f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3724      	adds	r7, #36	; 0x24
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005438:	b480      	push	{r7}
 800543a:	b08b      	sub	sp, #44	; 0x2c
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	4613      	mov	r3, r2
 8005444:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	b29b      	uxth	r3, r3
 8005454:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800545e:	2300      	movs	r3, #0
 8005460:	623b      	str	r3, [r7, #32]
 8005462:	e014      	b.n	800548e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	3301      	adds	r3, #1
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	3301      	adds	r3, #1
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	3301      	adds	r3, #1
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	3301      	adds	r3, #1
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	3301      	adds	r3, #1
 800548c:	623b      	str	r3, [r7, #32]
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	429a      	cmp	r2, r3
 8005494:	d3e6      	bcc.n	8005464 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005496:	8bfb      	ldrh	r3, [r7, #30]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01e      	beq.n	80054da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a6:	461a      	mov	r2, r3
 80054a8:	f107 0310 	add.w	r3, r7, #16
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	fa22 f303 	lsr.w	r3, r2, r3
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	701a      	strb	r2, [r3, #0]
      i++;
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	3301      	adds	r3, #1
 80054c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	3301      	adds	r3, #1
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054ce:	8bfb      	ldrh	r3, [r7, #30]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054d4:	8bfb      	ldrh	r3, [r7, #30]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1ea      	bne.n	80054b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054dc:	4618      	mov	r0, r3
 80054de:	372c      	adds	r7, #44	; 0x2c
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d12c      	bne.n	800555e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	db12      	blt.n	800553c <USB_EPSetStall+0x54>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00f      	beq.n	800553c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	440a      	add	r2, r1
 8005532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005536:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800553a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005556:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	e02b      	b.n	80055b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	db12      	blt.n	8005596 <USB_EPSetStall+0xae>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00f      	beq.n	8005596 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005590:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005594:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d128      	bne.n	8005632 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	791b      	ldrb	r3, [r3, #4]
 8005604:	2b03      	cmp	r3, #3
 8005606:	d003      	beq.n	8005610 <USB_EPClearStall+0x4c>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	791b      	ldrb	r3, [r3, #4]
 800560c:	2b02      	cmp	r3, #2
 800560e:	d138      	bne.n	8005682 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	440a      	add	r2, r1
 8005626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	e027      	b.n	8005682 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005650:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	791b      	ldrb	r3, [r3, #4]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d003      	beq.n	8005662 <USB_EPClearStall+0x9e>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	791b      	ldrb	r3, [r3, #4]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d10f      	bne.n	8005682 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800567c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005680:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056c4:	68f9      	ldr	r1, [r7, #12]
 80056c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800570a:	f023 0302 	bic.w	r3, r3, #2
 800570e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005738:	f023 0303 	bic.w	r3, r3, #3
 800573c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4013      	ands	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005778:	68fb      	ldr	r3, [r7, #12]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	4013      	ands	r3, r2
 80057a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	0c1b      	lsrs	r3, r3, #16
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	4013      	ands	r3, r2
 80057dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	b29b      	uxth	r3, r3
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	4013      	ands	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800581c:	68bb      	ldr	r3, [r7, #8]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800582a:	b480      	push	{r7}
 800582c:	b087      	sub	sp, #28
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	460b      	mov	r3, r1
 8005834:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	fa22 f303 	lsr.w	r3, r2, r3
 800585a:	01db      	lsls	r3, r3, #7
 800585c:	b2db      	uxtb	r3, r3
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4013      	ands	r3, r2
 8005876:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005878:	68bb      	ldr	r3, [r7, #8]
}
 800587a:	4618      	mov	r0, r3
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0301 	and.w	r3, r3, #1
}
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058c0:	f023 0307 	bic.w	r3, r3, #7
 80058c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	460b      	mov	r3, r1
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	333c      	adds	r3, #60	; 0x3c
 80058fe:	3304      	adds	r3, #4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <USB_EP0_OutStart+0xb8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d90a      	bls.n	8005922 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800591c:	d101      	bne.n	8005922 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e037      	b.n	8005992 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	461a      	mov	r2, r3
 800592a:	2300      	movs	r3, #0
 800592c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005950:	f043 0318 	orr.w	r3, r3, #24
 8005954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005968:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800596a:	7afb      	ldrb	r3, [r7, #11]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d10f      	bne.n	8005990 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	461a      	mov	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800598e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	4f54300a 	.word	0x4f54300a

080059a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <USB_CoreReset+0x64>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e01b      	b.n	80059fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	daf2      	bge.n	80059b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3301      	adds	r3, #1
 80059de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <USB_CoreReset+0x64>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e006      	b.n	80059fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d0f0      	beq.n	80059da <USB_CoreReset+0x36>

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	00030d40 	.word	0x00030d40

08005a0c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005a18:	2010      	movs	r0, #16
 8005a1a:	f002 f93d 	bl	8007c98 <USBD_static_malloc>
 8005a1e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	32b0      	adds	r2, #176	; 0xb0
 8005a30:	2100      	movs	r1, #0
 8005a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a36:	2302      	movs	r3, #2
 8005a38:	e048      	b.n	8005acc <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	32b0      	adds	r2, #176	; 0xb0
 8005a44:	68f9      	ldr	r1, [r7, #12]
 8005a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	32b0      	adds	r2, #176	; 0xb0
 8005a54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	7c1b      	ldrb	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10d      	bne.n	8005a82 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005a66:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <USBD_HID_Init+0xc8>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	f003 020f 	and.w	r2, r3, #15
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	3326      	adds	r3, #38	; 0x26
 8005a7c:	2207      	movs	r2, #7
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	e00c      	b.n	8005a9c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005a82:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <USBD_HID_Init+0xc8>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f003 020f 	and.w	r2, r3, #15
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	3326      	adds	r3, #38	; 0x26
 8005a98:	220a      	movs	r2, #10
 8005a9a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <USBD_HID_Init+0xc8>)
 8005a9e:	7819      	ldrb	r1, [r3, #0]
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	2203      	movs	r2, #3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 ffe6 	bl	8007a76 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005aaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <USBD_HID_Init+0xc8>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f003 020f 	and.w	r2, r3, #15
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	3324      	adds	r3, #36	; 0x24
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	200000ca 	.word	0x200000ca

08005ad8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005ae4:	4b1f      	ldr	r3, [pc, #124]	; (8005b64 <USBD_HID_DeInit+0x8c>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 ffe9 	bl	8007ac2 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005af0:	4b1c      	ldr	r3, [pc, #112]	; (8005b64 <USBD_HID_DeInit+0x8c>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f003 020f 	and.w	r2, r3, #15
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	3324      	adds	r3, #36	; 0x24
 8005b06:	2200      	movs	r2, #0
 8005b08:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005b0a:	4b16      	ldr	r3, [pc, #88]	; (8005b64 <USBD_HID_DeInit+0x8c>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f003 020f 	and.w	r2, r3, #15
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	3326      	adds	r3, #38	; 0x26
 8005b20:	2200      	movs	r2, #0
 8005b22:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	32b0      	adds	r2, #176	; 0xb0
 8005b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d011      	beq.n	8005b5a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	32b0      	adds	r2, #176	; 0xb0
 8005b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f002 f8b5 	bl	8007cb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	32b0      	adds	r2, #176	; 0xb0
 8005b54:	2100      	movs	r1, #0
 8005b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	200000ca 	.word	0x200000ca

08005b68 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	32b0      	adds	r2, #176	; 0xb0
 8005b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b80:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e0e8      	b.n	8005d66 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d046      	beq.n	8005c2e <USBD_HID_Setup+0xc6>
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	f040 80d8 	bne.w	8005d56 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	785b      	ldrb	r3, [r3, #1]
 8005baa:	3b02      	subs	r3, #2
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	d836      	bhi.n	8005c1e <USBD_HID_Setup+0xb6>
 8005bb0:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <USBD_HID_Setup+0x50>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005c0f 	.word	0x08005c0f
 8005bbc:	08005bef 	.word	0x08005bef
 8005bc0:	08005c1f 	.word	0x08005c1f
 8005bc4:	08005c1f 	.word	0x08005c1f
 8005bc8:	08005c1f 	.word	0x08005c1f
 8005bcc:	08005c1f 	.word	0x08005c1f
 8005bd0:	08005c1f 	.word	0x08005c1f
 8005bd4:	08005c1f 	.word	0x08005c1f
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005be1 	.word	0x08005be1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	885b      	ldrh	r3, [r3, #2]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]
          break;
 8005bec:	e01e      	b.n	8005c2c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 fbe9 	bl	80073cc <USBD_CtlSendData>
          break;
 8005bfa:	e017      	b.n	8005c2c <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	885b      	ldrh	r3, [r3, #2]
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	605a      	str	r2, [r3, #4]
          break;
 8005c0c:	e00e      	b.n	8005c2c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3304      	adds	r3, #4
 8005c12:	2201      	movs	r2, #1
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 fbd8 	bl	80073cc <USBD_CtlSendData>
          break;
 8005c1c:	e006      	b.n	8005c2c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 fb62 	bl	80072ea <USBD_CtlError>
          ret = USBD_FAIL;
 8005c26:	2303      	movs	r3, #3
 8005c28:	75fb      	strb	r3, [r7, #23]
          break;
 8005c2a:	bf00      	nop
      }
      break;
 8005c2c:	e09a      	b.n	8005d64 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	2b0b      	cmp	r3, #11
 8005c34:	f200 8086 	bhi.w	8005d44 <USBD_HID_Setup+0x1dc>
 8005c38:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <USBD_HID_Setup+0xd8>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005c71 	.word	0x08005c71
 8005c44:	08005d53 	.word	0x08005d53
 8005c48:	08005d45 	.word	0x08005d45
 8005c4c:	08005d45 	.word	0x08005d45
 8005c50:	08005d45 	.word	0x08005d45
 8005c54:	08005d45 	.word	0x08005d45
 8005c58:	08005c9b 	.word	0x08005c9b
 8005c5c:	08005d45 	.word	0x08005d45
 8005c60:	08005d45 	.word	0x08005d45
 8005c64:	08005d45 	.word	0x08005d45
 8005c68:	08005cf3 	.word	0x08005cf3
 8005c6c:	08005d1d 	.word	0x08005d1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d107      	bne.n	8005c8c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c7c:	f107 030a 	add.w	r3, r7, #10
 8005c80:	2202      	movs	r2, #2
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 fba1 	bl	80073cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c8a:	e063      	b.n	8005d54 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 fb2b 	bl	80072ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005c94:	2303      	movs	r3, #3
 8005c96:	75fb      	strb	r3, [r7, #23]
          break;
 8005c98:	e05c      	b.n	8005d54 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	885b      	ldrh	r3, [r3, #2]
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b22      	cmp	r3, #34	; 0x22
 8005ca4:	d108      	bne.n	8005cb8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	88db      	ldrh	r3, [r3, #6]
 8005caa:	2b4a      	cmp	r3, #74	; 0x4a
 8005cac:	bf28      	it	cs
 8005cae:	234a      	movcs	r3, #74	; 0x4a
 8005cb0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005cb2:	4b2f      	ldr	r3, [pc, #188]	; (8005d70 <USBD_HID_Setup+0x208>)
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	e015      	b.n	8005ce4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	885b      	ldrh	r3, [r3, #2]
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b21      	cmp	r3, #33	; 0x21
 8005cc2:	d108      	bne.n	8005cd6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005cc4:	4b2b      	ldr	r3, [pc, #172]	; (8005d74 <USBD_HID_Setup+0x20c>)
 8005cc6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	88db      	ldrh	r3, [r3, #6]
 8005ccc:	2b09      	cmp	r3, #9
 8005cce:	bf28      	it	cs
 8005cd0:	2309      	movcs	r3, #9
 8005cd2:	82bb      	strh	r3, [r7, #20]
 8005cd4:	e006      	b.n	8005ce4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 fb06 	bl	80072ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	75fb      	strb	r3, [r7, #23]
            break;
 8005ce2:	e037      	b.n	8005d54 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ce4:	8abb      	ldrh	r3, [r7, #20]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6939      	ldr	r1, [r7, #16]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 fb6e 	bl	80073cc <USBD_CtlSendData>
          break;
 8005cf0:	e030      	b.n	8005d54 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d107      	bne.n	8005d0e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3308      	adds	r3, #8
 8005d02:	2201      	movs	r2, #1
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 fb60 	bl	80073cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d0c:	e022      	b.n	8005d54 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 faea 	bl	80072ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005d16:	2303      	movs	r3, #3
 8005d18:	75fb      	strb	r3, [r7, #23]
          break;
 8005d1a:	e01b      	b.n	8005d54 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d106      	bne.n	8005d36 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	885b      	ldrh	r3, [r3, #2]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d34:	e00e      	b.n	8005d54 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 fad6 	bl	80072ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	75fb      	strb	r3, [r7, #23]
          break;
 8005d42:	e007      	b.n	8005d54 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 facf 	bl	80072ea <USBD_CtlError>
          ret = USBD_FAIL;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	75fb      	strb	r3, [r7, #23]
          break;
 8005d50:	e000      	b.n	8005d54 <USBD_HID_Setup+0x1ec>
          break;
 8005d52:	bf00      	nop
      }
      break;
 8005d54:	e006      	b.n	8005d64 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fac6 	bl	80072ea <USBD_CtlError>
      ret = USBD_FAIL;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	75fb      	strb	r3, [r7, #23]
      break;
 8005d62:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000080 	.word	0x20000080
 8005d74:	20000068 	.word	0x20000068

08005d78 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	32b0      	adds	r2, #176	; 0xb0
 8005d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d94:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e014      	b.n	8005dca <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d10d      	bne.n	8005dc8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	7b1b      	ldrb	r3, [r3, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d109      	bne.n	8005dc8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2201      	movs	r2, #1
 8005db8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <USBD_HID_SendReport+0x5c>)
 8005dbc:	7819      	ldrb	r1, [r3, #0]
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f001 ff25 	bl	8007c12 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	200000ca 	.word	0x200000ca

08005dd8 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	7c1b      	ldrb	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005de8:	2308      	movs	r3, #8
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	e001      	b.n	8005df2 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8005dee:	230a      	movs	r3, #10
 8005df0:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e08:	2181      	movs	r1, #129	; 0x81
 8005e0a:	4809      	ldr	r0, [pc, #36]	; (8005e30 <USBD_HID_GetFSCfgDesc+0x30>)
 8005e0c:	f000 fc35 	bl	800667a <USBD_GetEpDesc>
 8005e10:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	220a      	movs	r2, #10
 8005e1c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2222      	movs	r2, #34	; 0x22
 8005e22:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e24:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000044 	.word	0x20000044

08005e34 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e3c:	2181      	movs	r1, #129	; 0x81
 8005e3e:	4809      	ldr	r0, [pc, #36]	; (8005e64 <USBD_HID_GetHSCfgDesc+0x30>)
 8005e40:	f000 fc1b 	bl	800667a <USBD_GetEpDesc>
 8005e44:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2207      	movs	r2, #7
 8005e50:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2222      	movs	r2, #34	; 0x22
 8005e56:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e58:	4b02      	ldr	r3, [pc, #8]	; (8005e64 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000044 	.word	0x20000044

08005e68 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e70:	2181      	movs	r1, #129	; 0x81
 8005e72:	4809      	ldr	r0, [pc, #36]	; (8005e98 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005e74:	f000 fc01 	bl	800667a <USBD_GetEpDesc>
 8005e78:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	220a      	movs	r2, #10
 8005e84:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2222      	movs	r2, #34	; 0x22
 8005e8a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000044 	.word	0x20000044

08005e9c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	32b0      	adds	r2, #176	; 0xb0
 8005eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	220a      	movs	r2, #10
 8005ed4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005ed6:	4b03      	ldr	r3, [pc, #12]	; (8005ee4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	20000074 	.word	0x20000074

08005ee8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e01f      	b.n	8005f40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	79fa      	ldrb	r2, [r7, #7]
 8005f32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f001 fd37 	bl	80079a8 <USBD_LL_Init>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e025      	b.n	8005fac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	32ae      	adds	r2, #174	; 0xae
 8005f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00f      	beq.n	8005f9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	32ae      	adds	r2, #174	; 0xae
 8005f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	f107 020e 	add.w	r2, r7, #14
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	4602      	mov	r2, r0
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fd3f 	bl	8007a40 <USBD_LL_Start>
 8005fc2:	4603      	mov	r3, r0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	4611      	mov	r1, r2
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
 800600c:	4603      	mov	r3, r0
 800600e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	4611      	mov	r1, r2
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006040:	2303      	movs	r3, #3
 8006042:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f001 f908 	bl	8007276 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006074:	461a      	mov	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	2b02      	cmp	r3, #2
 8006088:	d01a      	beq.n	80060c0 <USBD_LL_SetupStage+0x72>
 800608a:	2b02      	cmp	r3, #2
 800608c:	d822      	bhi.n	80060d4 <USBD_LL_SetupStage+0x86>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <USBD_LL_SetupStage+0x4a>
 8006092:	2b01      	cmp	r3, #1
 8006094:	d00a      	beq.n	80060ac <USBD_LL_SetupStage+0x5e>
 8006096:	e01d      	b.n	80060d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fb5f 	bl	8006764 <USBD_StdDevReq>
 80060a6:	4603      	mov	r3, r0
 80060a8:	73fb      	strb	r3, [r7, #15]
      break;
 80060aa:	e020      	b.n	80060ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fbc7 	bl	8006848 <USBD_StdItfReq>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]
      break;
 80060be:	e016      	b.n	80060ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fc29 	bl	8006920 <USBD_StdEPReq>
 80060ce:	4603      	mov	r3, r0
 80060d0:	73fb      	strb	r3, [r7, #15]
      break;
 80060d2:	e00c      	b.n	80060ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 fd0c 	bl	8007b00 <USBD_LL_StallEP>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	bf00      	nop
  }

  return ret;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	460b      	mov	r3, r1
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d16e      	bne.n	80061ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006116:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800611e:	2b03      	cmp	r3, #3
 8006120:	f040 8098 	bne.w	8006254 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	429a      	cmp	r2, r3
 800612e:	d913      	bls.n	8006158 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	1ad2      	subs	r2, r2, r3
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	4293      	cmp	r3, r2
 8006148:	bf28      	it	cs
 800614a:	4613      	movcs	r3, r2
 800614c:	461a      	mov	r2, r3
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f001 f967 	bl	8007424 <USBD_CtlContinueRx>
 8006156:	e07d      	b.n	8006254 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2b02      	cmp	r3, #2
 8006164:	d014      	beq.n	8006190 <USBD_LL_DataOutStage+0x98>
 8006166:	2b02      	cmp	r3, #2
 8006168:	d81d      	bhi.n	80061a6 <USBD_LL_DataOutStage+0xae>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <USBD_LL_DataOutStage+0x7c>
 800616e:	2b01      	cmp	r3, #1
 8006170:	d003      	beq.n	800617a <USBD_LL_DataOutStage+0x82>
 8006172:	e018      	b.n	80061a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	75bb      	strb	r3, [r7, #22]
            break;
 8006178:	e018      	b.n	80061ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006180:	b2db      	uxtb	r3, r3
 8006182:	4619      	mov	r1, r3
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 fa5e 	bl	8006646 <USBD_CoreFindIF>
 800618a:	4603      	mov	r3, r0
 800618c:	75bb      	strb	r3, [r7, #22]
            break;
 800618e:	e00d      	b.n	80061ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006196:	b2db      	uxtb	r3, r3
 8006198:	4619      	mov	r1, r3
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fa60 	bl	8006660 <USBD_CoreFindEP>
 80061a0:	4603      	mov	r3, r0
 80061a2:	75bb      	strb	r3, [r7, #22]
            break;
 80061a4:	e002      	b.n	80061ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	75bb      	strb	r3, [r7, #22]
            break;
 80061aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80061ac:	7dbb      	ldrb	r3, [r7, #22]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d119      	bne.n	80061e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d113      	bne.n	80061e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80061be:	7dba      	ldrb	r2, [r7, #22]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	32ae      	adds	r2, #174	; 0xae
 80061c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80061ce:	7dba      	ldrb	r2, [r7, #22]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80061d6:	7dba      	ldrb	r2, [r7, #22]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	32ae      	adds	r2, #174	; 0xae
 80061dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f001 f92d 	bl	8007446 <USBD_CtlSendStatus>
 80061ec:	e032      	b.n	8006254 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80061ee:	7afb      	ldrb	r3, [r7, #11]
 80061f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	4619      	mov	r1, r3
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fa31 	bl	8006660 <USBD_CoreFindEP>
 80061fe:	4603      	mov	r3, r0
 8006200:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006202:	7dbb      	ldrb	r3, [r7, #22]
 8006204:	2bff      	cmp	r3, #255	; 0xff
 8006206:	d025      	beq.n	8006254 <USBD_LL_DataOutStage+0x15c>
 8006208:	7dbb      	ldrb	r3, [r7, #22]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d122      	bne.n	8006254 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d117      	bne.n	800624a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800621a:	7dba      	ldrb	r2, [r7, #22]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	32ae      	adds	r2, #174	; 0xae
 8006220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00f      	beq.n	800624a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800622a:	7dba      	ldrb	r2, [r7, #22]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006232:	7dba      	ldrb	r2, [r7, #22]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	32ae      	adds	r2, #174	; 0xae
 8006238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	7afa      	ldrb	r2, [r7, #11]
 8006240:	4611      	mov	r1, r2
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	4798      	blx	r3
 8006246:	4603      	mov	r3, r0
 8006248:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	e000      	b.n	8006256 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b086      	sub	sp, #24
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	460b      	mov	r3, r1
 8006268:	607a      	str	r2, [r7, #4]
 800626a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800626c:	7afb      	ldrb	r3, [r7, #11]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d16f      	bne.n	8006352 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3314      	adds	r3, #20
 8006276:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800627e:	2b02      	cmp	r3, #2
 8006280:	d15a      	bne.n	8006338 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	429a      	cmp	r2, r3
 800628c:	d914      	bls.n	80062b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	1ad2      	subs	r2, r2, r3
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	461a      	mov	r2, r3
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f001 f8ac 	bl	8007402 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062aa:	2300      	movs	r3, #0
 80062ac:	2200      	movs	r2, #0
 80062ae:	2100      	movs	r1, #0
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f001 fccf 	bl	8007c54 <USBD_LL_PrepareReceive>
 80062b6:	e03f      	b.n	8006338 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d11c      	bne.n	80062fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d316      	bcc.n	80062fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062da:	429a      	cmp	r2, r3
 80062dc:	d20f      	bcs.n	80062fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062de:	2200      	movs	r2, #0
 80062e0:	2100      	movs	r1, #0
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f001 f88d 	bl	8007402 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062f0:	2300      	movs	r3, #0
 80062f2:	2200      	movs	r2, #0
 80062f4:	2100      	movs	r1, #0
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f001 fcac 	bl	8007c54 <USBD_LL_PrepareReceive>
 80062fc:	e01c      	b.n	8006338 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b03      	cmp	r3, #3
 8006308:	d10f      	bne.n	800632a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d009      	beq.n	800632a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f001 fbe7 	bl	8007b00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f001 f89a 	bl	800746c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d03a      	beq.n	80063b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff fe42 	bl	8005fcc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006350:	e032      	b.n	80063b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006352:	7afb      	ldrb	r3, [r7, #11]
 8006354:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006358:	b2db      	uxtb	r3, r3
 800635a:	4619      	mov	r1, r3
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f97f 	bl	8006660 <USBD_CoreFindEP>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	2bff      	cmp	r3, #255	; 0xff
 800636a:	d025      	beq.n	80063b8 <USBD_LL_DataInStage+0x15a>
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d122      	bne.n	80063b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b03      	cmp	r3, #3
 800637c:	d11c      	bne.n	80063b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800637e:	7dfa      	ldrb	r2, [r7, #23]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	32ae      	adds	r2, #174	; 0xae
 8006384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d014      	beq.n	80063b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800638e:	7dfa      	ldrb	r2, [r7, #23]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006396:	7dfa      	ldrb	r2, [r7, #23]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	32ae      	adds	r2, #174	; 0xae
 800639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	7afa      	ldrb	r2, [r7, #11]
 80063a4:	4611      	mov	r1, r2
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	4798      	blx	r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80063ae:	7dbb      	ldrb	r3, [r7, #22]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80063b4:	7dbb      	ldrb	r3, [r7, #22]
 80063b6:	e000      	b.n	80063ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d014      	beq.n	8006428 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00e      	beq.n	8006428 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6852      	ldr	r2, [r2, #4]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	4611      	mov	r1, r2
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006424:	2303      	movs	r3, #3
 8006426:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006428:	2340      	movs	r3, #64	; 0x40
 800642a:	2200      	movs	r2, #0
 800642c:	2100      	movs	r1, #0
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f001 fb21 	bl	8007a76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2240      	movs	r2, #64	; 0x40
 8006440:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	2200      	movs	r2, #0
 8006448:	2180      	movs	r1, #128	; 0x80
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fb13 	bl	8007a76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2240      	movs	r2, #64	; 0x40
 800645a:	621a      	str	r2, [r3, #32]

  return ret;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	78fa      	ldrb	r2, [r7, #3]
 8006476:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006494:	b2da      	uxtb	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2204      	movs	r2, #4
 80064a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d106      	bne.n	80064d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d110      	bne.n	8006518 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	32ae      	adds	r2, #174	; 0xae
 8006538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006540:	2303      	movs	r3, #3
 8006542:	e01c      	b.n	800657e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b03      	cmp	r3, #3
 800654e:	d115      	bne.n	800657c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	32ae      	adds	r2, #174	; 0xae
 800655a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	32ae      	adds	r2, #174	; 0xae
 800656e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	4611      	mov	r1, r2
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	32ae      	adds	r2, #174	; 0xae
 800659c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e01c      	b.n	80065e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d115      	bne.n	80065e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	32ae      	adds	r2, #174	; 0xae
 80065be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	32ae      	adds	r2, #174	; 0xae
 80065d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	4611      	mov	r1, r2
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00e      	beq.n	800663c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6852      	ldr	r2, [r2, #4]
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	4611      	mov	r1, r2
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006638:	2303      	movs	r3, #3
 800663a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006652:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800666c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800666e:	4618      	mov	r0, r3
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	460b      	mov	r3, r1
 8006684:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	885b      	ldrh	r3, [r3, #2]
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	429a      	cmp	r2, r3
 80066a0:	d920      	bls.n	80066e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80066aa:	e013      	b.n	80066d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80066ac:	f107 030a 	add.w	r3, r7, #10
 80066b0:	4619      	mov	r1, r3
 80066b2:	6978      	ldr	r0, [r7, #20]
 80066b4:	f000 f81b 	bl	80066ee <USBD_GetNextDesc>
 80066b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	2b05      	cmp	r3, #5
 80066c0:	d108      	bne.n	80066d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	789b      	ldrb	r3, [r3, #2]
 80066ca:	78fa      	ldrb	r2, [r7, #3]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d008      	beq.n	80066e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	885b      	ldrh	r3, [r3, #2]
 80066d8:	b29a      	uxth	r2, r3
 80066da:	897b      	ldrh	r3, [r7, #10]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d8e5      	bhi.n	80066ac <USBD_GetEpDesc+0x32>
 80066e0:	e000      	b.n	80066e4 <USBD_GetEpDesc+0x6a>
          break;
 80066e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80066e4:	693b      	ldr	r3, [r7, #16]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	881a      	ldrh	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	4413      	add	r3, r2
 8006708:	b29a      	uxth	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4413      	add	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800671a:	68fb      	ldr	r3, [r7, #12]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	3301      	adds	r3, #1
 800673e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006746:	8a3b      	ldrh	r3, [r7, #16]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	b21a      	sxth	r2, r3
 800674c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006750:	4313      	orrs	r3, r2
 8006752:	b21b      	sxth	r3, r3
 8006754:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006756:	89fb      	ldrh	r3, [r7, #14]
}
 8006758:	4618      	mov	r0, r3
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800677a:	2b40      	cmp	r3, #64	; 0x40
 800677c:	d005      	beq.n	800678a <USBD_StdDevReq+0x26>
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d857      	bhi.n	8006832 <USBD_StdDevReq+0xce>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00f      	beq.n	80067a6 <USBD_StdDevReq+0x42>
 8006786:	2b20      	cmp	r3, #32
 8006788:	d153      	bne.n	8006832 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	32ae      	adds	r2, #174	; 0xae
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]
      break;
 80067a4:	e04a      	b.n	800683c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	2b09      	cmp	r3, #9
 80067ac:	d83b      	bhi.n	8006826 <USBD_StdDevReq+0xc2>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <USBD_StdDevReq+0x50>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	08006809 	.word	0x08006809
 80067b8:	0800681d 	.word	0x0800681d
 80067bc:	08006827 	.word	0x08006827
 80067c0:	08006813 	.word	0x08006813
 80067c4:	08006827 	.word	0x08006827
 80067c8:	080067e7 	.word	0x080067e7
 80067cc:	080067dd 	.word	0x080067dd
 80067d0:	08006827 	.word	0x08006827
 80067d4:	080067ff 	.word	0x080067ff
 80067d8:	080067f1 	.word	0x080067f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa3c 	bl	8006c5c <USBD_GetDescriptor>
          break;
 80067e4:	e024      	b.n	8006830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fba1 	bl	8006f30 <USBD_SetAddress>
          break;
 80067ee:	e01f      	b.n	8006830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fbe0 	bl	8006fb8 <USBD_SetConfig>
 80067f8:	4603      	mov	r3, r0
 80067fa:	73fb      	strb	r3, [r7, #15]
          break;
 80067fc:	e018      	b.n	8006830 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fc83 	bl	800710c <USBD_GetConfig>
          break;
 8006806:	e013      	b.n	8006830 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fcb4 	bl	8007178 <USBD_GetStatus>
          break;
 8006810:	e00e      	b.n	8006830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fce3 	bl	80071e0 <USBD_SetFeature>
          break;
 800681a:	e009      	b.n	8006830 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fd07 	bl	8007232 <USBD_ClrFeature>
          break;
 8006824:	e004      	b.n	8006830 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fd5e 	bl	80072ea <USBD_CtlError>
          break;
 800682e:	bf00      	nop
      }
      break;
 8006830:	e004      	b.n	800683c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fd58 	bl	80072ea <USBD_CtlError>
      break;
 800683a:	bf00      	nop
  }

  return ret;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop

08006848 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d005      	beq.n	800686e <USBD_StdItfReq+0x26>
 8006862:	2b40      	cmp	r3, #64	; 0x40
 8006864:	d852      	bhi.n	800690c <USBD_StdItfReq+0xc4>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <USBD_StdItfReq+0x26>
 800686a:	2b20      	cmp	r3, #32
 800686c:	d14e      	bne.n	800690c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006874:	b2db      	uxtb	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	2b02      	cmp	r3, #2
 800687a:	d840      	bhi.n	80068fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	889b      	ldrh	r3, [r3, #4]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	d836      	bhi.n	80068f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	889b      	ldrh	r3, [r3, #4]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff fed9 	bl	8006646 <USBD_CoreFindIF>
 8006894:	4603      	mov	r3, r0
 8006896:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	2bff      	cmp	r3, #255	; 0xff
 800689c:	d01d      	beq.n	80068da <USBD_StdItfReq+0x92>
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11a      	bne.n	80068da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80068a4:	7bba      	ldrb	r2, [r7, #14]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	32ae      	adds	r2, #174	; 0xae
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00f      	beq.n	80068d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80068b4:	7bba      	ldrb	r2, [r7, #14]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068bc:	7bba      	ldrb	r2, [r7, #14]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	32ae      	adds	r2, #174	; 0xae
 80068c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068d2:	e004      	b.n	80068de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80068d4:	2303      	movs	r3, #3
 80068d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068d8:	e001      	b.n	80068de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80068da:	2303      	movs	r3, #3
 80068dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	88db      	ldrh	r3, [r3, #6]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d110      	bne.n	8006908 <USBD_StdItfReq+0xc0>
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10d      	bne.n	8006908 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fdaa 	bl	8007446 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068f2:	e009      	b.n	8006908 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fcf7 	bl	80072ea <USBD_CtlError>
          break;
 80068fc:	e004      	b.n	8006908 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fcf2 	bl	80072ea <USBD_CtlError>
          break;
 8006906:	e000      	b.n	800690a <USBD_StdItfReq+0xc2>
          break;
 8006908:	bf00      	nop
      }
      break;
 800690a:	e004      	b.n	8006916 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fceb 	bl	80072ea <USBD_CtlError>
      break;
 8006914:	bf00      	nop
  }

  return ret;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	889b      	ldrh	r3, [r3, #4]
 8006932:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	d007      	beq.n	8006950 <USBD_StdEPReq+0x30>
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	f200 817f 	bhi.w	8006c44 <USBD_StdEPReq+0x324>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02a      	beq.n	80069a0 <USBD_StdEPReq+0x80>
 800694a:	2b20      	cmp	r3, #32
 800694c:	f040 817a 	bne.w	8006c44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff fe83 	bl	8006660 <USBD_CoreFindEP>
 800695a:	4603      	mov	r3, r0
 800695c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800695e:	7b7b      	ldrb	r3, [r7, #13]
 8006960:	2bff      	cmp	r3, #255	; 0xff
 8006962:	f000 8174 	beq.w	8006c4e <USBD_StdEPReq+0x32e>
 8006966:	7b7b      	ldrb	r3, [r7, #13]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f040 8170 	bne.w	8006c4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800696e:	7b7a      	ldrb	r2, [r7, #13]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006976:	7b7a      	ldrb	r2, [r7, #13]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	32ae      	adds	r2, #174	; 0xae
 800697c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 8163 	beq.w	8006c4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006988:	7b7a      	ldrb	r2, [r7, #13]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	32ae      	adds	r2, #174	; 0xae
 800698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800699e:	e156      	b.n	8006c4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d008      	beq.n	80069ba <USBD_StdEPReq+0x9a>
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	f300 8145 	bgt.w	8006c38 <USBD_StdEPReq+0x318>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 809b 	beq.w	8006aea <USBD_StdEPReq+0x1ca>
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d03c      	beq.n	8006a32 <USBD_StdEPReq+0x112>
 80069b8:	e13e      	b.n	8006c38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d002      	beq.n	80069cc <USBD_StdEPReq+0xac>
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d016      	beq.n	80069f8 <USBD_StdEPReq+0xd8>
 80069ca:	e02c      	b.n	8006a26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00d      	beq.n	80069ee <USBD_StdEPReq+0xce>
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	2b80      	cmp	r3, #128	; 0x80
 80069d6:	d00a      	beq.n	80069ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 f88f 	bl	8007b00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069e2:	2180      	movs	r1, #128	; 0x80
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 f88b 	bl	8007b00 <USBD_LL_StallEP>
 80069ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069ec:	e020      	b.n	8006a30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fc7a 	bl	80072ea <USBD_CtlError>
              break;
 80069f6:	e01b      	b.n	8006a30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	885b      	ldrh	r3, [r3, #2]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10e      	bne.n	8006a1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <USBD_StdEPReq+0xfe>
 8006a06:	7bbb      	ldrb	r3, [r7, #14]
 8006a08:	2b80      	cmp	r3, #128	; 0x80
 8006a0a:	d008      	beq.n	8006a1e <USBD_StdEPReq+0xfe>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	88db      	ldrh	r3, [r3, #6]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d104      	bne.n	8006a1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 f871 	bl	8007b00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fd11 	bl	8007446 <USBD_CtlSendStatus>

              break;
 8006a24:	e004      	b.n	8006a30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fc5e 	bl	80072ea <USBD_CtlError>
              break;
 8006a2e:	bf00      	nop
          }
          break;
 8006a30:	e107      	b.n	8006c42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d002      	beq.n	8006a44 <USBD_StdEPReq+0x124>
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d016      	beq.n	8006a70 <USBD_StdEPReq+0x150>
 8006a42:	e04b      	b.n	8006adc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00d      	beq.n	8006a66 <USBD_StdEPReq+0x146>
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	2b80      	cmp	r3, #128	; 0x80
 8006a4e:	d00a      	beq.n	8006a66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f853 	bl	8007b00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f84f 	bl	8007b00 <USBD_LL_StallEP>
 8006a62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a64:	e040      	b.n	8006ae8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fc3e 	bl	80072ea <USBD_CtlError>
              break;
 8006a6e:	e03b      	b.n	8006ae8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	885b      	ldrh	r3, [r3, #2]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d136      	bne.n	8006ae6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a82:	7bbb      	ldrb	r3, [r7, #14]
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 f859 	bl	8007b3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fcda 	bl	8007446 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff fde2 	bl	8006660 <USBD_CoreFindEP>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006aa0:	7b7b      	ldrb	r3, [r7, #13]
 8006aa2:	2bff      	cmp	r3, #255	; 0xff
 8006aa4:	d01f      	beq.n	8006ae6 <USBD_StdEPReq+0x1c6>
 8006aa6:	7b7b      	ldrb	r3, [r7, #13]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d11c      	bne.n	8006ae6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006aac:	7b7a      	ldrb	r2, [r7, #13]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006ab4:	7b7a      	ldrb	r2, [r7, #13]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	32ae      	adds	r2, #174	; 0xae
 8006aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d010      	beq.n	8006ae6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ac4:	7b7a      	ldrb	r2, [r7, #13]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	32ae      	adds	r2, #174	; 0xae
 8006aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ada:	e004      	b.n	8006ae6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fc03 	bl	80072ea <USBD_CtlError>
              break;
 8006ae4:	e000      	b.n	8006ae8 <USBD_StdEPReq+0x1c8>
              break;
 8006ae6:	bf00      	nop
          }
          break;
 8006ae8:	e0ab      	b.n	8006c42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d002      	beq.n	8006afc <USBD_StdEPReq+0x1dc>
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d032      	beq.n	8006b60 <USBD_StdEPReq+0x240>
 8006afa:	e097      	b.n	8006c2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d007      	beq.n	8006b12 <USBD_StdEPReq+0x1f2>
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	2b80      	cmp	r3, #128	; 0x80
 8006b06:	d004      	beq.n	8006b12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fbed 	bl	80072ea <USBD_CtlError>
                break;
 8006b10:	e091      	b.n	8006c36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	da0b      	bge.n	8006b32 <USBD_StdEPReq+0x212>
 8006b1a:	7bbb      	ldrb	r3, [r7, #14]
 8006b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	3310      	adds	r3, #16
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3304      	adds	r3, #4
 8006b30:	e00b      	b.n	8006b4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	4413      	add	r3, r2
 8006b48:	3304      	adds	r3, #4
 8006b4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2202      	movs	r2, #2
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fc37 	bl	80073cc <USBD_CtlSendData>
              break;
 8006b5e:	e06a      	b.n	8006c36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	da11      	bge.n	8006b8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	f003 020f 	and.w	r2, r3, #15
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	3324      	adds	r3, #36	; 0x24
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d117      	bne.n	8006bb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fbb0 	bl	80072ea <USBD_CtlError>
                  break;
 8006b8a:	e054      	b.n	8006c36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	f003 020f 	and.w	r2, r3, #15
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	4613      	mov	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fb9d 	bl	80072ea <USBD_CtlError>
                  break;
 8006bb0:	e041      	b.n	8006c36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	da0b      	bge.n	8006bd2 <USBD_StdEPReq+0x2b2>
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	3310      	adds	r3, #16
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	3304      	adds	r3, #4
 8006bd0:	e00b      	b.n	8006bea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bd2:	7bbb      	ldrb	r3, [r7, #14]
 8006bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4413      	add	r3, r2
 8006be8:	3304      	adds	r3, #4
 8006bea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <USBD_StdEPReq+0x2d8>
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	2b80      	cmp	r3, #128	; 0x80
 8006bf6:	d103      	bne.n	8006c00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e00e      	b.n	8006c1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 ffb9 	bl	8007b7c <USBD_LL_IsStallEP>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2201      	movs	r2, #1
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	e002      	b.n	8006c1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2202      	movs	r2, #2
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fbd1 	bl	80073cc <USBD_CtlSendData>
              break;
 8006c2a:	e004      	b.n	8006c36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fb5b 	bl	80072ea <USBD_CtlError>
              break;
 8006c34:	bf00      	nop
          }
          break;
 8006c36:	e004      	b.n	8006c42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fb55 	bl	80072ea <USBD_CtlError>
          break;
 8006c40:	bf00      	nop
      }
      break;
 8006c42:	e005      	b.n	8006c50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fb4f 	bl	80072ea <USBD_CtlError>
      break;
 8006c4c:	e000      	b.n	8006c50 <USBD_StdEPReq+0x330>
      break;
 8006c4e:	bf00      	nop
  }

  return ret;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	885b      	ldrh	r3, [r3, #2]
 8006c76:	0a1b      	lsrs	r3, r3, #8
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	2b06      	cmp	r3, #6
 8006c7e:	f200 8128 	bhi.w	8006ed2 <USBD_GetDescriptor+0x276>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <USBD_GetDescriptor+0x2c>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006ca5 	.word	0x08006ca5
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006cfd 	.word	0x08006cfd
 8006c94:	08006ed3 	.word	0x08006ed3
 8006c98:	08006ed3 	.word	0x08006ed3
 8006c9c:	08006e73 	.word	0x08006e73
 8006ca0:	08006e9f 	.word	0x08006e9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	7c12      	ldrb	r2, [r2, #16]
 8006cb0:	f107 0108 	add.w	r1, r7, #8
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4798      	blx	r3
 8006cb8:	60f8      	str	r0, [r7, #12]
      break;
 8006cba:	e112      	b.n	8006ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	7c1b      	ldrb	r3, [r3, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10d      	bne.n	8006ce0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	f107 0208 	add.w	r2, r7, #8
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4798      	blx	r3
 8006cd4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	2202      	movs	r2, #2
 8006cdc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006cde:	e100      	b.n	8006ee2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	f107 0208 	add.w	r2, r7, #8
 8006cec:	4610      	mov	r0, r2
 8006cee:	4798      	blx	r3
 8006cf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	701a      	strb	r2, [r3, #0]
      break;
 8006cfa:	e0f2      	b.n	8006ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	885b      	ldrh	r3, [r3, #2]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b05      	cmp	r3, #5
 8006d04:	f200 80ac 	bhi.w	8006e60 <USBD_GetDescriptor+0x204>
 8006d08:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <USBD_GetDescriptor+0xb4>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d29 	.word	0x08006d29
 8006d14:	08006d5d 	.word	0x08006d5d
 8006d18:	08006d91 	.word	0x08006d91
 8006d1c:	08006dc5 	.word	0x08006dc5
 8006d20:	08006df9 	.word	0x08006df9
 8006d24:	08006e2d 	.word	0x08006e2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	7c12      	ldrb	r2, [r2, #16]
 8006d40:	f107 0108 	add.w	r1, r7, #8
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d4a:	e091      	b.n	8006e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 facb 	bl	80072ea <USBD_CtlError>
            err++;
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	3301      	adds	r3, #1
 8006d58:	72fb      	strb	r3, [r7, #11]
          break;
 8006d5a:	e089      	b.n	8006e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	7c12      	ldrb	r2, [r2, #16]
 8006d74:	f107 0108 	add.w	r1, r7, #8
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
 8006d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d7e:	e077      	b.n	8006e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fab1 	bl	80072ea <USBD_CtlError>
            err++;
 8006d88:	7afb      	ldrb	r3, [r7, #11]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d8e:	e06f      	b.n	8006e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	7c12      	ldrb	r2, [r2, #16]
 8006da8:	f107 0108 	add.w	r1, r7, #8
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006db2:	e05d      	b.n	8006e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa97 	bl	80072ea <USBD_CtlError>
            err++;
 8006dbc:	7afb      	ldrb	r3, [r7, #11]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006dc2:	e055      	b.n	8006e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	7c12      	ldrb	r2, [r2, #16]
 8006ddc:	f107 0108 	add.w	r1, r7, #8
 8006de0:	4610      	mov	r0, r2
 8006de2:	4798      	blx	r3
 8006de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006de6:	e043      	b.n	8006e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa7d 	bl	80072ea <USBD_CtlError>
            err++;
 8006df0:	7afb      	ldrb	r3, [r7, #11]
 8006df2:	3301      	adds	r3, #1
 8006df4:	72fb      	strb	r3, [r7, #11]
          break;
 8006df6:	e03b      	b.n	8006e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	7c12      	ldrb	r2, [r2, #16]
 8006e10:	f107 0108 	add.w	r1, r7, #8
 8006e14:	4610      	mov	r0, r2
 8006e16:	4798      	blx	r3
 8006e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e1a:	e029      	b.n	8006e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fa63 	bl	80072ea <USBD_CtlError>
            err++;
 8006e24:	7afb      	ldrb	r3, [r7, #11]
 8006e26:	3301      	adds	r3, #1
 8006e28:	72fb      	strb	r3, [r7, #11]
          break;
 8006e2a:	e021      	b.n	8006e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	7c12      	ldrb	r2, [r2, #16]
 8006e44:	f107 0108 	add.w	r1, r7, #8
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
 8006e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e4e:	e00f      	b.n	8006e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fa49 	bl	80072ea <USBD_CtlError>
            err++;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e5e:	e007      	b.n	8006e70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa41 	bl	80072ea <USBD_CtlError>
          err++;
 8006e68:	7afb      	ldrb	r3, [r7, #11]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e6e:	bf00      	nop
      }
      break;
 8006e70:	e037      	b.n	8006ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	7c1b      	ldrb	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d109      	bne.n	8006e8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e82:	f107 0208 	add.w	r2, r7, #8
 8006e86:	4610      	mov	r0, r2
 8006e88:	4798      	blx	r3
 8006e8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e8c:	e029      	b.n	8006ee2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fa2a 	bl	80072ea <USBD_CtlError>
        err++;
 8006e96:	7afb      	ldrb	r3, [r7, #11]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e9c:	e021      	b.n	8006ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7c1b      	ldrb	r3, [r3, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10d      	bne.n	8006ec2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	f107 0208 	add.w	r2, r7, #8
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4798      	blx	r3
 8006eb6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	2207      	movs	r2, #7
 8006ebe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ec0:	e00f      	b.n	8006ee2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa10 	bl	80072ea <USBD_CtlError>
        err++;
 8006eca:	7afb      	ldrb	r3, [r7, #11]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	72fb      	strb	r3, [r7, #11]
      break;
 8006ed0:	e007      	b.n	8006ee2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fa08 	bl	80072ea <USBD_CtlError>
      err++;
 8006eda:	7afb      	ldrb	r3, [r7, #11]
 8006edc:	3301      	adds	r3, #1
 8006ede:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee0:	bf00      	nop
  }

  if (err != 0U)
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d11e      	bne.n	8006f26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	88db      	ldrh	r3, [r3, #6]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d016      	beq.n	8006f1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ef0:	893b      	ldrh	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00e      	beq.n	8006f14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	88da      	ldrh	r2, [r3, #6]
 8006efa:	893b      	ldrh	r3, [r7, #8]
 8006efc:	4293      	cmp	r3, r2
 8006efe:	bf28      	it	cs
 8006f00:	4613      	movcs	r3, r2
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f06:	893b      	ldrh	r3, [r7, #8]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fa5d 	bl	80073cc <USBD_CtlSendData>
 8006f12:	e009      	b.n	8006f28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f9e7 	bl	80072ea <USBD_CtlError>
 8006f1c:	e004      	b.n	8006f28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa91 	bl	8007446 <USBD_CtlSendStatus>
 8006f24:	e000      	b.n	8006f28 <USBD_GetDescriptor+0x2cc>
    return;
 8006f26:	bf00      	nop
  }
}
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop

08006f30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	889b      	ldrh	r3, [r3, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d131      	bne.n	8006fa6 <USBD_SetAddress+0x76>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	88db      	ldrh	r3, [r3, #6]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d12d      	bne.n	8006fa6 <USBD_SetAddress+0x76>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	885b      	ldrh	r3, [r3, #2]
 8006f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f50:	d829      	bhi.n	8006fa6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	885b      	ldrh	r3, [r3, #2]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d104      	bne.n	8006f74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9bc 	bl	80072ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f72:	e01d      	b.n	8006fb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	7bfa      	ldrb	r2, [r7, #15]
 8006f78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fe27 	bl	8007bd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa5d 	bl	8007446 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9a:	e009      	b.n	8006fb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa4:	e004      	b.n	8006fb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f99e 	bl	80072ea <USBD_CtlError>
  }
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	885b      	ldrh	r3, [r3, #2]
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	4b4e      	ldr	r3, [pc, #312]	; (8007108 <USBD_SetConfig+0x150>)
 8006fce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fd0:	4b4d      	ldr	r3, [pc, #308]	; (8007108 <USBD_SetConfig+0x150>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d905      	bls.n	8006fe4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f985 	bl	80072ea <USBD_CtlError>
    return USBD_FAIL;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e08c      	b.n	80070fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d002      	beq.n	8006ff6 <USBD_SetConfig+0x3e>
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d029      	beq.n	8007048 <USBD_SetConfig+0x90>
 8006ff4:	e075      	b.n	80070e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ff6:	4b44      	ldr	r3, [pc, #272]	; (8007108 <USBD_SetConfig+0x150>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d020      	beq.n	8007040 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006ffe:	4b42      	ldr	r3, [pc, #264]	; (8007108 <USBD_SetConfig+0x150>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007008:	4b3f      	ldr	r3, [pc, #252]	; (8007108 <USBD_SetConfig+0x150>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fe ffe7 	bl	8005fe2 <USBD_SetClassConfig>
 8007014:	4603      	mov	r3, r0
 8007016:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d008      	beq.n	8007030 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f962 	bl	80072ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800702e:	e065      	b.n	80070fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fa08 	bl	8007446 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2203      	movs	r2, #3
 800703a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800703e:	e05d      	b.n	80070fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fa00 	bl	8007446 <USBD_CtlSendStatus>
      break;
 8007046:	e059      	b.n	80070fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007048:	4b2f      	ldr	r3, [pc, #188]	; (8007108 <USBD_SetConfig+0x150>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d112      	bne.n	8007076 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007058:	4b2b      	ldr	r3, [pc, #172]	; (8007108 <USBD_SetConfig+0x150>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007062:	4b29      	ldr	r3, [pc, #164]	; (8007108 <USBD_SetConfig+0x150>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7fe ffd6 	bl	800601a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9e9 	bl	8007446 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007074:	e042      	b.n	80070fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007076:	4b24      	ldr	r3, [pc, #144]	; (8007108 <USBD_SetConfig+0x150>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d02a      	beq.n	80070da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	b2db      	uxtb	r3, r3
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7fe ffc4 	bl	800601a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007092:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <USBD_SetConfig+0x150>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800709c:	4b1a      	ldr	r3, [pc, #104]	; (8007108 <USBD_SetConfig+0x150>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7fe ff9d 	bl	8005fe2 <USBD_SetClassConfig>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00f      	beq.n	80070d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f918 	bl	80072ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fe ffa9 	bl	800601a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070d0:	e014      	b.n	80070fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f9b7 	bl	8007446 <USBD_CtlSendStatus>
      break;
 80070d8:	e010      	b.n	80070fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f9b3 	bl	8007446 <USBD_CtlSendStatus>
      break;
 80070e0:	e00c      	b.n	80070fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f900 	bl	80072ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070ea:	4b07      	ldr	r3, [pc, #28]	; (8007108 <USBD_SetConfig+0x150>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7fe ff92 	bl	800601a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80070f6:	2303      	movs	r3, #3
 80070f8:	73fb      	strb	r3, [r7, #15]
      break;
 80070fa:	bf00      	nop
  }

  return ret;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000188 	.word	0x20000188

0800710c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	88db      	ldrh	r3, [r3, #6]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d004      	beq.n	8007128 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f8e2 	bl	80072ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007126:	e023      	b.n	8007170 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	dc02      	bgt.n	800713a <USBD_GetConfig+0x2e>
 8007134:	2b00      	cmp	r3, #0
 8007136:	dc03      	bgt.n	8007140 <USBD_GetConfig+0x34>
 8007138:	e015      	b.n	8007166 <USBD_GetConfig+0x5a>
 800713a:	2b03      	cmp	r3, #3
 800713c:	d00b      	beq.n	8007156 <USBD_GetConfig+0x4a>
 800713e:	e012      	b.n	8007166 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3308      	adds	r3, #8
 800714a:	2201      	movs	r2, #1
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f93c 	bl	80073cc <USBD_CtlSendData>
        break;
 8007154:	e00c      	b.n	8007170 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3304      	adds	r3, #4
 800715a:	2201      	movs	r2, #1
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f934 	bl	80073cc <USBD_CtlSendData>
        break;
 8007164:	e004      	b.n	8007170 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f8be 	bl	80072ea <USBD_CtlError>
        break;
 800716e:	bf00      	nop
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007188:	b2db      	uxtb	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	2b02      	cmp	r3, #2
 800718e:	d81e      	bhi.n	80071ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	88db      	ldrh	r3, [r3, #6]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d004      	beq.n	80071a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f8a5 	bl	80072ea <USBD_CtlError>
        break;
 80071a0:	e01a      	b.n	80071d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f043 0202 	orr.w	r2, r3, #2
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	330c      	adds	r3, #12
 80071c2:	2202      	movs	r2, #2
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f900 	bl	80073cc <USBD_CtlSendData>
      break;
 80071cc:	e004      	b.n	80071d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f88a 	bl	80072ea <USBD_CtlError>
      break;
 80071d6:	bf00      	nop
  }
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	885b      	ldrh	r3, [r3, #2]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d107      	bne.n	8007202 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f923 	bl	8007446 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007200:	e013      	b.n	800722a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d10b      	bne.n	8007222 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	889b      	ldrh	r3, [r3, #4]
 800720e:	0a1b      	lsrs	r3, r3, #8
 8007210:	b29b      	uxth	r3, r3
 8007212:	b2da      	uxtb	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f913 	bl	8007446 <USBD_CtlSendStatus>
}
 8007220:	e003      	b.n	800722a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f860 	bl	80072ea <USBD_CtlError>
}
 800722a:	bf00      	nop
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007242:	b2db      	uxtb	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	2b02      	cmp	r3, #2
 8007248:	d80b      	bhi.n	8007262 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	885b      	ldrh	r3, [r3, #2]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d10c      	bne.n	800726c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8f3 	bl	8007446 <USBD_CtlSendStatus>
      }
      break;
 8007260:	e004      	b.n	800726c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f840 	bl	80072ea <USBD_CtlError>
      break;
 800726a:	e000      	b.n	800726e <USBD_ClrFeature+0x3c>
      break;
 800726c:	bf00      	nop
  }
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	781a      	ldrb	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3301      	adds	r3, #1
 800729e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7ff fa41 	bl	8006728 <SWAPBYTE>
 80072a6:	4603      	mov	r3, r0
 80072a8:	461a      	mov	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7ff fa34 	bl	8006728 <SWAPBYTE>
 80072c0:	4603      	mov	r3, r0
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3301      	adds	r3, #1
 80072d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff fa27 	bl	8006728 <SWAPBYTE>
 80072da:	4603      	mov	r3, r0
 80072dc:	461a      	mov	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	80da      	strh	r2, [r3, #6]
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80072f4:	2180      	movs	r1, #128	; 0x80
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fc02 	bl	8007b00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80072fc:	2100      	movs	r1, #0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fbfe 	bl	8007b00 <USBD_LL_StallEP>
}
 8007304:	bf00      	nop
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d036      	beq.n	8007390 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007326:	6938      	ldr	r0, [r7, #16]
 8007328:	f000 f836 	bl	8007398 <USBD_GetLen>
 800732c:	4603      	mov	r3, r0
 800732e:	3301      	adds	r3, #1
 8007330:	b29b      	uxth	r3, r3
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	4413      	add	r3, r2
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	7812      	ldrb	r2, [r2, #0]
 8007344:	701a      	strb	r2, [r3, #0]
  idx++;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	3301      	adds	r3, #1
 800734a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800734c:	7dfb      	ldrb	r3, [r7, #23]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	4413      	add	r3, r2
 8007352:	2203      	movs	r2, #3
 8007354:	701a      	strb	r2, [r3, #0]
  idx++;
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	3301      	adds	r3, #1
 800735a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800735c:	e013      	b.n	8007386 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	4413      	add	r3, r2
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	7812      	ldrb	r2, [r2, #0]
 8007368:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	3301      	adds	r3, #1
 800736e:	613b      	str	r3, [r7, #16]
    idx++;
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	3301      	adds	r3, #1
 8007374:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	4413      	add	r3, r2
 800737c:	2200      	movs	r2, #0
 800737e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	3301      	adds	r3, #1
 8007384:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e7      	bne.n	800735e <USBD_GetString+0x52>
 800738e:	e000      	b.n	8007392 <USBD_GetString+0x86>
    return;
 8007390:	bf00      	nop
  }
}
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073a8:	e005      	b.n	80073b6 <USBD_GetLen+0x1e>
  {
    len++;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	3301      	adds	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	3301      	adds	r3, #1
 80073b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f5      	bne.n	80073aa <USBD_GetLen+0x12>
  }

  return len;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2202      	movs	r2, #2
 80073dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	2100      	movs	r1, #0
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 fc0d 	bl	8007c12 <USBD_LL_Transmit>

  return USBD_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	2100      	movs	r1, #0
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 fbfc 	bl	8007c12 <USBD_LL_Transmit>

  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	2100      	movs	r1, #0
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 fc0c 	bl	8007c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2204      	movs	r2, #4
 8007452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007456:	2300      	movs	r3, #0
 8007458:	2200      	movs	r2, #0
 800745a:	2100      	movs	r1, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fbd8 	bl	8007c12 <USBD_LL_Transmit>

  return USBD_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2205      	movs	r2, #5
 8007478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800747c:	2300      	movs	r3, #0
 800747e:	2200      	movs	r2, #0
 8007480:	2100      	movs	r1, #0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fbe6 	bl	8007c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007498:	2200      	movs	r2, #0
 800749a:	490e      	ldr	r1, [pc, #56]	; (80074d4 <MX_USB_DEVICE_Init+0x40>)
 800749c:	480e      	ldr	r0, [pc, #56]	; (80074d8 <MX_USB_DEVICE_Init+0x44>)
 800749e:	f7fe fd23 	bl	8005ee8 <USBD_Init>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074a8:	f7fa f814 	bl	80014d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80074ac:	490b      	ldr	r1, [pc, #44]	; (80074dc <MX_USB_DEVICE_Init+0x48>)
 80074ae:	480a      	ldr	r0, [pc, #40]	; (80074d8 <MX_USB_DEVICE_Init+0x44>)
 80074b0:	f7fe fd4a 	bl	8005f48 <USBD_RegisterClass>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074ba:	f7fa f80b 	bl	80014d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074be:	4806      	ldr	r0, [pc, #24]	; (80074d8 <MX_USB_DEVICE_Init+0x44>)
 80074c0:	f7fe fd78 	bl	8005fb4 <USBD_Start>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80074ca:	f7fa f803 	bl	80014d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074ce:	bf00      	nop
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200000cc 	.word	0x200000cc
 80074d8:	2000018c 	.word	0x2000018c
 80074dc:	2000000c 	.word	0x2000000c

080074e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	6039      	str	r1, [r7, #0]
 80074ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2212      	movs	r2, #18
 80074f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80074f2:	4b03      	ldr	r3, [pc, #12]	; (8007500 <USBD_FS_DeviceDescriptor+0x20>)
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	200000e8 	.word	0x200000e8

08007504 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	6039      	str	r1, [r7, #0]
 800750e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2204      	movs	r2, #4
 8007514:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007516:	4b03      	ldr	r3, [pc, #12]	; (8007524 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	200000fc 	.word	0x200000fc

08007528 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	6039      	str	r1, [r7, #0]
 8007532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	4907      	ldr	r1, [pc, #28]	; (800755c <USBD_FS_ProductStrDescriptor+0x34>)
 800753e:	4808      	ldr	r0, [pc, #32]	; (8007560 <USBD_FS_ProductStrDescriptor+0x38>)
 8007540:	f7ff fee4 	bl	800730c <USBD_GetString>
 8007544:	e004      	b.n	8007550 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	4904      	ldr	r1, [pc, #16]	; (800755c <USBD_FS_ProductStrDescriptor+0x34>)
 800754a:	4805      	ldr	r0, [pc, #20]	; (8007560 <USBD_FS_ProductStrDescriptor+0x38>)
 800754c:	f7ff fede 	bl	800730c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007550:	4b02      	ldr	r3, [pc, #8]	; (800755c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000468 	.word	0x20000468
 8007560:	08008eb8 	.word	0x08008eb8

08007564 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	4904      	ldr	r1, [pc, #16]	; (8007584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007574:	4804      	ldr	r0, [pc, #16]	; (8007588 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007576:	f7ff fec9 	bl	800730c <USBD_GetString>
  return USBD_StrDesc;
 800757a:	4b02      	ldr	r3, [pc, #8]	; (8007584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000468 	.word	0x20000468
 8007588:	08008ed0 	.word	0x08008ed0

0800758c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	6039      	str	r1, [r7, #0]
 8007596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	221a      	movs	r2, #26
 800759c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800759e:	f000 f843 	bl	8007628 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075a2:	4b02      	ldr	r3, [pc, #8]	; (80075ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000100 	.word	0x20000100

080075b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	6039      	str	r1, [r7, #0]
 80075ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075bc:	79fb      	ldrb	r3, [r7, #7]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d105      	bne.n	80075ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	4907      	ldr	r1, [pc, #28]	; (80075e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075c6:	4808      	ldr	r0, [pc, #32]	; (80075e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075c8:	f7ff fea0 	bl	800730c <USBD_GetString>
 80075cc:	e004      	b.n	80075d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	4904      	ldr	r1, [pc, #16]	; (80075e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075d2:	4805      	ldr	r0, [pc, #20]	; (80075e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075d4:	f7ff fe9a 	bl	800730c <USBD_GetString>
  }
  return USBD_StrDesc;
 80075d8:	4b02      	ldr	r3, [pc, #8]	; (80075e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20000468 	.word	0x20000468
 80075e8:	08008ee4 	.word	0x08008ee4

080075ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	6039      	str	r1, [r7, #0]
 80075f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d105      	bne.n	800760a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	4907      	ldr	r1, [pc, #28]	; (8007620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007602:	4808      	ldr	r0, [pc, #32]	; (8007624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007604:	f7ff fe82 	bl	800730c <USBD_GetString>
 8007608:	e004      	b.n	8007614 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	4904      	ldr	r1, [pc, #16]	; (8007620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800760e:	4805      	ldr	r0, [pc, #20]	; (8007624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007610:	f7ff fe7c 	bl	800730c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007614:	4b02      	ldr	r3, [pc, #8]	; (8007620 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000468 	.word	0x20000468
 8007624:	08008ef0 	.word	0x08008ef0

08007628 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <Get_SerialNum+0x44>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007634:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <Get_SerialNum+0x48>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800763a:	4b0e      	ldr	r3, [pc, #56]	; (8007674 <Get_SerialNum+0x4c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4413      	add	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800764e:	2208      	movs	r2, #8
 8007650:	4909      	ldr	r1, [pc, #36]	; (8007678 <Get_SerialNum+0x50>)
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 f814 	bl	8007680 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007658:	2204      	movs	r2, #4
 800765a:	4908      	ldr	r1, [pc, #32]	; (800767c <Get_SerialNum+0x54>)
 800765c:	68b8      	ldr	r0, [r7, #8]
 800765e:	f000 f80f 	bl	8007680 <IntToUnicode>
  }
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	1fff7a10 	.word	0x1fff7a10
 8007670:	1fff7a14 	.word	0x1fff7a14
 8007674:	1fff7a18 	.word	0x1fff7a18
 8007678:	20000102 	.word	0x20000102
 800767c:	20000112 	.word	0x20000112

08007680 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007692:	2300      	movs	r3, #0
 8007694:	75fb      	strb	r3, [r7, #23]
 8007696:	e027      	b.n	80076e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	0f1b      	lsrs	r3, r3, #28
 800769c:	2b09      	cmp	r3, #9
 800769e:	d80b      	bhi.n	80076b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	0f1b      	lsrs	r3, r3, #28
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	4619      	mov	r1, r3
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	440b      	add	r3, r1
 80076b0:	3230      	adds	r2, #48	; 0x30
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	e00a      	b.n	80076ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	0f1b      	lsrs	r3, r3, #28
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4619      	mov	r1, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	440b      	add	r3, r1
 80076c8:	3237      	adds	r2, #55	; 0x37
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	3301      	adds	r3, #1
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	4413      	add	r3, r2
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	3301      	adds	r3, #1
 80076e6:	75fb      	strb	r3, [r7, #23]
 80076e8:	7dfa      	ldrb	r2, [r7, #23]
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d3d3      	bcc.n	8007698 <IntToUnicode+0x18>
  }
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
	...

08007700 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08a      	sub	sp, #40	; 0x28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007708:	f107 0314 	add.w	r3, r7, #20
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	605a      	str	r2, [r3, #4]
 8007712:	609a      	str	r2, [r3, #8]
 8007714:	60da      	str	r2, [r3, #12]
 8007716:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007720:	d147      	bne.n	80077b2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007722:	2300      	movs	r3, #0
 8007724:	613b      	str	r3, [r7, #16]
 8007726:	4b25      	ldr	r3, [pc, #148]	; (80077bc <HAL_PCD_MspInit+0xbc>)
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	4a24      	ldr	r2, [pc, #144]	; (80077bc <HAL_PCD_MspInit+0xbc>)
 800772c:	f043 0301 	orr.w	r3, r3, #1
 8007730:	6313      	str	r3, [r2, #48]	; 0x30
 8007732:	4b22      	ldr	r3, [pc, #136]	; (80077bc <HAL_PCD_MspInit+0xbc>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	613b      	str	r3, [r7, #16]
 800773c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800773e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007744:	2302      	movs	r3, #2
 8007746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007748:	2300      	movs	r3, #0
 800774a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800774c:	2303      	movs	r3, #3
 800774e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007750:	230a      	movs	r3, #10
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007754:	f107 0314 	add.w	r3, r7, #20
 8007758:	4619      	mov	r1, r3
 800775a:	4819      	ldr	r0, [pc, #100]	; (80077c0 <HAL_PCD_MspInit+0xc0>)
 800775c:	f7fa f950 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007766:	2300      	movs	r3, #0
 8007768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800776e:	f107 0314 	add.w	r3, r7, #20
 8007772:	4619      	mov	r1, r3
 8007774:	4812      	ldr	r0, [pc, #72]	; (80077c0 <HAL_PCD_MspInit+0xc0>)
 8007776:	f7fa f943 	bl	8001a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800777a:	4b10      	ldr	r3, [pc, #64]	; (80077bc <HAL_PCD_MspInit+0xbc>)
 800777c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777e:	4a0f      	ldr	r2, [pc, #60]	; (80077bc <HAL_PCD_MspInit+0xbc>)
 8007780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007784:	6353      	str	r3, [r2, #52]	; 0x34
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	4b0c      	ldr	r3, [pc, #48]	; (80077bc <HAL_PCD_MspInit+0xbc>)
 800778c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778e:	4a0b      	ldr	r2, [pc, #44]	; (80077bc <HAL_PCD_MspInit+0xbc>)
 8007790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007794:	6453      	str	r3, [r2, #68]	; 0x44
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <HAL_PCD_MspInit+0xbc>)
 8007798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077a2:	2200      	movs	r2, #0
 80077a4:	2100      	movs	r1, #0
 80077a6:	2043      	movs	r0, #67	; 0x43
 80077a8:	f7fa f8f3 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077ac:	2043      	movs	r0, #67	; 0x43
 80077ae:	f7fa f90c 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077b2:	bf00      	nop
 80077b4:	3728      	adds	r7, #40	; 0x28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40023800 	.word	0x40023800
 80077c0:	40020000 	.word	0x40020000

080077c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f7fe fc37 	bl	800604e <USBD_LL_SetupStage>
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80077fa:	78fa      	ldrb	r2, [r7, #3]
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	4613      	mov	r3, r2
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	440b      	add	r3, r1
 8007808:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	4619      	mov	r1, r3
 8007812:	f7fe fc71 	bl	80060f8 <USBD_LL_DataOutStage>
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007830:	78fa      	ldrb	r2, [r7, #3]
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	4613      	mov	r3, r2
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	440b      	add	r3, r1
 800783e:	334c      	adds	r3, #76	; 0x4c
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	4619      	mov	r1, r3
 8007846:	f7fe fd0a 	bl	800625e <USBD_LL_DataInStage>
}
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007860:	4618      	mov	r0, r3
 8007862:	f7fe fe3e 	bl	80064e2 <USBD_LL_SOF>
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007876:	2301      	movs	r3, #1
 8007878:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]
 8007886:	e008      	b.n	800789a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d102      	bne.n	8007896 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007890:	2301      	movs	r3, #1
 8007892:	73fb      	strb	r3, [r7, #15]
 8007894:	e001      	b.n	800789a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007896:	f7f9 fe1d 	bl	80014d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078a0:	7bfa      	ldrb	r2, [r7, #15]
 80078a2:	4611      	mov	r1, r2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe fdde 	bl	8006466 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe fd86 	bl	80063c2 <USBD_LL_Reset>
}
 80078b6:	bf00      	nop
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe fdd9 	bl	8006486 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	6812      	ldr	r2, [r2, #0]
 80078e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078e6:	f043 0301 	orr.w	r3, r3, #1
 80078ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <HAL_PCD_SuspendCallback+0x48>)
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	4a03      	ldr	r2, [pc, #12]	; (8007908 <HAL_PCD_SuspendCallback+0x48>)
 80078fa:	f043 0306 	orr.w	r3, r3, #6
 80078fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	e000ed00 	.word	0xe000ed00

0800790c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fdc9 	bl	80064b2 <USBD_LL_Resume>
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	460b      	mov	r3, r1
 8007932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800793a:	78fa      	ldrb	r2, [r7, #3]
 800793c:	4611      	mov	r1, r2
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe fe21 	bl	8006586 <USBD_LL_IsoOUTIncomplete>
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800795e:	78fa      	ldrb	r2, [r7, #3]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fddd 	bl	8006522 <USBD_LL_IsoINIncomplete>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fe33 	bl	80065ea <USBD_LL_DevConnected>
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe fe30 	bl	8006600 <USBD_LL_DevDisconnected>
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d13c      	bne.n	8007a32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079b8:	4a20      	ldr	r2, [pc, #128]	; (8007a3c <USBD_LL_Init+0x94>)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a1e      	ldr	r2, [pc, #120]	; (8007a3c <USBD_LL_Init+0x94>)
 80079c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079c8:	4b1c      	ldr	r3, [pc, #112]	; (8007a3c <USBD_LL_Init+0x94>)
 80079ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079d0:	4b1a      	ldr	r3, [pc, #104]	; (8007a3c <USBD_LL_Init+0x94>)
 80079d2:	2204      	movs	r2, #4
 80079d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079d6:	4b19      	ldr	r3, [pc, #100]	; (8007a3c <USBD_LL_Init+0x94>)
 80079d8:	2202      	movs	r2, #2
 80079da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079dc:	4b17      	ldr	r3, [pc, #92]	; (8007a3c <USBD_LL_Init+0x94>)
 80079de:	2200      	movs	r2, #0
 80079e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079e2:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <USBD_LL_Init+0x94>)
 80079e4:	2202      	movs	r2, #2
 80079e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80079e8:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <USBD_LL_Init+0x94>)
 80079ea:	2201      	movs	r2, #1
 80079ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <USBD_LL_Init+0x94>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80079f4:	4b11      	ldr	r3, [pc, #68]	; (8007a3c <USBD_LL_Init+0x94>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80079fa:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <USBD_LL_Init+0x94>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a00:	4b0e      	ldr	r3, [pc, #56]	; (8007a3c <USBD_LL_Init+0x94>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a06:	480d      	ldr	r0, [pc, #52]	; (8007a3c <USBD_LL_Init+0x94>)
 8007a08:	f7fa f9f2 	bl	8001df0 <HAL_PCD_Init>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a12:	f7f9 fd5f 	bl	80014d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a16:	2180      	movs	r1, #128	; 0x80
 8007a18:	4808      	ldr	r0, [pc, #32]	; (8007a3c <USBD_LL_Init+0x94>)
 8007a1a:	f7fb fc32 	bl	8003282 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a1e:	2240      	movs	r2, #64	; 0x40
 8007a20:	2100      	movs	r1, #0
 8007a22:	4806      	ldr	r0, [pc, #24]	; (8007a3c <USBD_LL_Init+0x94>)
 8007a24:	f7fb fbe6 	bl	80031f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a28:	2280      	movs	r2, #128	; 0x80
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4803      	ldr	r0, [pc, #12]	; (8007a3c <USBD_LL_Init+0x94>)
 8007a2e:	f7fb fbe1 	bl	80031f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20000668 	.word	0x20000668

08007a40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fa fae7 	bl	800202a <HAL_PCD_Start>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 f930 	bl	8007cc8 <USBD_Get_USB_Status>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	4608      	mov	r0, r1
 8007a80:	4611      	mov	r1, r2
 8007a82:	461a      	mov	r2, r3
 8007a84:	4603      	mov	r3, r0
 8007a86:	70fb      	strb	r3, [r7, #3]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70bb      	strb	r3, [r7, #2]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a9e:	78bb      	ldrb	r3, [r7, #2]
 8007aa0:	883a      	ldrh	r2, [r7, #0]
 8007aa2:	78f9      	ldrb	r1, [r7, #3]
 8007aa4:	f7fa ffb8 	bl	8002a18 <HAL_PCD_EP_Open>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f90a 	bl	8007cc8 <USBD_Get_USB_Status>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fb f801 	bl	8002ae8 <HAL_PCD_EP_Close>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 f8eb 	bl	8007cc8 <USBD_Get_USB_Status>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fb f8c1 	bl	8002ca6 <HAL_PCD_EP_SetStall>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f8cc 	bl	8007cc8 <USBD_Get_USB_Status>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fb f906 	bl	8002d6e <HAL_PCD_EP_ClrStall>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 f8ad 	bl	8007cc8 <USBD_Get_USB_Status>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da0b      	bge.n	8007bb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	333e      	adds	r3, #62	; 0x3e
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	e00b      	b.n	8007bc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007bc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fa feeb 	bl	80029ce <HAL_PCD_SetAddress>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f862 	bl	8007cc8 <USBD_Get_USB_Status>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b086      	sub	sp, #24
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c30:	7af9      	ldrb	r1, [r7, #11]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	f7fa ffec 	bl	8002c12 <HAL_PCD_EP_Transmit>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 f841 	bl	8007cc8 <USBD_Get_USB_Status>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	607a      	str	r2, [r7, #4]
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	460b      	mov	r3, r1
 8007c62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c72:	7af9      	ldrb	r1, [r7, #11]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	f7fa ff80 	bl	8002b7c <HAL_PCD_EP_Receive>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 f820 	bl	8007cc8 <USBD_Get_USB_Status>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ca0:	4b03      	ldr	r3, [pc, #12]	; (8007cb0 <USBD_static_malloc+0x18>)
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	20000b74 	.word	0x20000b74

08007cb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d817      	bhi.n	8007d0c <USBD_Get_USB_Status+0x44>
 8007cdc:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <USBD_Get_USB_Status+0x1c>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007cf5 	.word	0x08007cf5
 8007ce8:	08007cfb 	.word	0x08007cfb
 8007cec:	08007d01 	.word	0x08007d01
 8007cf0:	08007d07 	.word	0x08007d07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf8:	e00b      	b.n	8007d12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8007cfe:	e008      	b.n	8007d12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d00:	2301      	movs	r3, #1
 8007d02:	73fb      	strb	r3, [r7, #15]
    break;
 8007d04:	e005      	b.n	8007d12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d06:	2303      	movs	r3, #3
 8007d08:	73fb      	strb	r3, [r7, #15]
    break;
 8007d0a:	e002      	b.n	8007d12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d10:	bf00      	nop
  }
  return usb_status;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <memset>:
 8007d20:	4402      	add	r2, r0
 8007d22:	4603      	mov	r3, r0
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d100      	bne.n	8007d2a <memset+0xa>
 8007d28:	4770      	bx	lr
 8007d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d2e:	e7f9      	b.n	8007d24 <memset+0x4>

08007d30 <__libc_init_array>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	4d0d      	ldr	r5, [pc, #52]	; (8007d68 <__libc_init_array+0x38>)
 8007d34:	4c0d      	ldr	r4, [pc, #52]	; (8007d6c <__libc_init_array+0x3c>)
 8007d36:	1b64      	subs	r4, r4, r5
 8007d38:	10a4      	asrs	r4, r4, #2
 8007d3a:	2600      	movs	r6, #0
 8007d3c:	42a6      	cmp	r6, r4
 8007d3e:	d109      	bne.n	8007d54 <__libc_init_array+0x24>
 8007d40:	4d0b      	ldr	r5, [pc, #44]	; (8007d70 <__libc_init_array+0x40>)
 8007d42:	4c0c      	ldr	r4, [pc, #48]	; (8007d74 <__libc_init_array+0x44>)
 8007d44:	f001 f8ac 	bl	8008ea0 <_init>
 8007d48:	1b64      	subs	r4, r4, r5
 8007d4a:	10a4      	asrs	r4, r4, #2
 8007d4c:	2600      	movs	r6, #0
 8007d4e:	42a6      	cmp	r6, r4
 8007d50:	d105      	bne.n	8007d5e <__libc_init_array+0x2e>
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
 8007d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d58:	4798      	blx	r3
 8007d5a:	3601      	adds	r6, #1
 8007d5c:	e7ee      	b.n	8007d3c <__libc_init_array+0xc>
 8007d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d62:	4798      	blx	r3
 8007d64:	3601      	adds	r6, #1
 8007d66:	e7f2      	b.n	8007d4e <__libc_init_array+0x1e>
 8007d68:	08009100 	.word	0x08009100
 8007d6c:	08009100 	.word	0x08009100
 8007d70:	08009100 	.word	0x08009100
 8007d74:	08009104 	.word	0x08009104

08007d78 <cos>:
 8007d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d7a:	ec53 2b10 	vmov	r2, r3, d0
 8007d7e:	4826      	ldr	r0, [pc, #152]	; (8007e18 <cos+0xa0>)
 8007d80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d84:	4281      	cmp	r1, r0
 8007d86:	dc06      	bgt.n	8007d96 <cos+0x1e>
 8007d88:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007e10 <cos+0x98>
 8007d8c:	b005      	add	sp, #20
 8007d8e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d92:	f000 b89d 	b.w	8007ed0 <__kernel_cos>
 8007d96:	4821      	ldr	r0, [pc, #132]	; (8007e1c <cos+0xa4>)
 8007d98:	4281      	cmp	r1, r0
 8007d9a:	dd09      	ble.n	8007db0 <cos+0x38>
 8007d9c:	ee10 0a10 	vmov	r0, s0
 8007da0:	4619      	mov	r1, r3
 8007da2:	f7f8 fb53 	bl	800044c <__aeabi_dsub>
 8007da6:	ec41 0b10 	vmov	d0, r0, r1
 8007daa:	b005      	add	sp, #20
 8007dac:	f85d fb04 	ldr.w	pc, [sp], #4
 8007db0:	4668      	mov	r0, sp
 8007db2:	f000 fa15 	bl	80081e0 <__ieee754_rem_pio2>
 8007db6:	f000 0003 	and.w	r0, r0, #3
 8007dba:	2801      	cmp	r0, #1
 8007dbc:	d00b      	beq.n	8007dd6 <cos+0x5e>
 8007dbe:	2802      	cmp	r0, #2
 8007dc0:	d016      	beq.n	8007df0 <cos+0x78>
 8007dc2:	b9e0      	cbnz	r0, 8007dfe <cos+0x86>
 8007dc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007dc8:	ed9d 0b00 	vldr	d0, [sp]
 8007dcc:	f000 f880 	bl	8007ed0 <__kernel_cos>
 8007dd0:	ec51 0b10 	vmov	r0, r1, d0
 8007dd4:	e7e7      	b.n	8007da6 <cos+0x2e>
 8007dd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007dda:	ed9d 0b00 	vldr	d0, [sp]
 8007dde:	f000 f93f 	bl	8008060 <__kernel_sin>
 8007de2:	ec53 2b10 	vmov	r2, r3, d0
 8007de6:	ee10 0a10 	vmov	r0, s0
 8007dea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007dee:	e7da      	b.n	8007da6 <cos+0x2e>
 8007df0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007df4:	ed9d 0b00 	vldr	d0, [sp]
 8007df8:	f000 f86a 	bl	8007ed0 <__kernel_cos>
 8007dfc:	e7f1      	b.n	8007de2 <cos+0x6a>
 8007dfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e02:	ed9d 0b00 	vldr	d0, [sp]
 8007e06:	2001      	movs	r0, #1
 8007e08:	f000 f92a 	bl	8008060 <__kernel_sin>
 8007e0c:	e7e0      	b.n	8007dd0 <cos+0x58>
 8007e0e:	bf00      	nop
	...
 8007e18:	3fe921fb 	.word	0x3fe921fb
 8007e1c:	7fefffff 	.word	0x7fefffff

08007e20 <sin>:
 8007e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e22:	ec53 2b10 	vmov	r2, r3, d0
 8007e26:	4828      	ldr	r0, [pc, #160]	; (8007ec8 <sin+0xa8>)
 8007e28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e2c:	4281      	cmp	r1, r0
 8007e2e:	dc07      	bgt.n	8007e40 <sin+0x20>
 8007e30:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007ec0 <sin+0xa0>
 8007e34:	2000      	movs	r0, #0
 8007e36:	b005      	add	sp, #20
 8007e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e3c:	f000 b910 	b.w	8008060 <__kernel_sin>
 8007e40:	4822      	ldr	r0, [pc, #136]	; (8007ecc <sin+0xac>)
 8007e42:	4281      	cmp	r1, r0
 8007e44:	dd09      	ble.n	8007e5a <sin+0x3a>
 8007e46:	ee10 0a10 	vmov	r0, s0
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	f7f8 fafe 	bl	800044c <__aeabi_dsub>
 8007e50:	ec41 0b10 	vmov	d0, r0, r1
 8007e54:	b005      	add	sp, #20
 8007e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e5a:	4668      	mov	r0, sp
 8007e5c:	f000 f9c0 	bl	80081e0 <__ieee754_rem_pio2>
 8007e60:	f000 0003 	and.w	r0, r0, #3
 8007e64:	2801      	cmp	r0, #1
 8007e66:	d00c      	beq.n	8007e82 <sin+0x62>
 8007e68:	2802      	cmp	r0, #2
 8007e6a:	d011      	beq.n	8007e90 <sin+0x70>
 8007e6c:	b9f0      	cbnz	r0, 8007eac <sin+0x8c>
 8007e6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e72:	ed9d 0b00 	vldr	d0, [sp]
 8007e76:	2001      	movs	r0, #1
 8007e78:	f000 f8f2 	bl	8008060 <__kernel_sin>
 8007e7c:	ec51 0b10 	vmov	r0, r1, d0
 8007e80:	e7e6      	b.n	8007e50 <sin+0x30>
 8007e82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e86:	ed9d 0b00 	vldr	d0, [sp]
 8007e8a:	f000 f821 	bl	8007ed0 <__kernel_cos>
 8007e8e:	e7f5      	b.n	8007e7c <sin+0x5c>
 8007e90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e94:	ed9d 0b00 	vldr	d0, [sp]
 8007e98:	2001      	movs	r0, #1
 8007e9a:	f000 f8e1 	bl	8008060 <__kernel_sin>
 8007e9e:	ec53 2b10 	vmov	r2, r3, d0
 8007ea2:	ee10 0a10 	vmov	r0, s0
 8007ea6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007eaa:	e7d1      	b.n	8007e50 <sin+0x30>
 8007eac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007eb0:	ed9d 0b00 	vldr	d0, [sp]
 8007eb4:	f000 f80c 	bl	8007ed0 <__kernel_cos>
 8007eb8:	e7f1      	b.n	8007e9e <sin+0x7e>
 8007eba:	bf00      	nop
 8007ebc:	f3af 8000 	nop.w
	...
 8007ec8:	3fe921fb 	.word	0x3fe921fb
 8007ecc:	7fefffff 	.word	0x7fefffff

08007ed0 <__kernel_cos>:
 8007ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	ec57 6b10 	vmov	r6, r7, d0
 8007ed8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007edc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007ee0:	ed8d 1b00 	vstr	d1, [sp]
 8007ee4:	da07      	bge.n	8007ef6 <__kernel_cos+0x26>
 8007ee6:	ee10 0a10 	vmov	r0, s0
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 fcee 	bl	80008cc <__aeabi_d2iz>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f000 8088 	beq.w	8008006 <__kernel_cos+0x136>
 8007ef6:	4632      	mov	r2, r6
 8007ef8:	463b      	mov	r3, r7
 8007efa:	4630      	mov	r0, r6
 8007efc:	4639      	mov	r1, r7
 8007efe:	f7f8 f977 	bl	80001f0 <__aeabi_dmul>
 8007f02:	4b51      	ldr	r3, [pc, #324]	; (8008048 <__kernel_cos+0x178>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	460d      	mov	r5, r1
 8007f0a:	f7f8 f971 	bl	80001f0 <__aeabi_dmul>
 8007f0e:	a340      	add	r3, pc, #256	; (adr r3, 8008010 <__kernel_cos+0x140>)
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	4682      	mov	sl, r0
 8007f16:	468b      	mov	fp, r1
 8007f18:	4620      	mov	r0, r4
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	f7f8 f968 	bl	80001f0 <__aeabi_dmul>
 8007f20:	a33d      	add	r3, pc, #244	; (adr r3, 8008018 <__kernel_cos+0x148>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 fa93 	bl	8000450 <__adddf3>
 8007f2a:	4622      	mov	r2, r4
 8007f2c:	462b      	mov	r3, r5
 8007f2e:	f7f8 f95f 	bl	80001f0 <__aeabi_dmul>
 8007f32:	a33b      	add	r3, pc, #236	; (adr r3, 8008020 <__kernel_cos+0x150>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 fa88 	bl	800044c <__aeabi_dsub>
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	462b      	mov	r3, r5
 8007f40:	f7f8 f956 	bl	80001f0 <__aeabi_dmul>
 8007f44:	a338      	add	r3, pc, #224	; (adr r3, 8008028 <__kernel_cos+0x158>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f7f8 fa81 	bl	8000450 <__adddf3>
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	f7f8 f94d 	bl	80001f0 <__aeabi_dmul>
 8007f56:	a336      	add	r3, pc, #216	; (adr r3, 8008030 <__kernel_cos+0x160>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f7f8 fa76 	bl	800044c <__aeabi_dsub>
 8007f60:	4622      	mov	r2, r4
 8007f62:	462b      	mov	r3, r5
 8007f64:	f7f8 f944 	bl	80001f0 <__aeabi_dmul>
 8007f68:	a333      	add	r3, pc, #204	; (adr r3, 8008038 <__kernel_cos+0x168>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f7f8 fa6f 	bl	8000450 <__adddf3>
 8007f72:	4622      	mov	r2, r4
 8007f74:	462b      	mov	r3, r5
 8007f76:	f7f8 f93b 	bl	80001f0 <__aeabi_dmul>
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	f7f8 f937 	bl	80001f0 <__aeabi_dmul>
 8007f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f86:	4604      	mov	r4, r0
 8007f88:	460d      	mov	r5, r1
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	f7f8 f92f 	bl	80001f0 <__aeabi_dmul>
 8007f92:	460b      	mov	r3, r1
 8007f94:	4602      	mov	r2, r0
 8007f96:	4629      	mov	r1, r5
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f7f8 fa57 	bl	800044c <__aeabi_dsub>
 8007f9e:	4b2b      	ldr	r3, [pc, #172]	; (800804c <__kernel_cos+0x17c>)
 8007fa0:	4598      	cmp	r8, r3
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460f      	mov	r7, r1
 8007fa6:	dc10      	bgt.n	8007fca <__kernel_cos+0xfa>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4650      	mov	r0, sl
 8007fae:	4659      	mov	r1, fp
 8007fb0:	f7f8 fa4c 	bl	800044c <__aeabi_dsub>
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4926      	ldr	r1, [pc, #152]	; (8008050 <__kernel_cos+0x180>)
 8007fb8:	4602      	mov	r2, r0
 8007fba:	2000      	movs	r0, #0
 8007fbc:	f7f8 fa46 	bl	800044c <__aeabi_dsub>
 8007fc0:	ec41 0b10 	vmov	d0, r0, r1
 8007fc4:	b003      	add	sp, #12
 8007fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fca:	4b22      	ldr	r3, [pc, #136]	; (8008054 <__kernel_cos+0x184>)
 8007fcc:	4920      	ldr	r1, [pc, #128]	; (8008050 <__kernel_cos+0x180>)
 8007fce:	4598      	cmp	r8, r3
 8007fd0:	bfcc      	ite	gt
 8007fd2:	4d21      	ldrgt	r5, [pc, #132]	; (8008058 <__kernel_cos+0x188>)
 8007fd4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007fd8:	2400      	movs	r4, #0
 8007fda:	4622      	mov	r2, r4
 8007fdc:	462b      	mov	r3, r5
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f7f8 fa34 	bl	800044c <__aeabi_dsub>
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	4680      	mov	r8, r0
 8007fe8:	4689      	mov	r9, r1
 8007fea:	462b      	mov	r3, r5
 8007fec:	4650      	mov	r0, sl
 8007fee:	4659      	mov	r1, fp
 8007ff0:	f7f8 fa2c 	bl	800044c <__aeabi_dsub>
 8007ff4:	4632      	mov	r2, r6
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	f7f8 fa28 	bl	800044c <__aeabi_dsub>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4640      	mov	r0, r8
 8008002:	4649      	mov	r1, r9
 8008004:	e7da      	b.n	8007fbc <__kernel_cos+0xec>
 8008006:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008040 <__kernel_cos+0x170>
 800800a:	e7db      	b.n	8007fc4 <__kernel_cos+0xf4>
 800800c:	f3af 8000 	nop.w
 8008010:	be8838d4 	.word	0xbe8838d4
 8008014:	bda8fae9 	.word	0xbda8fae9
 8008018:	bdb4b1c4 	.word	0xbdb4b1c4
 800801c:	3e21ee9e 	.word	0x3e21ee9e
 8008020:	809c52ad 	.word	0x809c52ad
 8008024:	3e927e4f 	.word	0x3e927e4f
 8008028:	19cb1590 	.word	0x19cb1590
 800802c:	3efa01a0 	.word	0x3efa01a0
 8008030:	16c15177 	.word	0x16c15177
 8008034:	3f56c16c 	.word	0x3f56c16c
 8008038:	5555554c 	.word	0x5555554c
 800803c:	3fa55555 	.word	0x3fa55555
 8008040:	00000000 	.word	0x00000000
 8008044:	3ff00000 	.word	0x3ff00000
 8008048:	3fe00000 	.word	0x3fe00000
 800804c:	3fd33332 	.word	0x3fd33332
 8008050:	3ff00000 	.word	0x3ff00000
 8008054:	3fe90000 	.word	0x3fe90000
 8008058:	3fd20000 	.word	0x3fd20000
 800805c:	00000000 	.word	0x00000000

08008060 <__kernel_sin>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	ed2d 8b04 	vpush	{d8-d9}
 8008068:	eeb0 8a41 	vmov.f32	s16, s2
 800806c:	eef0 8a61 	vmov.f32	s17, s3
 8008070:	ec55 4b10 	vmov	r4, r5, d0
 8008074:	b083      	sub	sp, #12
 8008076:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800807a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800807e:	9001      	str	r0, [sp, #4]
 8008080:	da06      	bge.n	8008090 <__kernel_sin+0x30>
 8008082:	ee10 0a10 	vmov	r0, s0
 8008086:	4629      	mov	r1, r5
 8008088:	f7f8 fc20 	bl	80008cc <__aeabi_d2iz>
 800808c:	2800      	cmp	r0, #0
 800808e:	d051      	beq.n	8008134 <__kernel_sin+0xd4>
 8008090:	4622      	mov	r2, r4
 8008092:	462b      	mov	r3, r5
 8008094:	4620      	mov	r0, r4
 8008096:	4629      	mov	r1, r5
 8008098:	f7f8 f8aa 	bl	80001f0 <__aeabi_dmul>
 800809c:	4682      	mov	sl, r0
 800809e:	468b      	mov	fp, r1
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4620      	mov	r0, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	f7f8 f8a2 	bl	80001f0 <__aeabi_dmul>
 80080ac:	a341      	add	r3, pc, #260	; (adr r3, 80081b4 <__kernel_sin+0x154>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	4680      	mov	r8, r0
 80080b4:	4689      	mov	r9, r1
 80080b6:	4650      	mov	r0, sl
 80080b8:	4659      	mov	r1, fp
 80080ba:	f7f8 f899 	bl	80001f0 <__aeabi_dmul>
 80080be:	a33f      	add	r3, pc, #252	; (adr r3, 80081bc <__kernel_sin+0x15c>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f7f8 f9c2 	bl	800044c <__aeabi_dsub>
 80080c8:	4652      	mov	r2, sl
 80080ca:	465b      	mov	r3, fp
 80080cc:	f7f8 f890 	bl	80001f0 <__aeabi_dmul>
 80080d0:	a33c      	add	r3, pc, #240	; (adr r3, 80081c4 <__kernel_sin+0x164>)
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	f7f8 f9bb 	bl	8000450 <__adddf3>
 80080da:	4652      	mov	r2, sl
 80080dc:	465b      	mov	r3, fp
 80080de:	f7f8 f887 	bl	80001f0 <__aeabi_dmul>
 80080e2:	a33a      	add	r3, pc, #232	; (adr r3, 80081cc <__kernel_sin+0x16c>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f9b0 	bl	800044c <__aeabi_dsub>
 80080ec:	4652      	mov	r2, sl
 80080ee:	465b      	mov	r3, fp
 80080f0:	f7f8 f87e 	bl	80001f0 <__aeabi_dmul>
 80080f4:	a337      	add	r3, pc, #220	; (adr r3, 80081d4 <__kernel_sin+0x174>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 f9a9 	bl	8000450 <__adddf3>
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	4606      	mov	r6, r0
 8008102:	460f      	mov	r7, r1
 8008104:	b9eb      	cbnz	r3, 8008142 <__kernel_sin+0xe2>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	4650      	mov	r0, sl
 800810c:	4659      	mov	r1, fp
 800810e:	f7f8 f86f 	bl	80001f0 <__aeabi_dmul>
 8008112:	a325      	add	r3, pc, #148	; (adr r3, 80081a8 <__kernel_sin+0x148>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 f998 	bl	800044c <__aeabi_dsub>
 800811c:	4642      	mov	r2, r8
 800811e:	464b      	mov	r3, r9
 8008120:	f7f8 f866 	bl	80001f0 <__aeabi_dmul>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4620      	mov	r0, r4
 800812a:	4629      	mov	r1, r5
 800812c:	f7f8 f990 	bl	8000450 <__adddf3>
 8008130:	4604      	mov	r4, r0
 8008132:	460d      	mov	r5, r1
 8008134:	ec45 4b10 	vmov	d0, r4, r5
 8008138:	b003      	add	sp, #12
 800813a:	ecbd 8b04 	vpop	{d8-d9}
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	4b1b      	ldr	r3, [pc, #108]	; (80081b0 <__kernel_sin+0x150>)
 8008144:	ec51 0b18 	vmov	r0, r1, d8
 8008148:	2200      	movs	r2, #0
 800814a:	f7f8 f851 	bl	80001f0 <__aeabi_dmul>
 800814e:	4632      	mov	r2, r6
 8008150:	ec41 0b19 	vmov	d9, r0, r1
 8008154:	463b      	mov	r3, r7
 8008156:	4640      	mov	r0, r8
 8008158:	4649      	mov	r1, r9
 800815a:	f7f8 f849 	bl	80001f0 <__aeabi_dmul>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	ec51 0b19 	vmov	r0, r1, d9
 8008166:	f7f8 f971 	bl	800044c <__aeabi_dsub>
 800816a:	4652      	mov	r2, sl
 800816c:	465b      	mov	r3, fp
 800816e:	f7f8 f83f 	bl	80001f0 <__aeabi_dmul>
 8008172:	ec53 2b18 	vmov	r2, r3, d8
 8008176:	f7f8 f969 	bl	800044c <__aeabi_dsub>
 800817a:	a30b      	add	r3, pc, #44	; (adr r3, 80081a8 <__kernel_sin+0x148>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	4606      	mov	r6, r0
 8008182:	460f      	mov	r7, r1
 8008184:	4640      	mov	r0, r8
 8008186:	4649      	mov	r1, r9
 8008188:	f7f8 f832 	bl	80001f0 <__aeabi_dmul>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4630      	mov	r0, r6
 8008192:	4639      	mov	r1, r7
 8008194:	f7f8 f95c 	bl	8000450 <__adddf3>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4620      	mov	r0, r4
 800819e:	4629      	mov	r1, r5
 80081a0:	f7f8 f954 	bl	800044c <__aeabi_dsub>
 80081a4:	e7c4      	b.n	8008130 <__kernel_sin+0xd0>
 80081a6:	bf00      	nop
 80081a8:	55555549 	.word	0x55555549
 80081ac:	3fc55555 	.word	0x3fc55555
 80081b0:	3fe00000 	.word	0x3fe00000
 80081b4:	5acfd57c 	.word	0x5acfd57c
 80081b8:	3de5d93a 	.word	0x3de5d93a
 80081bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80081c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80081c4:	57b1fe7d 	.word	0x57b1fe7d
 80081c8:	3ec71de3 	.word	0x3ec71de3
 80081cc:	19c161d5 	.word	0x19c161d5
 80081d0:	3f2a01a0 	.word	0x3f2a01a0
 80081d4:	1110f8a6 	.word	0x1110f8a6
 80081d8:	3f811111 	.word	0x3f811111
 80081dc:	00000000 	.word	0x00000000

080081e0 <__ieee754_rem_pio2>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	ed2d 8b02 	vpush	{d8}
 80081e8:	ec55 4b10 	vmov	r4, r5, d0
 80081ec:	4bca      	ldr	r3, [pc, #808]	; (8008518 <__ieee754_rem_pio2+0x338>)
 80081ee:	b08b      	sub	sp, #44	; 0x2c
 80081f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80081f4:	4598      	cmp	r8, r3
 80081f6:	4682      	mov	sl, r0
 80081f8:	9502      	str	r5, [sp, #8]
 80081fa:	dc08      	bgt.n	800820e <__ieee754_rem_pio2+0x2e>
 80081fc:	2200      	movs	r2, #0
 80081fe:	2300      	movs	r3, #0
 8008200:	ed80 0b00 	vstr	d0, [r0]
 8008204:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008208:	f04f 0b00 	mov.w	fp, #0
 800820c:	e028      	b.n	8008260 <__ieee754_rem_pio2+0x80>
 800820e:	4bc3      	ldr	r3, [pc, #780]	; (800851c <__ieee754_rem_pio2+0x33c>)
 8008210:	4598      	cmp	r8, r3
 8008212:	dc78      	bgt.n	8008306 <__ieee754_rem_pio2+0x126>
 8008214:	9b02      	ldr	r3, [sp, #8]
 8008216:	4ec2      	ldr	r6, [pc, #776]	; (8008520 <__ieee754_rem_pio2+0x340>)
 8008218:	2b00      	cmp	r3, #0
 800821a:	ee10 0a10 	vmov	r0, s0
 800821e:	a3b0      	add	r3, pc, #704	; (adr r3, 80084e0 <__ieee754_rem_pio2+0x300>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	4629      	mov	r1, r5
 8008226:	dd39      	ble.n	800829c <__ieee754_rem_pio2+0xbc>
 8008228:	f7f8 f910 	bl	800044c <__aeabi_dsub>
 800822c:	45b0      	cmp	r8, r6
 800822e:	4604      	mov	r4, r0
 8008230:	460d      	mov	r5, r1
 8008232:	d01b      	beq.n	800826c <__ieee754_rem_pio2+0x8c>
 8008234:	a3ac      	add	r3, pc, #688	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x308>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	f7f8 f907 	bl	800044c <__aeabi_dsub>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	e9ca 2300 	strd	r2, r3, [sl]
 8008246:	4620      	mov	r0, r4
 8008248:	4629      	mov	r1, r5
 800824a:	f7f8 f8ff 	bl	800044c <__aeabi_dsub>
 800824e:	a3a6      	add	r3, pc, #664	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x308>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f8 f8fa 	bl	800044c <__aeabi_dsub>
 8008258:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800825c:	f04f 0b01 	mov.w	fp, #1
 8008260:	4658      	mov	r0, fp
 8008262:	b00b      	add	sp, #44	; 0x2c
 8008264:	ecbd 8b02 	vpop	{d8}
 8008268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826c:	a3a0      	add	r3, pc, #640	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x310>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	f7f8 f8eb 	bl	800044c <__aeabi_dsub>
 8008276:	a3a0      	add	r3, pc, #640	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x318>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	4604      	mov	r4, r0
 800827e:	460d      	mov	r5, r1
 8008280:	f7f8 f8e4 	bl	800044c <__aeabi_dsub>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	e9ca 2300 	strd	r2, r3, [sl]
 800828c:	4620      	mov	r0, r4
 800828e:	4629      	mov	r1, r5
 8008290:	f7f8 f8dc 	bl	800044c <__aeabi_dsub>
 8008294:	a398      	add	r3, pc, #608	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x318>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	e7db      	b.n	8008254 <__ieee754_rem_pio2+0x74>
 800829c:	f7f8 f8d8 	bl	8000450 <__adddf3>
 80082a0:	45b0      	cmp	r8, r6
 80082a2:	4604      	mov	r4, r0
 80082a4:	460d      	mov	r5, r1
 80082a6:	d016      	beq.n	80082d6 <__ieee754_rem_pio2+0xf6>
 80082a8:	a38f      	add	r3, pc, #572	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x308>)
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f7f8 f8cf 	bl	8000450 <__adddf3>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	e9ca 2300 	strd	r2, r3, [sl]
 80082ba:	4620      	mov	r0, r4
 80082bc:	4629      	mov	r1, r5
 80082be:	f7f8 f8c5 	bl	800044c <__aeabi_dsub>
 80082c2:	a389      	add	r3, pc, #548	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x308>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	f7f8 f8c2 	bl	8000450 <__adddf3>
 80082cc:	f04f 3bff 	mov.w	fp, #4294967295
 80082d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80082d4:	e7c4      	b.n	8008260 <__ieee754_rem_pio2+0x80>
 80082d6:	a386      	add	r3, pc, #536	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x310>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f7f8 f8b8 	bl	8000450 <__adddf3>
 80082e0:	a385      	add	r3, pc, #532	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x318>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	4604      	mov	r4, r0
 80082e8:	460d      	mov	r5, r1
 80082ea:	f7f8 f8b1 	bl	8000450 <__adddf3>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	e9ca 2300 	strd	r2, r3, [sl]
 80082f6:	4620      	mov	r0, r4
 80082f8:	4629      	mov	r1, r5
 80082fa:	f7f8 f8a7 	bl	800044c <__aeabi_dsub>
 80082fe:	a37e      	add	r3, pc, #504	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x318>)
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	e7e0      	b.n	80082c8 <__ieee754_rem_pio2+0xe8>
 8008306:	4b87      	ldr	r3, [pc, #540]	; (8008524 <__ieee754_rem_pio2+0x344>)
 8008308:	4598      	cmp	r8, r3
 800830a:	f300 80d8 	bgt.w	80084be <__ieee754_rem_pio2+0x2de>
 800830e:	f000 f96d 	bl	80085ec <fabs>
 8008312:	ec55 4b10 	vmov	r4, r5, d0
 8008316:	ee10 0a10 	vmov	r0, s0
 800831a:	a379      	add	r3, pc, #484	; (adr r3, 8008500 <__ieee754_rem_pio2+0x320>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	4629      	mov	r1, r5
 8008322:	f7f7 ff65 	bl	80001f0 <__aeabi_dmul>
 8008326:	4b80      	ldr	r3, [pc, #512]	; (8008528 <__ieee754_rem_pio2+0x348>)
 8008328:	2200      	movs	r2, #0
 800832a:	f7f8 f891 	bl	8000450 <__adddf3>
 800832e:	f7f8 facd 	bl	80008cc <__aeabi_d2iz>
 8008332:	4683      	mov	fp, r0
 8008334:	f7f8 f9d8 	bl	80006e8 <__aeabi_i2d>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	ec43 2b18 	vmov	d8, r2, r3
 8008340:	a367      	add	r3, pc, #412	; (adr r3, 80084e0 <__ieee754_rem_pio2+0x300>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	f7f7 ff53 	bl	80001f0 <__aeabi_dmul>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	4620      	mov	r0, r4
 8008350:	4629      	mov	r1, r5
 8008352:	f7f8 f87b 	bl	800044c <__aeabi_dsub>
 8008356:	a364      	add	r3, pc, #400	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x308>)
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	4606      	mov	r6, r0
 800835e:	460f      	mov	r7, r1
 8008360:	ec51 0b18 	vmov	r0, r1, d8
 8008364:	f7f7 ff44 	bl	80001f0 <__aeabi_dmul>
 8008368:	f1bb 0f1f 	cmp.w	fp, #31
 800836c:	4604      	mov	r4, r0
 800836e:	460d      	mov	r5, r1
 8008370:	dc0d      	bgt.n	800838e <__ieee754_rem_pio2+0x1ae>
 8008372:	4b6e      	ldr	r3, [pc, #440]	; (800852c <__ieee754_rem_pio2+0x34c>)
 8008374:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837c:	4543      	cmp	r3, r8
 800837e:	d006      	beq.n	800838e <__ieee754_rem_pio2+0x1ae>
 8008380:	4622      	mov	r2, r4
 8008382:	462b      	mov	r3, r5
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f8 f860 	bl	800044c <__aeabi_dsub>
 800838c:	e00e      	b.n	80083ac <__ieee754_rem_pio2+0x1cc>
 800838e:	462b      	mov	r3, r5
 8008390:	4622      	mov	r2, r4
 8008392:	4630      	mov	r0, r6
 8008394:	4639      	mov	r1, r7
 8008396:	f7f8 f859 	bl	800044c <__aeabi_dsub>
 800839a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800839e:	9303      	str	r3, [sp, #12]
 80083a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083a4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	dc02      	bgt.n	80083b2 <__ieee754_rem_pio2+0x1d2>
 80083ac:	e9ca 0100 	strd	r0, r1, [sl]
 80083b0:	e039      	b.n	8008426 <__ieee754_rem_pio2+0x246>
 80083b2:	a34f      	add	r3, pc, #316	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x310>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	ec51 0b18 	vmov	r0, r1, d8
 80083bc:	f7f7 ff18 	bl	80001f0 <__aeabi_dmul>
 80083c0:	4604      	mov	r4, r0
 80083c2:	460d      	mov	r5, r1
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	4630      	mov	r0, r6
 80083ca:	4639      	mov	r1, r7
 80083cc:	f7f8 f83e 	bl	800044c <__aeabi_dsub>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4680      	mov	r8, r0
 80083d6:	4689      	mov	r9, r1
 80083d8:	4630      	mov	r0, r6
 80083da:	4639      	mov	r1, r7
 80083dc:	f7f8 f836 	bl	800044c <__aeabi_dsub>
 80083e0:	4622      	mov	r2, r4
 80083e2:	462b      	mov	r3, r5
 80083e4:	f7f8 f832 	bl	800044c <__aeabi_dsub>
 80083e8:	a343      	add	r3, pc, #268	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x318>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	4604      	mov	r4, r0
 80083f0:	460d      	mov	r5, r1
 80083f2:	ec51 0b18 	vmov	r0, r1, d8
 80083f6:	f7f7 fefb 	bl	80001f0 <__aeabi_dmul>
 80083fa:	4622      	mov	r2, r4
 80083fc:	462b      	mov	r3, r5
 80083fe:	f7f8 f825 	bl	800044c <__aeabi_dsub>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
 800840a:	4640      	mov	r0, r8
 800840c:	4649      	mov	r1, r9
 800840e:	f7f8 f81d 	bl	800044c <__aeabi_dsub>
 8008412:	9a03      	ldr	r2, [sp, #12]
 8008414:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b31      	cmp	r3, #49	; 0x31
 800841c:	dc24      	bgt.n	8008468 <__ieee754_rem_pio2+0x288>
 800841e:	e9ca 0100 	strd	r0, r1, [sl]
 8008422:	4646      	mov	r6, r8
 8008424:	464f      	mov	r7, r9
 8008426:	e9da 8900 	ldrd	r8, r9, [sl]
 800842a:	4630      	mov	r0, r6
 800842c:	4642      	mov	r2, r8
 800842e:	464b      	mov	r3, r9
 8008430:	4639      	mov	r1, r7
 8008432:	f7f8 f80b 	bl	800044c <__aeabi_dsub>
 8008436:	462b      	mov	r3, r5
 8008438:	4622      	mov	r2, r4
 800843a:	f7f8 f807 	bl	800044c <__aeabi_dsub>
 800843e:	9b02      	ldr	r3, [sp, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008446:	f6bf af0b 	bge.w	8008260 <__ieee754_rem_pio2+0x80>
 800844a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800844e:	f8ca 3004 	str.w	r3, [sl, #4]
 8008452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008456:	f8ca 8000 	str.w	r8, [sl]
 800845a:	f8ca 0008 	str.w	r0, [sl, #8]
 800845e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008462:	f1cb 0b00 	rsb	fp, fp, #0
 8008466:	e6fb      	b.n	8008260 <__ieee754_rem_pio2+0x80>
 8008468:	a327      	add	r3, pc, #156	; (adr r3, 8008508 <__ieee754_rem_pio2+0x328>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	ec51 0b18 	vmov	r0, r1, d8
 8008472:	f7f7 febd 	bl	80001f0 <__aeabi_dmul>
 8008476:	4604      	mov	r4, r0
 8008478:	460d      	mov	r5, r1
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4640      	mov	r0, r8
 8008480:	4649      	mov	r1, r9
 8008482:	f7f7 ffe3 	bl	800044c <__aeabi_dsub>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4606      	mov	r6, r0
 800848c:	460f      	mov	r7, r1
 800848e:	4640      	mov	r0, r8
 8008490:	4649      	mov	r1, r9
 8008492:	f7f7 ffdb 	bl	800044c <__aeabi_dsub>
 8008496:	4622      	mov	r2, r4
 8008498:	462b      	mov	r3, r5
 800849a:	f7f7 ffd7 	bl	800044c <__aeabi_dsub>
 800849e:	a31c      	add	r3, pc, #112	; (adr r3, 8008510 <__ieee754_rem_pio2+0x330>)
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	4604      	mov	r4, r0
 80084a6:	460d      	mov	r5, r1
 80084a8:	ec51 0b18 	vmov	r0, r1, d8
 80084ac:	f7f7 fea0 	bl	80001f0 <__aeabi_dmul>
 80084b0:	4622      	mov	r2, r4
 80084b2:	462b      	mov	r3, r5
 80084b4:	f7f7 ffca 	bl	800044c <__aeabi_dsub>
 80084b8:	4604      	mov	r4, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	e760      	b.n	8008380 <__ieee754_rem_pio2+0x1a0>
 80084be:	4b1c      	ldr	r3, [pc, #112]	; (8008530 <__ieee754_rem_pio2+0x350>)
 80084c0:	4598      	cmp	r8, r3
 80084c2:	dd37      	ble.n	8008534 <__ieee754_rem_pio2+0x354>
 80084c4:	ee10 2a10 	vmov	r2, s0
 80084c8:	462b      	mov	r3, r5
 80084ca:	4620      	mov	r0, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	f7f7 ffbd 	bl	800044c <__aeabi_dsub>
 80084d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084d6:	e9ca 0100 	strd	r0, r1, [sl]
 80084da:	e695      	b.n	8008208 <__ieee754_rem_pio2+0x28>
 80084dc:	f3af 8000 	nop.w
 80084e0:	54400000 	.word	0x54400000
 80084e4:	3ff921fb 	.word	0x3ff921fb
 80084e8:	1a626331 	.word	0x1a626331
 80084ec:	3dd0b461 	.word	0x3dd0b461
 80084f0:	1a600000 	.word	0x1a600000
 80084f4:	3dd0b461 	.word	0x3dd0b461
 80084f8:	2e037073 	.word	0x2e037073
 80084fc:	3ba3198a 	.word	0x3ba3198a
 8008500:	6dc9c883 	.word	0x6dc9c883
 8008504:	3fe45f30 	.word	0x3fe45f30
 8008508:	2e000000 	.word	0x2e000000
 800850c:	3ba3198a 	.word	0x3ba3198a
 8008510:	252049c1 	.word	0x252049c1
 8008514:	397b839a 	.word	0x397b839a
 8008518:	3fe921fb 	.word	0x3fe921fb
 800851c:	4002d97b 	.word	0x4002d97b
 8008520:	3ff921fb 	.word	0x3ff921fb
 8008524:	413921fb 	.word	0x413921fb
 8008528:	3fe00000 	.word	0x3fe00000
 800852c:	08008f20 	.word	0x08008f20
 8008530:	7fefffff 	.word	0x7fefffff
 8008534:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008538:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800853c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008540:	4620      	mov	r0, r4
 8008542:	460d      	mov	r5, r1
 8008544:	f7f8 f9c2 	bl	80008cc <__aeabi_d2iz>
 8008548:	f7f8 f8ce 	bl	80006e8 <__aeabi_i2d>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4620      	mov	r0, r4
 8008552:	4629      	mov	r1, r5
 8008554:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008558:	f7f7 ff78 	bl	800044c <__aeabi_dsub>
 800855c:	4b21      	ldr	r3, [pc, #132]	; (80085e4 <__ieee754_rem_pio2+0x404>)
 800855e:	2200      	movs	r2, #0
 8008560:	f7f7 fe46 	bl	80001f0 <__aeabi_dmul>
 8008564:	460d      	mov	r5, r1
 8008566:	4604      	mov	r4, r0
 8008568:	f7f8 f9b0 	bl	80008cc <__aeabi_d2iz>
 800856c:	f7f8 f8bc 	bl	80006e8 <__aeabi_i2d>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4620      	mov	r0, r4
 8008576:	4629      	mov	r1, r5
 8008578:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800857c:	f7f7 ff66 	bl	800044c <__aeabi_dsub>
 8008580:	4b18      	ldr	r3, [pc, #96]	; (80085e4 <__ieee754_rem_pio2+0x404>)
 8008582:	2200      	movs	r2, #0
 8008584:	f7f7 fe34 	bl	80001f0 <__aeabi_dmul>
 8008588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800858c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008590:	2703      	movs	r7, #3
 8008592:	2400      	movs	r4, #0
 8008594:	2500      	movs	r5, #0
 8008596:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800859a:	4622      	mov	r2, r4
 800859c:	462b      	mov	r3, r5
 800859e:	46b9      	mov	r9, r7
 80085a0:	3f01      	subs	r7, #1
 80085a2:	f7f8 f961 	bl	8000868 <__aeabi_dcmpeq>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d1f5      	bne.n	8008596 <__ieee754_rem_pio2+0x3b6>
 80085aa:	4b0f      	ldr	r3, [pc, #60]	; (80085e8 <__ieee754_rem_pio2+0x408>)
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	2302      	movs	r3, #2
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	4632      	mov	r2, r6
 80085b4:	464b      	mov	r3, r9
 80085b6:	4651      	mov	r1, sl
 80085b8:	a804      	add	r0, sp, #16
 80085ba:	f000 f821 	bl	8008600 <__kernel_rem_pio2>
 80085be:	9b02      	ldr	r3, [sp, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	4683      	mov	fp, r0
 80085c4:	f6bf ae4c 	bge.w	8008260 <__ieee754_rem_pio2+0x80>
 80085c8:	e9da 2100 	ldrd	r2, r1, [sl]
 80085cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085d0:	e9ca 2300 	strd	r2, r3, [sl]
 80085d4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80085d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085dc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80085e0:	e73f      	b.n	8008462 <__ieee754_rem_pio2+0x282>
 80085e2:	bf00      	nop
 80085e4:	41700000 	.word	0x41700000
 80085e8:	08008fa0 	.word	0x08008fa0

080085ec <fabs>:
 80085ec:	ec51 0b10 	vmov	r0, r1, d0
 80085f0:	ee10 2a10 	vmov	r2, s0
 80085f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085f8:	ec43 2b10 	vmov	d0, r2, r3
 80085fc:	4770      	bx	lr
	...

08008600 <__kernel_rem_pio2>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	ed2d 8b02 	vpush	{d8}
 8008608:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800860c:	f112 0f14 	cmn.w	r2, #20
 8008610:	9306      	str	r3, [sp, #24]
 8008612:	9104      	str	r1, [sp, #16]
 8008614:	4bc2      	ldr	r3, [pc, #776]	; (8008920 <__kernel_rem_pio2+0x320>)
 8008616:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008618:	9009      	str	r0, [sp, #36]	; 0x24
 800861a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	9b06      	ldr	r3, [sp, #24]
 8008622:	f103 33ff 	add.w	r3, r3, #4294967295
 8008626:	bfa8      	it	ge
 8008628:	1ed4      	subge	r4, r2, #3
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	bfb2      	itee	lt
 800862e:	2400      	movlt	r4, #0
 8008630:	2318      	movge	r3, #24
 8008632:	fb94 f4f3 	sdivge	r4, r4, r3
 8008636:	f06f 0317 	mvn.w	r3, #23
 800863a:	fb04 3303 	mla	r3, r4, r3, r3
 800863e:	eb03 0a02 	add.w	sl, r3, r2
 8008642:	9b00      	ldr	r3, [sp, #0]
 8008644:	9a05      	ldr	r2, [sp, #20]
 8008646:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008910 <__kernel_rem_pio2+0x310>
 800864a:	eb03 0802 	add.w	r8, r3, r2
 800864e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008650:	1aa7      	subs	r7, r4, r2
 8008652:	ae20      	add	r6, sp, #128	; 0x80
 8008654:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008658:	2500      	movs	r5, #0
 800865a:	4545      	cmp	r5, r8
 800865c:	dd13      	ble.n	8008686 <__kernel_rem_pio2+0x86>
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	aa20      	add	r2, sp, #128	; 0x80
 8008662:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008666:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800866a:	f04f 0800 	mov.w	r8, #0
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	4598      	cmp	r8, r3
 8008672:	dc31      	bgt.n	80086d8 <__kernel_rem_pio2+0xd8>
 8008674:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008910 <__kernel_rem_pio2+0x310>
 8008678:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800867c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008680:	462f      	mov	r7, r5
 8008682:	2600      	movs	r6, #0
 8008684:	e01b      	b.n	80086be <__kernel_rem_pio2+0xbe>
 8008686:	42ef      	cmn	r7, r5
 8008688:	d407      	bmi.n	800869a <__kernel_rem_pio2+0x9a>
 800868a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800868e:	f7f8 f82b 	bl	80006e8 <__aeabi_i2d>
 8008692:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008696:	3501      	adds	r5, #1
 8008698:	e7df      	b.n	800865a <__kernel_rem_pio2+0x5a>
 800869a:	ec51 0b18 	vmov	r0, r1, d8
 800869e:	e7f8      	b.n	8008692 <__kernel_rem_pio2+0x92>
 80086a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80086a8:	f7f7 fda2 	bl	80001f0 <__aeabi_dmul>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b4:	f7f7 fecc 	bl	8000450 <__adddf3>
 80086b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086bc:	3601      	adds	r6, #1
 80086be:	9b05      	ldr	r3, [sp, #20]
 80086c0:	429e      	cmp	r6, r3
 80086c2:	f1a7 0708 	sub.w	r7, r7, #8
 80086c6:	ddeb      	ble.n	80086a0 <__kernel_rem_pio2+0xa0>
 80086c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086cc:	f108 0801 	add.w	r8, r8, #1
 80086d0:	ecab 7b02 	vstmia	fp!, {d7}
 80086d4:	3508      	adds	r5, #8
 80086d6:	e7ca      	b.n	800866e <__kernel_rem_pio2+0x6e>
 80086d8:	9b00      	ldr	r3, [sp, #0]
 80086da:	aa0c      	add	r2, sp, #48	; 0x30
 80086dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80086e2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80086e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80086e8:	9c00      	ldr	r4, [sp, #0]
 80086ea:	930a      	str	r3, [sp, #40]	; 0x28
 80086ec:	00e3      	lsls	r3, r4, #3
 80086ee:	9308      	str	r3, [sp, #32]
 80086f0:	ab98      	add	r3, sp, #608	; 0x260
 80086f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086f6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80086fa:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80086fe:	ab70      	add	r3, sp, #448	; 0x1c0
 8008700:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008704:	46c3      	mov	fp, r8
 8008706:	46a1      	mov	r9, r4
 8008708:	f1b9 0f00 	cmp.w	r9, #0
 800870c:	f1a5 0508 	sub.w	r5, r5, #8
 8008710:	dc77      	bgt.n	8008802 <__kernel_rem_pio2+0x202>
 8008712:	ec47 6b10 	vmov	d0, r6, r7
 8008716:	4650      	mov	r0, sl
 8008718:	f000 fac2 	bl	8008ca0 <scalbn>
 800871c:	ec57 6b10 	vmov	r6, r7, d0
 8008720:	2200      	movs	r2, #0
 8008722:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008726:	ee10 0a10 	vmov	r0, s0
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 fd60 	bl	80001f0 <__aeabi_dmul>
 8008730:	ec41 0b10 	vmov	d0, r0, r1
 8008734:	f000 fb34 	bl	8008da0 <floor>
 8008738:	4b7a      	ldr	r3, [pc, #488]	; (8008924 <__kernel_rem_pio2+0x324>)
 800873a:	ec51 0b10 	vmov	r0, r1, d0
 800873e:	2200      	movs	r2, #0
 8008740:	f7f7 fd56 	bl	80001f0 <__aeabi_dmul>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4630      	mov	r0, r6
 800874a:	4639      	mov	r1, r7
 800874c:	f7f7 fe7e 	bl	800044c <__aeabi_dsub>
 8008750:	460f      	mov	r7, r1
 8008752:	4606      	mov	r6, r0
 8008754:	f7f8 f8ba 	bl	80008cc <__aeabi_d2iz>
 8008758:	9002      	str	r0, [sp, #8]
 800875a:	f7f7 ffc5 	bl	80006e8 <__aeabi_i2d>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4630      	mov	r0, r6
 8008764:	4639      	mov	r1, r7
 8008766:	f7f7 fe71 	bl	800044c <__aeabi_dsub>
 800876a:	f1ba 0f00 	cmp.w	sl, #0
 800876e:	4606      	mov	r6, r0
 8008770:	460f      	mov	r7, r1
 8008772:	dd6d      	ble.n	8008850 <__kernel_rem_pio2+0x250>
 8008774:	1e61      	subs	r1, r4, #1
 8008776:	ab0c      	add	r3, sp, #48	; 0x30
 8008778:	9d02      	ldr	r5, [sp, #8]
 800877a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800877e:	f1ca 0018 	rsb	r0, sl, #24
 8008782:	fa43 f200 	asr.w	r2, r3, r0
 8008786:	4415      	add	r5, r2
 8008788:	4082      	lsls	r2, r0
 800878a:	1a9b      	subs	r3, r3, r2
 800878c:	aa0c      	add	r2, sp, #48	; 0x30
 800878e:	9502      	str	r5, [sp, #8]
 8008790:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008794:	f1ca 0217 	rsb	r2, sl, #23
 8008798:	fa43 fb02 	asr.w	fp, r3, r2
 800879c:	f1bb 0f00 	cmp.w	fp, #0
 80087a0:	dd65      	ble.n	800886e <__kernel_rem_pio2+0x26e>
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	3301      	adds	r3, #1
 80087a8:	9302      	str	r3, [sp, #8]
 80087aa:	4615      	mov	r5, r2
 80087ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80087b0:	4294      	cmp	r4, r2
 80087b2:	f300 809f 	bgt.w	80088f4 <__kernel_rem_pio2+0x2f4>
 80087b6:	f1ba 0f00 	cmp.w	sl, #0
 80087ba:	dd07      	ble.n	80087cc <__kernel_rem_pio2+0x1cc>
 80087bc:	f1ba 0f01 	cmp.w	sl, #1
 80087c0:	f000 80c1 	beq.w	8008946 <__kernel_rem_pio2+0x346>
 80087c4:	f1ba 0f02 	cmp.w	sl, #2
 80087c8:	f000 80c7 	beq.w	800895a <__kernel_rem_pio2+0x35a>
 80087cc:	f1bb 0f02 	cmp.w	fp, #2
 80087d0:	d14d      	bne.n	800886e <__kernel_rem_pio2+0x26e>
 80087d2:	4632      	mov	r2, r6
 80087d4:	463b      	mov	r3, r7
 80087d6:	4954      	ldr	r1, [pc, #336]	; (8008928 <__kernel_rem_pio2+0x328>)
 80087d8:	2000      	movs	r0, #0
 80087da:	f7f7 fe37 	bl	800044c <__aeabi_dsub>
 80087de:	4606      	mov	r6, r0
 80087e0:	460f      	mov	r7, r1
 80087e2:	2d00      	cmp	r5, #0
 80087e4:	d043      	beq.n	800886e <__kernel_rem_pio2+0x26e>
 80087e6:	4650      	mov	r0, sl
 80087e8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008918 <__kernel_rem_pio2+0x318>
 80087ec:	f000 fa58 	bl	8008ca0 <scalbn>
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	ec53 2b10 	vmov	r2, r3, d0
 80087f8:	f7f7 fe28 	bl	800044c <__aeabi_dsub>
 80087fc:	4606      	mov	r6, r0
 80087fe:	460f      	mov	r7, r1
 8008800:	e035      	b.n	800886e <__kernel_rem_pio2+0x26e>
 8008802:	4b4a      	ldr	r3, [pc, #296]	; (800892c <__kernel_rem_pio2+0x32c>)
 8008804:	2200      	movs	r2, #0
 8008806:	4630      	mov	r0, r6
 8008808:	4639      	mov	r1, r7
 800880a:	f7f7 fcf1 	bl	80001f0 <__aeabi_dmul>
 800880e:	f7f8 f85d 	bl	80008cc <__aeabi_d2iz>
 8008812:	f7f7 ff69 	bl	80006e8 <__aeabi_i2d>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	ec43 2b18 	vmov	d8, r2, r3
 800881e:	4b44      	ldr	r3, [pc, #272]	; (8008930 <__kernel_rem_pio2+0x330>)
 8008820:	2200      	movs	r2, #0
 8008822:	f7f7 fce5 	bl	80001f0 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4630      	mov	r0, r6
 800882c:	4639      	mov	r1, r7
 800882e:	f7f7 fe0d 	bl	800044c <__aeabi_dsub>
 8008832:	f7f8 f84b 	bl	80008cc <__aeabi_d2iz>
 8008836:	e9d5 2300 	ldrd	r2, r3, [r5]
 800883a:	f84b 0b04 	str.w	r0, [fp], #4
 800883e:	ec51 0b18 	vmov	r0, r1, d8
 8008842:	f7f7 fe05 	bl	8000450 <__adddf3>
 8008846:	f109 39ff 	add.w	r9, r9, #4294967295
 800884a:	4606      	mov	r6, r0
 800884c:	460f      	mov	r7, r1
 800884e:	e75b      	b.n	8008708 <__kernel_rem_pio2+0x108>
 8008850:	d106      	bne.n	8008860 <__kernel_rem_pio2+0x260>
 8008852:	1e63      	subs	r3, r4, #1
 8008854:	aa0c      	add	r2, sp, #48	; 0x30
 8008856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800885a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800885e:	e79d      	b.n	800879c <__kernel_rem_pio2+0x19c>
 8008860:	4b34      	ldr	r3, [pc, #208]	; (8008934 <__kernel_rem_pio2+0x334>)
 8008862:	2200      	movs	r2, #0
 8008864:	f7f8 f81e 	bl	80008a4 <__aeabi_dcmpge>
 8008868:	2800      	cmp	r0, #0
 800886a:	d140      	bne.n	80088ee <__kernel_rem_pio2+0x2ee>
 800886c:	4683      	mov	fp, r0
 800886e:	2200      	movs	r2, #0
 8008870:	2300      	movs	r3, #0
 8008872:	4630      	mov	r0, r6
 8008874:	4639      	mov	r1, r7
 8008876:	f7f7 fff7 	bl	8000868 <__aeabi_dcmpeq>
 800887a:	2800      	cmp	r0, #0
 800887c:	f000 80c1 	beq.w	8008a02 <__kernel_rem_pio2+0x402>
 8008880:	1e65      	subs	r5, r4, #1
 8008882:	462b      	mov	r3, r5
 8008884:	2200      	movs	r2, #0
 8008886:	9900      	ldr	r1, [sp, #0]
 8008888:	428b      	cmp	r3, r1
 800888a:	da6d      	bge.n	8008968 <__kernel_rem_pio2+0x368>
 800888c:	2a00      	cmp	r2, #0
 800888e:	f000 808a 	beq.w	80089a6 <__kernel_rem_pio2+0x3a6>
 8008892:	ab0c      	add	r3, sp, #48	; 0x30
 8008894:	f1aa 0a18 	sub.w	sl, sl, #24
 8008898:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 80ae 	beq.w	80089fe <__kernel_rem_pio2+0x3fe>
 80088a2:	4650      	mov	r0, sl
 80088a4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008918 <__kernel_rem_pio2+0x318>
 80088a8:	f000 f9fa 	bl	8008ca0 <scalbn>
 80088ac:	1c6b      	adds	r3, r5, #1
 80088ae:	00da      	lsls	r2, r3, #3
 80088b0:	9205      	str	r2, [sp, #20]
 80088b2:	ec57 6b10 	vmov	r6, r7, d0
 80088b6:	aa70      	add	r2, sp, #448	; 0x1c0
 80088b8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800892c <__kernel_rem_pio2+0x32c>
 80088bc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80088c0:	462c      	mov	r4, r5
 80088c2:	f04f 0800 	mov.w	r8, #0
 80088c6:	2c00      	cmp	r4, #0
 80088c8:	f280 80d4 	bge.w	8008a74 <__kernel_rem_pio2+0x474>
 80088cc:	462c      	mov	r4, r5
 80088ce:	2c00      	cmp	r4, #0
 80088d0:	f2c0 8102 	blt.w	8008ad8 <__kernel_rem_pio2+0x4d8>
 80088d4:	4b18      	ldr	r3, [pc, #96]	; (8008938 <__kernel_rem_pio2+0x338>)
 80088d6:	461e      	mov	r6, r3
 80088d8:	ab70      	add	r3, sp, #448	; 0x1c0
 80088da:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80088de:	1b2b      	subs	r3, r5, r4
 80088e0:	f04f 0900 	mov.w	r9, #0
 80088e4:	f04f 0a00 	mov.w	sl, #0
 80088e8:	2700      	movs	r7, #0
 80088ea:	9306      	str	r3, [sp, #24]
 80088ec:	e0e6      	b.n	8008abc <__kernel_rem_pio2+0x4bc>
 80088ee:	f04f 0b02 	mov.w	fp, #2
 80088f2:	e756      	b.n	80087a2 <__kernel_rem_pio2+0x1a2>
 80088f4:	f8d8 3000 	ldr.w	r3, [r8]
 80088f8:	bb05      	cbnz	r5, 800893c <__kernel_rem_pio2+0x33c>
 80088fa:	b123      	cbz	r3, 8008906 <__kernel_rem_pio2+0x306>
 80088fc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008900:	f8c8 3000 	str.w	r3, [r8]
 8008904:	2301      	movs	r3, #1
 8008906:	3201      	adds	r2, #1
 8008908:	f108 0804 	add.w	r8, r8, #4
 800890c:	461d      	mov	r5, r3
 800890e:	e74f      	b.n	80087b0 <__kernel_rem_pio2+0x1b0>
	...
 800891c:	3ff00000 	.word	0x3ff00000
 8008920:	080090e8 	.word	0x080090e8
 8008924:	40200000 	.word	0x40200000
 8008928:	3ff00000 	.word	0x3ff00000
 800892c:	3e700000 	.word	0x3e700000
 8008930:	41700000 	.word	0x41700000
 8008934:	3fe00000 	.word	0x3fe00000
 8008938:	080090a8 	.word	0x080090a8
 800893c:	1acb      	subs	r3, r1, r3
 800893e:	f8c8 3000 	str.w	r3, [r8]
 8008942:	462b      	mov	r3, r5
 8008944:	e7df      	b.n	8008906 <__kernel_rem_pio2+0x306>
 8008946:	1e62      	subs	r2, r4, #1
 8008948:	ab0c      	add	r3, sp, #48	; 0x30
 800894a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008952:	a90c      	add	r1, sp, #48	; 0x30
 8008954:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008958:	e738      	b.n	80087cc <__kernel_rem_pio2+0x1cc>
 800895a:	1e62      	subs	r2, r4, #1
 800895c:	ab0c      	add	r3, sp, #48	; 0x30
 800895e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008962:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008966:	e7f4      	b.n	8008952 <__kernel_rem_pio2+0x352>
 8008968:	a90c      	add	r1, sp, #48	; 0x30
 800896a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800896e:	3b01      	subs	r3, #1
 8008970:	430a      	orrs	r2, r1
 8008972:	e788      	b.n	8008886 <__kernel_rem_pio2+0x286>
 8008974:	3301      	adds	r3, #1
 8008976:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800897a:	2900      	cmp	r1, #0
 800897c:	d0fa      	beq.n	8008974 <__kernel_rem_pio2+0x374>
 800897e:	9a08      	ldr	r2, [sp, #32]
 8008980:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008984:	446a      	add	r2, sp
 8008986:	3a98      	subs	r2, #152	; 0x98
 8008988:	9208      	str	r2, [sp, #32]
 800898a:	9a06      	ldr	r2, [sp, #24]
 800898c:	a920      	add	r1, sp, #128	; 0x80
 800898e:	18a2      	adds	r2, r4, r2
 8008990:	18e3      	adds	r3, r4, r3
 8008992:	f104 0801 	add.w	r8, r4, #1
 8008996:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800899a:	9302      	str	r3, [sp, #8]
 800899c:	9b02      	ldr	r3, [sp, #8]
 800899e:	4543      	cmp	r3, r8
 80089a0:	da04      	bge.n	80089ac <__kernel_rem_pio2+0x3ac>
 80089a2:	461c      	mov	r4, r3
 80089a4:	e6a2      	b.n	80086ec <__kernel_rem_pio2+0xec>
 80089a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089a8:	2301      	movs	r3, #1
 80089aa:	e7e4      	b.n	8008976 <__kernel_rem_pio2+0x376>
 80089ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80089b2:	f7f7 fe99 	bl	80006e8 <__aeabi_i2d>
 80089b6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80089ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089bc:	46ab      	mov	fp, r5
 80089be:	461c      	mov	r4, r3
 80089c0:	f04f 0900 	mov.w	r9, #0
 80089c4:	2600      	movs	r6, #0
 80089c6:	2700      	movs	r7, #0
 80089c8:	9b05      	ldr	r3, [sp, #20]
 80089ca:	4599      	cmp	r9, r3
 80089cc:	dd06      	ble.n	80089dc <__kernel_rem_pio2+0x3dc>
 80089ce:	9b08      	ldr	r3, [sp, #32]
 80089d0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80089d4:	f108 0801 	add.w	r8, r8, #1
 80089d8:	9308      	str	r3, [sp, #32]
 80089da:	e7df      	b.n	800899c <__kernel_rem_pio2+0x39c>
 80089dc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80089e0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80089e4:	f7f7 fc04 	bl	80001f0 <__aeabi_dmul>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4630      	mov	r0, r6
 80089ee:	4639      	mov	r1, r7
 80089f0:	f7f7 fd2e 	bl	8000450 <__adddf3>
 80089f4:	f109 0901 	add.w	r9, r9, #1
 80089f8:	4606      	mov	r6, r0
 80089fa:	460f      	mov	r7, r1
 80089fc:	e7e4      	b.n	80089c8 <__kernel_rem_pio2+0x3c8>
 80089fe:	3d01      	subs	r5, #1
 8008a00:	e747      	b.n	8008892 <__kernel_rem_pio2+0x292>
 8008a02:	ec47 6b10 	vmov	d0, r6, r7
 8008a06:	f1ca 0000 	rsb	r0, sl, #0
 8008a0a:	f000 f949 	bl	8008ca0 <scalbn>
 8008a0e:	ec57 6b10 	vmov	r6, r7, d0
 8008a12:	4ba0      	ldr	r3, [pc, #640]	; (8008c94 <__kernel_rem_pio2+0x694>)
 8008a14:	ee10 0a10 	vmov	r0, s0
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	f7f7 ff42 	bl	80008a4 <__aeabi_dcmpge>
 8008a20:	b1f8      	cbz	r0, 8008a62 <__kernel_rem_pio2+0x462>
 8008a22:	4b9d      	ldr	r3, [pc, #628]	; (8008c98 <__kernel_rem_pio2+0x698>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	4630      	mov	r0, r6
 8008a28:	4639      	mov	r1, r7
 8008a2a:	f7f7 fbe1 	bl	80001f0 <__aeabi_dmul>
 8008a2e:	f7f7 ff4d 	bl	80008cc <__aeabi_d2iz>
 8008a32:	4680      	mov	r8, r0
 8008a34:	f7f7 fe58 	bl	80006e8 <__aeabi_i2d>
 8008a38:	4b96      	ldr	r3, [pc, #600]	; (8008c94 <__kernel_rem_pio2+0x694>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f7f7 fbd8 	bl	80001f0 <__aeabi_dmul>
 8008a40:	460b      	mov	r3, r1
 8008a42:	4602      	mov	r2, r0
 8008a44:	4639      	mov	r1, r7
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7f7 fd00 	bl	800044c <__aeabi_dsub>
 8008a4c:	f7f7 ff3e 	bl	80008cc <__aeabi_d2iz>
 8008a50:	1c65      	adds	r5, r4, #1
 8008a52:	ab0c      	add	r3, sp, #48	; 0x30
 8008a54:	f10a 0a18 	add.w	sl, sl, #24
 8008a58:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008a5c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008a60:	e71f      	b.n	80088a2 <__kernel_rem_pio2+0x2a2>
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f7 ff31 	bl	80008cc <__aeabi_d2iz>
 8008a6a:	ab0c      	add	r3, sp, #48	; 0x30
 8008a6c:	4625      	mov	r5, r4
 8008a6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008a72:	e716      	b.n	80088a2 <__kernel_rem_pio2+0x2a2>
 8008a74:	ab0c      	add	r3, sp, #48	; 0x30
 8008a76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008a7a:	f7f7 fe35 	bl	80006e8 <__aeabi_i2d>
 8008a7e:	4632      	mov	r2, r6
 8008a80:	463b      	mov	r3, r7
 8008a82:	f7f7 fbb5 	bl	80001f0 <__aeabi_dmul>
 8008a86:	4642      	mov	r2, r8
 8008a88:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008a8c:	464b      	mov	r3, r9
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f7 fbad 	bl	80001f0 <__aeabi_dmul>
 8008a96:	3c01      	subs	r4, #1
 8008a98:	4606      	mov	r6, r0
 8008a9a:	460f      	mov	r7, r1
 8008a9c:	e713      	b.n	80088c6 <__kernel_rem_pio2+0x2c6>
 8008a9e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008aa2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008aa6:	f7f7 fba3 	bl	80001f0 <__aeabi_dmul>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4648      	mov	r0, r9
 8008ab0:	4651      	mov	r1, sl
 8008ab2:	f7f7 fccd 	bl	8000450 <__adddf3>
 8008ab6:	3701      	adds	r7, #1
 8008ab8:	4681      	mov	r9, r0
 8008aba:	468a      	mov	sl, r1
 8008abc:	9b00      	ldr	r3, [sp, #0]
 8008abe:	429f      	cmp	r7, r3
 8008ac0:	dc02      	bgt.n	8008ac8 <__kernel_rem_pio2+0x4c8>
 8008ac2:	9b06      	ldr	r3, [sp, #24]
 8008ac4:	429f      	cmp	r7, r3
 8008ac6:	ddea      	ble.n	8008a9e <__kernel_rem_pio2+0x49e>
 8008ac8:	9a06      	ldr	r2, [sp, #24]
 8008aca:	ab48      	add	r3, sp, #288	; 0x120
 8008acc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008ad0:	e9c6 9a00 	strd	r9, sl, [r6]
 8008ad4:	3c01      	subs	r4, #1
 8008ad6:	e6fa      	b.n	80088ce <__kernel_rem_pio2+0x2ce>
 8008ad8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	dc0b      	bgt.n	8008af6 <__kernel_rem_pio2+0x4f6>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dc39      	bgt.n	8008b56 <__kernel_rem_pio2+0x556>
 8008ae2:	d05d      	beq.n	8008ba0 <__kernel_rem_pio2+0x5a0>
 8008ae4:	9b02      	ldr	r3, [sp, #8]
 8008ae6:	f003 0007 	and.w	r0, r3, #7
 8008aea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008aee:	ecbd 8b02 	vpop	{d8}
 8008af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d1f3      	bne.n	8008ae4 <__kernel_rem_pio2+0x4e4>
 8008afc:	9b05      	ldr	r3, [sp, #20]
 8008afe:	9500      	str	r5, [sp, #0]
 8008b00:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008b04:	eb0d 0403 	add.w	r4, sp, r3
 8008b08:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008b0c:	46a2      	mov	sl, r4
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f1aa 0a08 	sub.w	sl, sl, #8
 8008b16:	dc69      	bgt.n	8008bec <__kernel_rem_pio2+0x5ec>
 8008b18:	46aa      	mov	sl, r5
 8008b1a:	f1ba 0f01 	cmp.w	sl, #1
 8008b1e:	f1a4 0408 	sub.w	r4, r4, #8
 8008b22:	f300 8083 	bgt.w	8008c2c <__kernel_rem_pio2+0x62c>
 8008b26:	9c05      	ldr	r4, [sp, #20]
 8008b28:	ab48      	add	r3, sp, #288	; 0x120
 8008b2a:	441c      	add	r4, r3
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	2100      	movs	r1, #0
 8008b30:	2d01      	cmp	r5, #1
 8008b32:	f300 809a 	bgt.w	8008c6a <__kernel_rem_pio2+0x66a>
 8008b36:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008b3a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008b3e:	f1bb 0f00 	cmp.w	fp, #0
 8008b42:	f040 8098 	bne.w	8008c76 <__kernel_rem_pio2+0x676>
 8008b46:	9b04      	ldr	r3, [sp, #16]
 8008b48:	e9c3 7800 	strd	r7, r8, [r3]
 8008b4c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008b50:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008b54:	e7c6      	b.n	8008ae4 <__kernel_rem_pio2+0x4e4>
 8008b56:	9e05      	ldr	r6, [sp, #20]
 8008b58:	ab48      	add	r3, sp, #288	; 0x120
 8008b5a:	441e      	add	r6, r3
 8008b5c:	462c      	mov	r4, r5
 8008b5e:	2000      	movs	r0, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	2c00      	cmp	r4, #0
 8008b64:	da33      	bge.n	8008bce <__kernel_rem_pio2+0x5ce>
 8008b66:	f1bb 0f00 	cmp.w	fp, #0
 8008b6a:	d036      	beq.n	8008bda <__kernel_rem_pio2+0x5da>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b72:	9c04      	ldr	r4, [sp, #16]
 8008b74:	e9c4 2300 	strd	r2, r3, [r4]
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008b80:	f7f7 fc64 	bl	800044c <__aeabi_dsub>
 8008b84:	ae4a      	add	r6, sp, #296	; 0x128
 8008b86:	2401      	movs	r4, #1
 8008b88:	42a5      	cmp	r5, r4
 8008b8a:	da29      	bge.n	8008be0 <__kernel_rem_pio2+0x5e0>
 8008b8c:	f1bb 0f00 	cmp.w	fp, #0
 8008b90:	d002      	beq.n	8008b98 <__kernel_rem_pio2+0x598>
 8008b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b96:	4619      	mov	r1, r3
 8008b98:	9b04      	ldr	r3, [sp, #16]
 8008b9a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008b9e:	e7a1      	b.n	8008ae4 <__kernel_rem_pio2+0x4e4>
 8008ba0:	9c05      	ldr	r4, [sp, #20]
 8008ba2:	ab48      	add	r3, sp, #288	; 0x120
 8008ba4:	441c      	add	r4, r3
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	2100      	movs	r1, #0
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	da09      	bge.n	8008bc2 <__kernel_rem_pio2+0x5c2>
 8008bae:	f1bb 0f00 	cmp.w	fp, #0
 8008bb2:	d002      	beq.n	8008bba <__kernel_rem_pio2+0x5ba>
 8008bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bb8:	4619      	mov	r1, r3
 8008bba:	9b04      	ldr	r3, [sp, #16]
 8008bbc:	e9c3 0100 	strd	r0, r1, [r3]
 8008bc0:	e790      	b.n	8008ae4 <__kernel_rem_pio2+0x4e4>
 8008bc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008bc6:	f7f7 fc43 	bl	8000450 <__adddf3>
 8008bca:	3d01      	subs	r5, #1
 8008bcc:	e7ed      	b.n	8008baa <__kernel_rem_pio2+0x5aa>
 8008bce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008bd2:	f7f7 fc3d 	bl	8000450 <__adddf3>
 8008bd6:	3c01      	subs	r4, #1
 8008bd8:	e7c3      	b.n	8008b62 <__kernel_rem_pio2+0x562>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	e7c8      	b.n	8008b72 <__kernel_rem_pio2+0x572>
 8008be0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008be4:	f7f7 fc34 	bl	8000450 <__adddf3>
 8008be8:	3401      	adds	r4, #1
 8008bea:	e7cd      	b.n	8008b88 <__kernel_rem_pio2+0x588>
 8008bec:	e9da 8900 	ldrd	r8, r9, [sl]
 8008bf0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008bf4:	9b00      	ldr	r3, [sp, #0]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	4632      	mov	r2, r6
 8008bfc:	463b      	mov	r3, r7
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4649      	mov	r1, r9
 8008c02:	f7f7 fc25 	bl	8000450 <__adddf3>
 8008c06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4640      	mov	r0, r8
 8008c10:	4649      	mov	r1, r9
 8008c12:	f7f7 fc1b 	bl	800044c <__aeabi_dsub>
 8008c16:	4632      	mov	r2, r6
 8008c18:	463b      	mov	r3, r7
 8008c1a:	f7f7 fc19 	bl	8000450 <__adddf3>
 8008c1e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008c22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c26:	ed8a 7b00 	vstr	d7, [sl]
 8008c2a:	e770      	b.n	8008b0e <__kernel_rem_pio2+0x50e>
 8008c2c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008c30:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008c34:	4640      	mov	r0, r8
 8008c36:	4632      	mov	r2, r6
 8008c38:	463b      	mov	r3, r7
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	f7f7 fc08 	bl	8000450 <__adddf3>
 8008c40:	e9cd 0100 	strd	r0, r1, [sp]
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4640      	mov	r0, r8
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	f7f7 fbfe 	bl	800044c <__aeabi_dsub>
 8008c50:	4632      	mov	r2, r6
 8008c52:	463b      	mov	r3, r7
 8008c54:	f7f7 fbfc 	bl	8000450 <__adddf3>
 8008c58:	ed9d 7b00 	vldr	d7, [sp]
 8008c5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c60:	ed84 7b00 	vstr	d7, [r4]
 8008c64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c68:	e757      	b.n	8008b1a <__kernel_rem_pio2+0x51a>
 8008c6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008c6e:	f7f7 fbef 	bl	8000450 <__adddf3>
 8008c72:	3d01      	subs	r5, #1
 8008c74:	e75c      	b.n	8008b30 <__kernel_rem_pio2+0x530>
 8008c76:	9b04      	ldr	r3, [sp, #16]
 8008c78:	9a04      	ldr	r2, [sp, #16]
 8008c7a:	601f      	str	r7, [r3, #0]
 8008c7c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008c80:	605c      	str	r4, [r3, #4]
 8008c82:	609d      	str	r5, [r3, #8]
 8008c84:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c88:	60d3      	str	r3, [r2, #12]
 8008c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c8e:	6110      	str	r0, [r2, #16]
 8008c90:	6153      	str	r3, [r2, #20]
 8008c92:	e727      	b.n	8008ae4 <__kernel_rem_pio2+0x4e4>
 8008c94:	41700000 	.word	0x41700000
 8008c98:	3e700000 	.word	0x3e700000
 8008c9c:	00000000 	.word	0x00000000

08008ca0 <scalbn>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	ec55 4b10 	vmov	r4, r5, d0
 8008ca6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008caa:	4606      	mov	r6, r0
 8008cac:	462b      	mov	r3, r5
 8008cae:	b999      	cbnz	r1, 8008cd8 <scalbn+0x38>
 8008cb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008cb4:	4323      	orrs	r3, r4
 8008cb6:	d03f      	beq.n	8008d38 <scalbn+0x98>
 8008cb8:	4b35      	ldr	r3, [pc, #212]	; (8008d90 <scalbn+0xf0>)
 8008cba:	4629      	mov	r1, r5
 8008cbc:	ee10 0a10 	vmov	r0, s0
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f7f7 fa95 	bl	80001f0 <__aeabi_dmul>
 8008cc6:	4b33      	ldr	r3, [pc, #204]	; (8008d94 <scalbn+0xf4>)
 8008cc8:	429e      	cmp	r6, r3
 8008cca:	4604      	mov	r4, r0
 8008ccc:	460d      	mov	r5, r1
 8008cce:	da10      	bge.n	8008cf2 <scalbn+0x52>
 8008cd0:	a327      	add	r3, pc, #156	; (adr r3, 8008d70 <scalbn+0xd0>)
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	e01f      	b.n	8008d18 <scalbn+0x78>
 8008cd8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008cdc:	4291      	cmp	r1, r2
 8008cde:	d10c      	bne.n	8008cfa <scalbn+0x5a>
 8008ce0:	ee10 2a10 	vmov	r2, s0
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	f7f7 fbb2 	bl	8000450 <__adddf3>
 8008cec:	4604      	mov	r4, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	e022      	b.n	8008d38 <scalbn+0x98>
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008cf8:	3936      	subs	r1, #54	; 0x36
 8008cfa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008cfe:	4296      	cmp	r6, r2
 8008d00:	dd0d      	ble.n	8008d1e <scalbn+0x7e>
 8008d02:	2d00      	cmp	r5, #0
 8008d04:	a11c      	add	r1, pc, #112	; (adr r1, 8008d78 <scalbn+0xd8>)
 8008d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d0a:	da02      	bge.n	8008d12 <scalbn+0x72>
 8008d0c:	a11c      	add	r1, pc, #112	; (adr r1, 8008d80 <scalbn+0xe0>)
 8008d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d12:	a319      	add	r3, pc, #100	; (adr r3, 8008d78 <scalbn+0xd8>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f7f7 fa6a 	bl	80001f0 <__aeabi_dmul>
 8008d1c:	e7e6      	b.n	8008cec <scalbn+0x4c>
 8008d1e:	1872      	adds	r2, r6, r1
 8008d20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008d24:	428a      	cmp	r2, r1
 8008d26:	dcec      	bgt.n	8008d02 <scalbn+0x62>
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	dd08      	ble.n	8008d3e <scalbn+0x9e>
 8008d2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d38:	ec45 4b10 	vmov	d0, r4, r5
 8008d3c:	bd70      	pop	{r4, r5, r6, pc}
 8008d3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008d42:	da08      	bge.n	8008d56 <scalbn+0xb6>
 8008d44:	2d00      	cmp	r5, #0
 8008d46:	a10a      	add	r1, pc, #40	; (adr r1, 8008d70 <scalbn+0xd0>)
 8008d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d4c:	dac0      	bge.n	8008cd0 <scalbn+0x30>
 8008d4e:	a10e      	add	r1, pc, #56	; (adr r1, 8008d88 <scalbn+0xe8>)
 8008d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d54:	e7bc      	b.n	8008cd0 <scalbn+0x30>
 8008d56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d5a:	3236      	adds	r2, #54	; 0x36
 8008d5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008d64:	4620      	mov	r0, r4
 8008d66:	4b0c      	ldr	r3, [pc, #48]	; (8008d98 <scalbn+0xf8>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	e7d5      	b.n	8008d18 <scalbn+0x78>
 8008d6c:	f3af 8000 	nop.w
 8008d70:	c2f8f359 	.word	0xc2f8f359
 8008d74:	01a56e1f 	.word	0x01a56e1f
 8008d78:	8800759c 	.word	0x8800759c
 8008d7c:	7e37e43c 	.word	0x7e37e43c
 8008d80:	8800759c 	.word	0x8800759c
 8008d84:	fe37e43c 	.word	0xfe37e43c
 8008d88:	c2f8f359 	.word	0xc2f8f359
 8008d8c:	81a56e1f 	.word	0x81a56e1f
 8008d90:	43500000 	.word	0x43500000
 8008d94:	ffff3cb0 	.word	0xffff3cb0
 8008d98:	3c900000 	.word	0x3c900000
 8008d9c:	00000000 	.word	0x00000000

08008da0 <floor>:
 8008da0:	ec51 0b10 	vmov	r0, r1, d0
 8008da4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dac:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008db0:	2e13      	cmp	r6, #19
 8008db2:	ee10 5a10 	vmov	r5, s0
 8008db6:	ee10 8a10 	vmov	r8, s0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	dc31      	bgt.n	8008e22 <floor+0x82>
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	da14      	bge.n	8008dec <floor+0x4c>
 8008dc2:	a333      	add	r3, pc, #204	; (adr r3, 8008e90 <floor+0xf0>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f7f7 fb42 	bl	8000450 <__adddf3>
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f7f7 fd72 	bl	80008b8 <__aeabi_dcmpgt>
 8008dd4:	b138      	cbz	r0, 8008de6 <floor+0x46>
 8008dd6:	2c00      	cmp	r4, #0
 8008dd8:	da53      	bge.n	8008e82 <floor+0xe2>
 8008dda:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008dde:	4325      	orrs	r5, r4
 8008de0:	d052      	beq.n	8008e88 <floor+0xe8>
 8008de2:	4c2d      	ldr	r4, [pc, #180]	; (8008e98 <floor+0xf8>)
 8008de4:	2500      	movs	r5, #0
 8008de6:	4621      	mov	r1, r4
 8008de8:	4628      	mov	r0, r5
 8008dea:	e024      	b.n	8008e36 <floor+0x96>
 8008dec:	4f2b      	ldr	r7, [pc, #172]	; (8008e9c <floor+0xfc>)
 8008dee:	4137      	asrs	r7, r6
 8008df0:	ea01 0307 	and.w	r3, r1, r7
 8008df4:	4303      	orrs	r3, r0
 8008df6:	d01e      	beq.n	8008e36 <floor+0x96>
 8008df8:	a325      	add	r3, pc, #148	; (adr r3, 8008e90 <floor+0xf0>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f7f7 fb27 	bl	8000450 <__adddf3>
 8008e02:	2200      	movs	r2, #0
 8008e04:	2300      	movs	r3, #0
 8008e06:	f7f7 fd57 	bl	80008b8 <__aeabi_dcmpgt>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d0eb      	beq.n	8008de6 <floor+0x46>
 8008e0e:	2c00      	cmp	r4, #0
 8008e10:	bfbe      	ittt	lt
 8008e12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008e16:	4133      	asrlt	r3, r6
 8008e18:	18e4      	addlt	r4, r4, r3
 8008e1a:	ea24 0407 	bic.w	r4, r4, r7
 8008e1e:	2500      	movs	r5, #0
 8008e20:	e7e1      	b.n	8008de6 <floor+0x46>
 8008e22:	2e33      	cmp	r6, #51	; 0x33
 8008e24:	dd0b      	ble.n	8008e3e <floor+0x9e>
 8008e26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008e2a:	d104      	bne.n	8008e36 <floor+0x96>
 8008e2c:	ee10 2a10 	vmov	r2, s0
 8008e30:	460b      	mov	r3, r1
 8008e32:	f7f7 fb0d 	bl	8000450 <__adddf3>
 8008e36:	ec41 0b10 	vmov	d0, r0, r1
 8008e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e3e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008e42:	f04f 37ff 	mov.w	r7, #4294967295
 8008e46:	40df      	lsrs	r7, r3
 8008e48:	4238      	tst	r0, r7
 8008e4a:	d0f4      	beq.n	8008e36 <floor+0x96>
 8008e4c:	a310      	add	r3, pc, #64	; (adr r3, 8008e90 <floor+0xf0>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fafd 	bl	8000450 <__adddf3>
 8008e56:	2200      	movs	r2, #0
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f7f7 fd2d 	bl	80008b8 <__aeabi_dcmpgt>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d0c1      	beq.n	8008de6 <floor+0x46>
 8008e62:	2c00      	cmp	r4, #0
 8008e64:	da0a      	bge.n	8008e7c <floor+0xdc>
 8008e66:	2e14      	cmp	r6, #20
 8008e68:	d101      	bne.n	8008e6e <floor+0xce>
 8008e6a:	3401      	adds	r4, #1
 8008e6c:	e006      	b.n	8008e7c <floor+0xdc>
 8008e6e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008e72:	2301      	movs	r3, #1
 8008e74:	40b3      	lsls	r3, r6
 8008e76:	441d      	add	r5, r3
 8008e78:	45a8      	cmp	r8, r5
 8008e7a:	d8f6      	bhi.n	8008e6a <floor+0xca>
 8008e7c:	ea25 0507 	bic.w	r5, r5, r7
 8008e80:	e7b1      	b.n	8008de6 <floor+0x46>
 8008e82:	2500      	movs	r5, #0
 8008e84:	462c      	mov	r4, r5
 8008e86:	e7ae      	b.n	8008de6 <floor+0x46>
 8008e88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008e8c:	e7ab      	b.n	8008de6 <floor+0x46>
 8008e8e:	bf00      	nop
 8008e90:	8800759c 	.word	0x8800759c
 8008e94:	7e37e43c 	.word	0x7e37e43c
 8008e98:	bff00000 	.word	0xbff00000
 8008e9c:	000fffff 	.word	0x000fffff

08008ea0 <_init>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	bf00      	nop
 8008ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea6:	bc08      	pop	{r3}
 8008ea8:	469e      	mov	lr, r3
 8008eaa:	4770      	bx	lr

08008eac <_fini>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	bf00      	nop
 8008eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb2:	bc08      	pop	{r3}
 8008eb4:	469e      	mov	lr, r3
 8008eb6:	4770      	bx	lr
